###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        24/Apr/2016  20:13:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\lib\LPLD\HW\HW_FTM.c
#    Command line =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\lib\LPLD\HW\HW_FTM.c -D
#        LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR EWARM\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR EWARM\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\HW_FTM.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\HW_FTM.o
#
###############################################################################

C:\Users\Administrator\Desktop\Gold_Razor_A\lib\LPLD\HW\HW_FTM.c
      1          /**
      2           * @file HW_FTM.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FTM底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable10_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     23          #include "HW_FTM.h"
     24          
     25          //用户自定义中断服务函数数组
     26          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 

   \                                 In section .bss, align 4
     27          FTM_ISR_CALLBACK FTM_ISR[3];
   \                     FTM_ISR:
   \   00000000                      DS8 12
     28          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
     29          FTM_ISR_CALLBACK FTM_ISR[4];
     30          #endif
     31          
     32          static uint8 LPLD_FTM_PWM_Init(FTM_InitTypeDef);
     33          static uint8 LPLD_FTM_IC_Init(FTM_InitTypeDef);
     34          static uint8 LPLD_FTM_QD_Init(FTM_InitTypeDef);
     35          static uint8 LPLD_FTM_DEC_Init(FTM_InitTypeDef);
     36          static uint8 LPLD_FTM_PinInit(FTM_Type *, FtmChnEnum_Type, PortPinsEnum_Type);
     37          static uint8 LPLD_FTM_PinDeinit(FTM_Type *, FtmChnEnum_Type);
     38          
     39          
     40          /*
     41           * LPLD_FTM_Init
     42           * FTM模块通用初始化，可初始化为PWM、输入捕获、正交解码、双边捕获模式
     43           *
     44           * 参数:
     45           *    ftm_init_structure--FTM初始化结构体，
     46           *                        具体定义见FTM_InitTypeDef
     47           *
     48           * 输出:
     49           *    0--配置错误
     50           *    1--配置成功
     51           */

   \                                 In section .text, align 2, keep-with-next
     52          uint8 LPLD_FTM_Init(FTM_InitTypeDef ftm_init_structure)
     53          {
   \                     LPLD_FTM_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB53E             PUSH     {R1-R5,LR}
     54            uint8 result, i;
     55            //参数检查
     56            ASSERT( ftm_init_structure.FTM_Mode & 
     57                   (FTM_MODE_PWM|FTM_MODE_IC|FTM_MODE_QD|FTM_MODE_DEC));  //判断模式选择
   \   00000004   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000008   0x210F             MOVS     R1,#+15
   \   0000000A   0x4208             TST      R0,R1
   \   0000000C   0xD104             BNE.N    ??LPLD_FTM_Init_0
   \   0000000E   0x2139             MOVS     R1,#+57
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000014   0x.... 0x....      BL       assert_failed
     58            
     59            // 使能FTM时钟模块
     60            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \                     ??LPLD_FTM_Init_0: (+1)
   \   00000018   0x9806             LDR      R0,[SP, #+24]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable10_3  ;; 0x40038000
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD117             BNE.N    ??LPLD_FTM_Init_1
     61            {
     62              i=0; 
   \   00000022   0x2500             MOVS     R5,#+0
     63              SIM->SCGC6 |= SIM_SCGC6_FTM0_MASK;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x4004803c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x4004803c
   \   00000032   0x6008             STR      R0,[R1, #+0]
     64            }
     65            else if(ftm_init_structure.FTM_Ftmx == FTM1)
     66            {
     67              i=1;
     68              SIM->SCGC6 |= SIM_SCGC6_FTM1_MASK;
     69            }
     70            else if(ftm_init_structure.FTM_Ftmx == FTM2)
     71            {
     72              i=2;
     73              SIM->SCGC3 |= SIM_SCGC3_FTM2_MASK;
     74            }
     75          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
     76            else if(ftm_init_structure.FTM_Ftmx == FTM3)
     77            {
     78              i=3;
     79              SIM->SCGC3 |= SIM_SCGC3_FTM3_MASK;
     80            }
     81          #endif
     82            else
     83            {
     84              return 0;
     85            }
     86            
     87            if(ftm_init_structure.FTM_Mode & FTM_MODE_PWM)
   \                     ??LPLD_FTM_Init_2: (+1)
   \   00000034   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000038   0x07C0             LSLS     R0,R0,#+31
   \   0000003A   0xD52A             BPL.N    ??LPLD_FTM_Init_3
     88            {
     89              result = LPLD_FTM_PWM_Init(ftm_init_structure);
   \   0000003C   0xA906             ADD      R1,SP,#+24
   \   0000003E   0xB084             SUB      SP,SP,#+16
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x221C             MOVS     R2,#+28
   \   00000044   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000048   0xBC0F             POP      {R0-R3}
   \   0000004A   0x.... 0x....      BL       LPLD_FTM_PWM_Init
   \   0000004E   0x0004             MOVS     R4,R0
   \   00000050   0xE04B             B.N      ??LPLD_FTM_Init_4
     90            }
   \                     ??LPLD_FTM_Init_1: (+1)
   \   00000052   0x9806             LDR      R0,[SP, #+24]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable10_5  ;; 0x40039000
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD109             BNE.N    ??LPLD_FTM_Init_5
   \   0000005C   0x2501             MOVS     R5,#+1
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x4004803c
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x4004803c
   \   0000006C   0x6008             STR      R0,[R1, #+0]
   \   0000006E   0xE7E1             B.N      ??LPLD_FTM_Init_2
   \                     ??LPLD_FTM_Init_5: (+1)
   \   00000070   0x9806             LDR      R0,[SP, #+24]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0x400b8000
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD109             BNE.N    ??LPLD_FTM_Init_6
   \   0000007A   0x2502             MOVS     R5,#+2
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40048030
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable10_7  ;; 0x40048030
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE7D2             B.N      ??LPLD_FTM_Init_2
   \                     ??LPLD_FTM_Init_6: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE043             B.N      ??LPLD_FTM_Init_7
     91            else if(ftm_init_structure.FTM_Mode & FTM_MODE_IC)
   \                     ??LPLD_FTM_Init_3: (+1)
   \   00000092   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000096   0x0780             LSLS     R0,R0,#+30
   \   00000098   0xD50A             BPL.N    ??LPLD_FTM_Init_8
     92            {
     93              result = LPLD_FTM_IC_Init(ftm_init_structure);
   \   0000009A   0xA906             ADD      R1,SP,#+24
   \   0000009C   0xB084             SUB      SP,SP,#+16
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x221C             MOVS     R2,#+28
   \   000000A2   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000A6   0xBC0F             POP      {R0-R3}
   \   000000A8   0x.... 0x....      BL       LPLD_FTM_IC_Init
   \   000000AC   0x0004             MOVS     R4,R0
   \   000000AE   0xE01C             B.N      ??LPLD_FTM_Init_4
     94            }
     95            else if(ftm_init_structure.FTM_Mode & FTM_MODE_QD)
   \                     ??LPLD_FTM_Init_8: (+1)
   \   000000B0   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   000000B4   0x0740             LSLS     R0,R0,#+29
   \   000000B6   0xD50A             BPL.N    ??LPLD_FTM_Init_9
     96            {
     97              result = LPLD_FTM_QD_Init(ftm_init_structure);
   \   000000B8   0xA906             ADD      R1,SP,#+24
   \   000000BA   0xB084             SUB      SP,SP,#+16
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x221C             MOVS     R2,#+28
   \   000000C0   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000C4   0xBC0F             POP      {R0-R3}
   \   000000C6   0x.... 0x....      BL       LPLD_FTM_QD_Init
   \   000000CA   0x0004             MOVS     R4,R0
   \   000000CC   0xE00D             B.N      ??LPLD_FTM_Init_4
     98            }
     99            else if(ftm_init_structure.FTM_Mode & FTM_MODE_DEC)
   \                     ??LPLD_FTM_Init_9: (+1)
   \   000000CE   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   000000D2   0x0700             LSLS     R0,R0,#+28
   \   000000D4   0xD509             BPL.N    ??LPLD_FTM_Init_4
    100            {
    101              result = LPLD_FTM_DEC_Init(ftm_init_structure);
   \   000000D6   0xA906             ADD      R1,SP,#+24
   \   000000D8   0xB084             SUB      SP,SP,#+16
   \   000000DA   0x4668             MOV      R0,SP
   \   000000DC   0x221C             MOVS     R2,#+28
   \   000000DE   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000E2   0xBC0F             POP      {R0-R3}
   \   000000E4   0x.... 0x....      BL       LPLD_FTM_DEC_Init
   \   000000E8   0x0004             MOVS     R4,R0
    102            }
    103            
    104            if(result == 1)
   \                     ??LPLD_FTM_Init_4: (+1)
   \   000000EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EC   0x2C01             CMP      R4,#+1
   \   000000EE   0xD112             BNE.N    ??LPLD_FTM_Init_10
    105            {    
    106              //判断是否开启溢出中断
    107              if(ftm_init_structure.FTM_Isr!=NULL)
   \   000000F0   0x980C             LDR      R0,[SP, #+48]
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD00F             BEQ.N    ??LPLD_FTM_Init_10
    108              {      
    109                FTM_ISR[i] = ftm_init_structure.FTM_Isr;
   \   000000F6   0x980C             LDR      R0,[SP, #+48]
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable10_8
   \   000000FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FE   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
    110                if(ftm_init_structure.FTM_ToiEnable == TRUE)
   \   00000102   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \   00000106   0x2801             CMP      R0,#+1
   \   00000108   0xD105             BNE.N    ??LPLD_FTM_Init_10
    111                {
    112                  ftm_init_structure.FTM_Ftmx->SC |= FTM_SC_TOIE_MASK;
   \   0000010A   0x9806             LDR      R0,[SP, #+24]
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000112   0x9906             LDR      R1,[SP, #+24]
   \   00000114   0x6008             STR      R0,[R1, #+0]
    113                }
    114              }
    115            }
    116            
    117            return result;
   \                     ??LPLD_FTM_Init_10: (+1)
   \   00000116   0x0020             MOVS     R0,R4
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_FTM_Init_7: (+1)
   \   0000011A   0xBC3E             POP      {R1-R5}
   \   0000011C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    118          }
    119          
    120          /*
    121           * LPLD_FTM_Deinit
    122           * FTM模块通用反初始化
    123           *
    124           * 参数:
    125           *    ftm_init_structure--FTM初始化结构体，
    126           *                        具体定义见FTM_InitTypeDef
    127           *
    128           * 输出:
    129           *    0--配置错误
    130           *    1--配置成功
    131           */

   \                                 In section .text, align 2, keep-with-next
    132          uint8 LPLD_FTM_Deinit(FTM_InitTypeDef ftm_init_structure)
    133          {
   \                     LPLD_FTM_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB5E0             PUSH     {R5-R7,LR}
    134            if(ftm_init_structure.FTM_Ftmx == FTM0)
   \   00000004   0x9804             LDR      R0,[SP, #+16]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable10_3  ;; 0x40038000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD113             BNE.N    ??LPLD_FTM_Deinit_0
    135            {
    136              SIM->SCGC6 &= ~SIM_SCGC6_FTM0_MASK;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x4004803c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x4004803c
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    137            }
    138            else if(ftm_init_structure.FTM_Ftmx == FTM1)
    139            {
    140              SIM->SCGC6 &= ~SIM_SCGC6_FTM1_MASK;
    141            }
    142            else if(ftm_init_structure.FTM_Ftmx == FTM2)
    143            {
    144              SIM->SCGC3 &= ~SIM_SCGC3_FTM2_MASK;
    145            }
    146          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    147            else if(ftm_init_structure.FTM_Ftmx == FTM3)
    148            {
    149              SIM->SCGC3 &= ~SIM_SCGC3_FTM3_MASK;
    150            }
    151          #endif
    152            else
    153            {
    154              return 0;
    155            }
    156            
    157            return LPLD_FTM_DisableIrq(ftm_init_structure);
   \                     ??LPLD_FTM_Deinit_1: (+1)
   \   0000001E   0xA904             ADD      R1,SP,#+16
   \   00000020   0xB084             SUB      SP,SP,#+16
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x221C             MOVS     R2,#+28
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xBC0F             POP      {R0-R3}
   \   0000002C   0x.... 0x....      BL       LPLD_FTM_DisableIrq
   \                     ??LPLD_FTM_Deinit_2: (+1)
   \   00000030   0xBC0E             POP      {R1-R3}
   \   00000032   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FTM_Deinit_0: (+1)
   \   00000036   0x9804             LDR      R0,[SP, #+16]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable10_5  ;; 0x40039000
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD108             BNE.N    ??LPLD_FTM_Deinit_3
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x4004803c
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF030 0x7000      BICS     R0,R0,#0x2000000
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable10_4  ;; 0x4004803c
   \   0000004E   0x6008             STR      R0,[R1, #+0]
   \   00000050   0xE7E5             B.N      ??LPLD_FTM_Deinit_1
   \                     ??LPLD_FTM_Deinit_3: (+1)
   \   00000052   0x9804             LDR      R0,[SP, #+16]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0x400b8000
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD108             BNE.N    ??LPLD_FTM_Deinit_4
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40048030
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable10_7  ;; 0x40048030
   \   0000006A   0x6008             STR      R0,[R1, #+0]
   \   0000006C   0xE7D7             B.N      ??LPLD_FTM_Deinit_1
   \                     ??LPLD_FTM_Deinit_4: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE7DE             B.N      ??LPLD_FTM_Deinit_2
    158          }
    159          
    160          /*
    161           * LPLD_FTM_PWM_Enable
    162           * FTM模块PWM模式输出使能，配置输出通道、占空比、指定对应的引脚、对齐方式
    163           * 
    164           * 参数:
    165           *    ftmx--FTMx模块号
    166           *      |__FTM0          --FTM0
    167           *      |__FTM1          --FTM1
    168           *      |__FTM2          --FTM2
    169           *      <注:只有MK60F系列含有FTM3>
    170           *      |__FTM3          --FTM3
    171           *    chn--PWM输出通道
    172           *      <注:只有MK60F系列含有FTM3>
    173           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    174           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    175           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    176           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    177           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    178           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    179           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    180           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    181           *    duty--PWM输出占空比
    182           *      |__0~10000--占空比0.00%~100.00%
    183           *    pin--FTMx通道对应的引脚
    184           *      FTM0
    185           *       FTM_Ch0-PTA3\PTC1
    186           *       FTM_Ch1-PTA4\PTC2
    187           *       FTM_Ch2-PTA5\PTC3
    188           *       FTM_Ch3-PTA6\PTC4
    189           *       FTM_Ch4-PTA7\PTD4
    190           *       FTM_Ch5-PTA0\PTD5
    191           *       FTM_Ch6-PTA1\PTD6
    192           *       FTM_Ch7-PTA2\PTD7
    193           *      FTM1
    194           *       FTM_Ch0-PTA8\PTA12\PTB0
    195           *       FTM_Ch1-PTA9\PTA13\PTB1
    196           *      FTM2
    197           *       FTM_Ch0-PTA10\PTB18
    198           *       FTM_Ch1-PTA11\PTB19
    199           *      <注:只有MK60F系列含有FTM3>
    200           *      FTM3
    201           *       FTM_Ch0-PTE5\PTD0
    202           *       FTM_Ch1-PTE6\PTD1
    203           *       FTM_Ch2-PTE7\PTD2
    204           *       FTM_Ch3-PTE8\PTD3
    205           *       FTM_Ch4-PTE9\PTC8
    206           *       FTM_Ch5-PTE10\PTC9
    207           *       FTM_Ch6-PTE11\PTC10
    208           *       FTM_Ch7-PTE12\PTC11
    209           *    align--脉冲对齐方式
    210           *      |__ALIGN_LEFT    --左对齐
    211           *      |__ALIGN_RIGHT   --右对齐
    212           *
    213           * 输出:
    214           *    0--配置错误
    215           *    1--配置成功
    216           */

   \                                 In section .text, align 2, keep-with-next
    217          uint8 LPLD_FTM_PWM_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty, PortPinsEnum_Type pin, uint8 align)
    218          {
   \                     LPLD_FTM_PWM_Enable: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    219            uint32 cv;
    220            vuint32 mod;
    221            
    222            //参数检查
    223            ASSERT( duty <= 10000 );                  //判断占空比
   \   0000000A   0xF242 0x7011      MOVW     R0,#+10001
   \   0000000E   0x4286             CMP      R6,R0
   \   00000010   0xD304             BCC.N    ??LPLD_FTM_PWM_Enable_0
   \   00000012   0x21DF             MOVS     R1,#+223
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000018   0x.... 0x....      BL       assert_failed
    224            
    225            if(!LPLD_FTM_PinInit(ftmx, chn, pin))
   \                     ??LPLD_FTM_PWM_Enable_0: (+1)
   \   0000001C   0x003A             MOVS     R2,R7
   \   0000001E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD101             BNE.N    ??LPLD_FTM_PWM_Enable_1
    226              return 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE01A             B.N      ??LPLD_FTM_PWM_Enable_2
   \                     ??LPLD_FTM_PWM_Enable_1: (+1)
   \   00000032   0x9806             LDR      R0,[SP, #+24]
    227            
    228            //如果是右对齐，100%-占空比
    229            if(align == ALIGN_RIGHT)
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x2824             CMP      R0,#+36
   \   00000038   0xD102             BNE.N    ??LPLD_FTM_PWM_Enable_3
    230            {
    231              duty = 10000 - duty;
   \   0000003A   0xF242 0x7110      MOVW     R1,#+10000
   \   0000003E   0x1B8E             SUBS     R6,R1,R6
    232            }
    233            
    234            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    235            mod = ftmx->MOD;
   \                     ??LPLD_FTM_PWM_Enable_3: (+1)
   \   00000040   0x68A1             LDR      R1,[R4, #+8]
   \   00000042   0x9100             STR      R1,[SP, #+0]
    236            cv = (duty*(mod-0+1)+0)/10000;
   \   00000044   0x9900             LDR      R1,[SP, #+0]
   \   00000046   0x1C49             ADDS     R1,R1,#+1
   \   00000048   0xFB01 0xF106      MUL      R1,R1,R6
   \   0000004C   0xF242 0x7210      MOVW     R2,#+10000
   \   00000050   0xFBB1 0xF1F2      UDIV     R1,R1,R2
    237            
    238            // 配置FTM通道控制寄存器 
    239            // 通道模式 MSB:MSA-1X, 通道边缘选择 左对齐 ELSB:ELSA-10
    240            // 通道模式 MSB:MSA-1X, 通道边缘选择 右对齐 ELSB:ELSA-X1
    241            ftmx->CONTROLS[chn].CnSC = align;
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   0xEB14 0x02C5      ADDS     R2,R4,R5, LSL #+3
   \   0000005C   0x60D0             STR      R0,[R2, #+12]
    242            // 配置FTM通道值
    243            ftmx->CONTROLS[chn].CnV  = cv;
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000064   0x6101             STR      R1,[R0, #+16]
    244            
    245            return 1;
   \   00000066   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_PWM_Enable_2: (+1)
   \   00000068   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    246          }
    247          
    248          /*
    249           * LPLD_FTM_PWM_ChangeDuty
    250           * 变更FTM模块PWM模式指定通道的输出占空比
    251           *
    252           * 参数:
    253           *    ftmx--FTMx模块号
    254           *      |__FTM0          --FTM0
    255           *      |__FTM1          --FTM1
    256           *      |__FTM2          --FTM2
    257           *      <注:只有MK60F系列含有FTM3>
    258           *      |__FTM3          --FTM3
    259           *    chn--PWM输出通道
    260           *      <注:只有MK60F系列含有FTM3>
    261           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    262           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    263           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    264           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    265           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    266           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    267           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    268           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    269           *    duty--PWM输出占空比
    270           *      |__0~10000--占空比0.00%~100.00%
    271           *
    272           * 输出:
    273           *    0--配置错误
    274           *    1--配置成功
    275           */

   \                                 In section .text, align 2, keep-with-next
    276          uint8 LPLD_FTM_PWM_ChangeDuty(FTM_Type *ftmx, FtmChnEnum_Type chn, uint32 duty)
    277          {
   \                     LPLD_FTM_PWM_ChangeDuty: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    278            uint32 cv;
    279            vuint32 mod;
    280            
    281            //参数检查
    282            ASSERT( duty <= 10000 );                  //判断占空比
   \   0000000A   0xF242 0x7011      MOVW     R0,#+10001
   \   0000000E   0x4286             CMP      R6,R0
   \   00000010   0xD305             BCC.N    ??LPLD_FTM_PWM_ChangeDuty_0
   \   00000012   0xF44F 0x718D      MOV      R1,#+282
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000001A   0x.... 0x....      BL       assert_failed
    283              
    284            //如果是右对齐，100%-占空比
    285            if(ftmx->CONTROLS[chn].CnSC & FTM_CnSC_ELSA_MASK)
   \                     ??LPLD_FTM_PWM_ChangeDuty_0: (+1)
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000024   0x68C0             LDR      R0,[R0, #+12]
   \   00000026   0x0740             LSLS     R0,R0,#+29
   \   00000028   0xD502             BPL.N    ??LPLD_FTM_PWM_ChangeDuty_1
    286            {
    287              duty = 10000 - duty;
   \   0000002A   0xF242 0x7010      MOVW     R0,#+10000
   \   0000002E   0x1B86             SUBS     R6,R0,R6
    288            }
    289            
    290            //占空比 = (CnV-CNTIN)/(MOD-CNTIN+1)
    291            mod = ftmx->MOD;
   \                     ??LPLD_FTM_PWM_ChangeDuty_1: (+1)
   \   00000030   0x68A0             LDR      R0,[R4, #+8]
   \   00000032   0x9000             STR      R0,[SP, #+0]
    292            cv = (duty*(mod-0+1)+0)/10000;
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xFB00 0xF006      MUL      R0,R0,R6
   \   0000003C   0xF242 0x7110      MOVW     R1,#+10000
   \   00000040   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    293           
    294            // 配置FTM通道值
    295            ftmx->CONTROLS[chn].CnV = cv;
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   0000004A   0x6108             STR      R0,[R1, #+16]
    296            
    297            return 1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    298          }
    299          
    300          /*
    301           * LPLD_FTM_DisableChn
    302           * 禁用FTM模块指定通道的输出、输入
    303           *
    304           * 参数:
    305           *    ftmx--FTMx模块号
    306           *      |__FTM0          --FTM0
    307           *      |__FTM1          --FTM1
    308           *      |__FTM2          --FTM2
    309           *      <注:只有MK60F系列含有FTM3>
    310           *      |__FTM3          --FTM3
    311           *    chn--PWM输出通道
    312           *      <注:只有MK60F系列含有FTM3>
    313           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    314           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    315           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    316           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    317           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    318           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    319           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    320           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    321           *
    322           * 输出:
    323           *    0--配置错误
    324           *    1--配置成功
    325           */

   \                                 In section .text, align 2, keep-with-next
    326          uint8 LPLD_FTM_DisableChn(FTM_Type *ftmx, FtmChnEnum_Type chn)
    327          {
   \                     LPLD_FTM_DisableChn: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    328            LPLD_FTM_PinDeinit(ftmx, chn);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       LPLD_FTM_PinDeinit
    329            ftmx->CONTROLS[chn].CnSC = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000018   0x60C8             STR      R0,[R1, #+12]
    330            ftmx->CONTROLS[chn].CnV  = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000022   0x6108             STR      R0,[R1, #+16]
    331            
    332            return 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    333          }
    334          
    335          
    336          
    337          /*
    338           * LPLD_FTM_IC_Enable
    339           * FTM模块输入捕获模式输出使能，配置输入通道、指定对应的引脚、捕获边缘
    340           *
    341           * 参数:
    342           *    ftmx--FTMx模块号
    343           *      |__FTM0          --FTM0
    344           *      |__FTM1          --FTM1
    345           *      |__FTM2          --FTM2
    346           *      <注:只有MK60F系列含有FTM3>
    347           *      |__FTM3          --FTM3
    348           *    chn--PWM输出通道
    349           *      <注:只有MK60F系列含有FTM3>
    350           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    351           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    352           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    353           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    354           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    355           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    356           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    357           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    358           *    duty--PWM输出占空比
    359           *      |__0~10000--占空比0.00%~100.00%
    360           *    pin--FTMx通道对应的引脚
    361           *      FTM0
    362           *       FTM_Ch0-PTA3\PTC1
    363           *       FTM_Ch1-PTA4\PTC2
    364           *       FTM_Ch2-PTA5\PTC3
    365           *       FTM_Ch3-PTA6\PTC4
    366           *       FTM_Ch4-PTA7\PTD4
    367           *       FTM_Ch5-PTA0\PTD5
    368           *       FTM_Ch6-PTA1\PTD6
    369           *       FTM_Ch7-PTA2\PTD7
    370           *      FTM1
    371           *       FTM_Ch0-PTA8\PTA12\PTB0
    372           *       FTM_Ch1-PTA9\PTA13\PTB1
    373           *      FTM2
    374           *       FTM_Ch0-PTA10\PTB18
    375           *       FTM_Ch1-PTA11\PTB19
    376           *      <注:只有MK60F系列含有FTM3>
    377           *      FTM3
    378           *       FTM_Ch0-PTE5\PTD0
    379           *       FTM_Ch1-PTE6\PTD1
    380           *       FTM_Ch2-PTE7\PTD2
    381           *       FTM_Ch3-PTE8\PTD3
    382           *       FTM_Ch4-PTE9\PTC8
    383           *       FTM_Ch5-PTE10\PTC9
    384           *       FTM_Ch6-PTE11\PTC10
    385           *       FTM_Ch7-PTE12\PTC11
    386           *    capture_edge--捕获边缘设置
    387           *      |__CAPTURE_RI    --上升沿捕获
    388           *      |__CAPTURE_FA    --下降沿捕获
    389           *      |__CAPTURE_RIFA  --上升下降沿捕获
    390           *
    391           * 输出:
    392           *    0--配置错误
    393           *    1--配置成功
    394           */

   \                                 In section .text, align 2, keep-with-next
    395          uint8 LPLD_FTM_IC_Enable(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin, uint8 capture_edge)
    396          {
   \                     LPLD_FTM_IC_Enable: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x001E             MOVS     R6,R3
    397            if(!LPLD_FTM_PinInit(ftmx, chn, pin))
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE.N    ??LPLD_FTM_IC_Enable_0
    398              return 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE041             B.N      ??LPLD_FTM_IC_Enable_1
    399            
    400            ftmx->CONTROLS[chn].CnSC = 0x00;
   \                     ??LPLD_FTM_IC_Enable_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000020   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000024   0x60C8             STR      R0,[R1, #+12]
    401            
    402            ftmx->CONTROLS[chn].CnSC |= capture_edge;        
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   0000002C   0x68C0             LDR      R0,[R0, #+12]
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x4330             ORRS     R0,R6,R0
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000038   0x60C8             STR      R0,[R1, #+12]
    403            
    404            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_CHF_MASK);
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000040   0x68C0             LDR      R0,[R0, #+12]
   \   00000042   0xF030 0x0080      BICS     R0,R0,#0x80
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   0000004C   0x60C8             STR      R0,[R1, #+12]
    405            ftmx->CONTROLS[chn].CnSC |= FTM_CnSC_CHIE_MASK;         //使能通道捕获输入中断
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000054   0x68C0             LDR      R0,[R0, #+12]
   \   00000056   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000060   0x60C8             STR      R0,[R1, #+12]
    406            
    407            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSB_MASK);
   \   00000062   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000064   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000068   0x68C0             LDR      R0,[R0, #+12]
   \   0000006A   0xF030 0x0020      BICS     R0,R0,#0x20
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000074   0x60C8             STR      R0,[R1, #+12]
    408            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_MSA_MASK);       //配置成Input capture模式
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   00000088   0x60C8             STR      R0,[R1, #+12]
    409            
    410            ftmx->CONTROLS[chn].CnSC &= (~FTM_CnSC_DMA_MASK);       //关闭DMA
   \   0000008A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008C   0xEB14 0x00C5      ADDS     R0,R4,R5, LSL #+3
   \   00000090   0x68C0             LDR      R0,[R0, #+12]
   \   00000092   0x0840             LSRS     R0,R0,#+1
   \   00000094   0x0040             LSLS     R0,R0,#+1
   \   00000096   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000098   0xEB14 0x01C5      ADDS     R1,R4,R5, LSL #+3
   \   0000009C   0x60C8             STR      R0,[R1, #+12]
    411            
    412            return 1;
   \   0000009E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_IC_Enable_1: (+1)
   \   000000A0   0xBD70             POP      {R4-R6,PC}       ;; return
    413          }
    414          
    415          /*
    416           * LPLD_FTM_IsTOF
    417           * 判断FTMx是否产生计数溢出中断标志
    418           * 
    419           * 参数:
    420           *    ftmx--FTMx模块号
    421           *      |__FTM0          --FTM0
    422           *      |__FTM1          --FTM1
    423           *      |__FTM2          --FTM2
    424           *      <注:只有MK60F系列含有FTM3>
    425           *      |__FTM3          --FTM3
    426           *
    427           * 输出:
    428           *    TRUE、FALSE
    429           *
    430           */

   \                                 In section .text, align 2, keep-with-next
    431          __INLINE boolean LPLD_FTM_IsTOF(FTM_Type *ftmx)
    432          {
    433            return (boolean)((ftmx->SC & FTM_SC_TOF_MASK)>>FTM_SC_TOF_SHIFT);
   \                     LPLD_FTM_IsTOF: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x4770             BX       LR               ;; return
    434          }
    435          
    436          /*
    437           * LPLD_FTM_ClearTOF
    438           * 清除FTMx计数器溢出中断标志
    439           * 
    440           * 参数:
    441           *    ftmx--FTMx模块号
    442           *      |__FTM0          --FTM0
    443           *      |__FTM1          --FTM1
    444           *      |__FTM2          --FTM2
    445           *      <注:只有MK60F系列含有FTM3>
    446           *      |__FTM3          --FTM3
    447           *
    448           * 输出:
    449           *    无
    450           *
    451           */

   \                                 In section .text, align 2, keep-with-next
    452          __INLINE void LPLD_FTM_ClearTOF(FTM_Type *ftmx)
    453          {
    454            ftmx->SC = ftmx->SC & ~FTM_SC_TOF_MASK;
   \                     LPLD_FTM_ClearTOF: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0xF031 0x0180      BICS     R1,R1,#0x80
   \   00000006   0x6001             STR      R1,[R0, #+0]
    455          }
   \   00000008   0x4770             BX       LR               ;; return
    456          
    457          /*
    458           * LPLD_FTM_IsCHnF
    459           * 判断通道n是否产生中断标志
    460           * 
    461           * 参数:
    462           *    ftmx--FTMx模块号
    463           *      |__FTM0          --FTM0
    464           *      |__FTM1          --FTM1
    465           *      |__FTM2          --FTM2
    466           *      <注:只有MK60F系列含有FTM3>
    467           *      |__FTM3          --FTM3
    468           *    chn--PWM输出通道
    469           *      <注:只有MK60F系列含有FTM3>
    470           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    471           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    472           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    473           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    474           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    475           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    476           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    477           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    478           *
    479           * 输出:
    480           *    TRUE、FALSE
    481           *
    482           */

   \                                 In section .text, align 2, keep-with-next
    483          __INLINE boolean LPLD_FTM_IsCHnF(FTM_Type *ftmx, FtmChnEnum_Type chn)
    484          {
    485            return (boolean)((ftmx->CONTROLS[chn].CnSC & FTM_CnSC_CHF_MASK)>>FTM_CnSC_CHF_SHIFT);
   \                     LPLD_FTM_IsCHnF: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000006   0x68C0             LDR      R0,[R0, #+12]
   \   00000008   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x4770             BX       LR               ;; return
    486          }
    487          
    488          /*
    489           * LPLD_FTM_ClearCHnF
    490           * 清除通道n中断标志
    491           * 
    492           * 参数:
    493           *    ftmx--FTMx模块号
    494           *      |__FTM0          --FTM0
    495           *      |__FTM1          --FTM1
    496           *      |__FTM2          --FTM2
    497           *      <注:只有MK60F系列含有FTM3>
    498           *      |__FTM3          --FTM3
    499           *    chn--PWM输出通道
    500           *      <注:只有MK60F系列含有FTM3>
    501           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    502           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    503           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    504           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    505           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    506           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    507           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    508           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    509           *
    510           * 输出:
    511           *    无
    512           *
    513           */

   \                                 In section .text, align 2, keep-with-next
    514          __INLINE void LPLD_FTM_ClearCHnF(FTM_Type *ftmx, FtmChnEnum_Type chn)
    515          {
    516            ftmx->CONTROLS[chn].CnSC = ftmx->CONTROLS[chn].CnSC & ~FTM_CnSC_CHF_MASK;
   \                     LPLD_FTM_ClearCHnF: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x02C1      ADDS     R2,R0,R1, LSL #+3
   \   00000006   0x68D2             LDR      R2,[R2, #+12]
   \   00000008   0xF032 0x0280      BICS     R2,R2,#0x80
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000012   0x60C2             STR      R2,[R0, #+12]
    517          }
   \   00000014   0x4770             BX       LR               ;; return
    518          
    519          /*
    520           * LPLD_FTM_GetChVal
    521           * 获取FTMx通道n捕获的FTMx计数值
    522           * 
    523           * 参数:
    524           *    ftmx--FTMx模块号
    525           *      |__FTM0          --FTM0
    526           *      |__FTM1          --FTM1
    527           *      |__FTM2          --FTM2
    528           *      <注:只有MK60F系列含有FTM3>
    529           *      |__FTM3          --FTM3
    530           *    chn--PWM输出通道
    531           *      <注:只有MK60F系列含有FTM3>
    532           *      |__FTM_Ch0          --FTMx通道0(FTM0\FTM1\FTM2\FTM3)
    533           *      |__FTM_Ch1          --FTMx通道1(FTM0\FTM1\FTM2\FTM3)
    534           *      |__FTM_Ch2          --FTMx通道2(FTM0\FTM3)
    535           *      |__FTM_Ch3          --FTMx通道3(FTM0\FTM3)
    536           *      |__FTM_Ch4          --FTMx通道4(FTM0\FTM3)
    537           *      |__FTM_Ch5          --FTMx通道5(FTM0\FTM3)
    538           *      |__FTM_Ch6          --FTMx通道6(FTM0\FTM3)
    539           *      |__FTM_Ch7          --FTMx通道7(FTM0\FTM3)
    540           *
    541           * 输出:
    542           *    0x1~0xFFFF
    543           *
    544           */

   \                                 In section .text, align 2, keep-with-next
    545          __INLINE uint16 LPLD_FTM_GetChVal(FTM_Type *ftmx, FtmChnEnum_Type chn)
    546          {
    547            return ftmx->CONTROLS[chn].CnV;    //获取相应通道捕获到的FTM计数器值
   \                     LPLD_FTM_GetChVal: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x00C1      ADDS     R0,R0,R1, LSL #+3
   \   00000006   0x6900             LDR      R0,[R0, #+16]
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x4770             BX       LR               ;; return
    548          }
    549          
    550          /*
    551           * LPLD_FTM_GetClkDiv
    552           * 获取FTMx时钟分频系数
    553           * 
    554           * 参数:
    555           *    ftmx--FTMx模块号
    556           *      |__FTM0          --FTM0
    557           *      |__FTM1          --FTM1
    558           *      |__FTM2          --FTM2
    559           *      <注:只有MK60F系列含有FTM3>
    560           *      |__FTM3          --FTM3
    561           *
    562           * 输出:
    563           *    1、2、4、8、16、32、64、128
    564           *
    565           */

   \                                 In section .text, align 2, keep-with-next
    566          __INLINE uint8 LPLD_FTM_GetClkDiv(FTM_Type *ftmx)
    567          {
    568            return 1u<<((ftmx->SC & FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);    //获得时钟分频系数
   \                     LPLD_FTM_GetClkDiv: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000008   0xFA11 0xF000      LSLS     R0,R1,R0
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x4770             BX       LR               ;; return
    569          }
    570          
    571          /*
    572           * LPLD_FTM_GetCounter
    573           * 获取FTMx计数器值
    574           * 
    575           * 参数:
    576           *    ftmx--FTMx模块号
    577           *      |__FTM0          --FTM0
    578           *      |__FTM1          --FTM1
    579           *      |__FTM2          --FTM2
    580           *      <注:只有MK60F系列含有FTM3>
    581           *      |__FTM3          --FTM3
    582           *
    583           * 输出:
    584           *    无
    585           *
    586           */

   \                                 In section .text, align 2, keep-with-next
    587          __INLINE int16 LPLD_FTM_GetCounter(FTM_Type *ftmx)
    588          {
    589            return ftmx->CNT;        //获取FTMx计数器值
   \                     LPLD_FTM_GetCounter: (+1)
   \   00000000   0x6840             LDR      R0,[R0, #+4]
   \   00000002   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000004   0x4770             BX       LR               ;; return
    590          }
    591          
    592          /*
    593           * LPLD_FTM_ClearCounter
    594           * 清空FTMx计数器
    595           * 
    596           * 参数:
    597           *    ftmx--FTMx模块号
    598           *      |__FTM0          --FTM0
    599           *      |__FTM1          --FTM1
    600           *      |__FTM2          --FTM2
    601           *      <注:只有MK60F系列含有FTM3>
    602           *      |__FTM3          --FTM3
    603           *
    604           * 输出:
    605           *    无
    606           *
    607           */

   \                                 In section .text, align 2, keep-with-next
    608          __INLINE void LPLD_FTM_ClearCounter(FTM_Type *ftmx)
    609          {
    610            ftmx->CNT = 0;        //清空FTMx计数器值
   \                     LPLD_FTM_ClearCounter: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6041             STR      R1,[R0, #+4]
    611          }
   \   00000004   0x4770             BX       LR               ;; return
    612          
    613          /*
    614           * LPLD_FTM_EnableIrq
    615           * 使能FTMx中断
    616           * 
    617           * 参数:
    618           *    ftm_init_structure--FTM初始化结构体，
    619           *                        具体定义见FTM_InitTypeDef
    620           *
    621           * 输出:
    622           *    0--配置错误
    623           *    1--配置成功
    624           *
    625           */

   \                                 In section .text, align 2, keep-with-next
    626          uint8 LPLD_FTM_EnableIrq(FTM_InitTypeDef ftm_init_structure)
    627          {
   \                     LPLD_FTM_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    628            uint8 i;
    629            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    630            
    631            if(ftmx == FTM0)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable10_3  ;; 0x40038000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD108             BNE.N    ??LPLD_FTM_EnableIrq_0
    632              i=0;
   \   0000000E   0x2000             MOVS     R0,#+0
    633            else if(ftmx == FTM1)
    634              i=1;
    635            else if(ftmx == FTM2)
    636              i=2;
    637          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    638            else if(ftmx == FTM3)
    639              i=3;
    640          #endif
    641            else
    642              return 0;
    643          
    644            enable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??LPLD_FTM_EnableIrq_1: (+1)
   \   00000010   0x303E             ADDS     R0,R0,#+62
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       NVIC_EnableIRQ
    645            
    646            return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_EnableIrq_2: (+1)
   \   0000001A   0xBC02             POP      {R1}
   \   0000001C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FTM_EnableIrq_0: (+1)
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable10_5  ;; 0x40039000
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD101             BNE.N    ??LPLD_FTM_EnableIrq_3
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE7F1             B.N      ??LPLD_FTM_EnableIrq_1
   \                     ??LPLD_FTM_EnableIrq_3: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0x400b8000
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD101             BNE.N    ??LPLD_FTM_EnableIrq_4
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0xE7EB             B.N      ??LPLD_FTM_EnableIrq_1
   \                     ??LPLD_FTM_EnableIrq_4: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE7EE             B.N      ??LPLD_FTM_EnableIrq_2
    647          }
    648          
    649          /*
    650           * LPLD_FTM_DisableIrq
    651           * 禁用FTMx中断
    652           * 
    653           * 参数:
    654           *    ftm_init_structure--FTM初始化结构体，
    655           *                        具体定义见FTM_InitTypeDef
    656           *
    657           * 输出:
    658           *    0--配置错误
    659           *    1--配置成功
    660           *
    661           */

   \                                 In section .text, align 2, keep-with-next
    662          uint8 LPLD_FTM_DisableIrq(FTM_InitTypeDef ftm_init_structure)
    663          {
   \                     LPLD_FTM_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    664            uint8 i;
    665            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    666            
    667            if(ftmx == FTM0)
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable10_3  ;; 0x40038000
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD108             BNE.N    ??LPLD_FTM_DisableIrq_0
    668              i=0;
   \   0000000E   0x2000             MOVS     R0,#+0
    669            else if(ftmx == FTM1)
    670              i=1;
    671            else if(ftmx == FTM2)
    672              i=2;
    673          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    674            else if(ftmx == FTM3)
    675              i=3;
    676          #endif
    677            else
    678              return 0;
    679          
    680            disable_irq((IRQn_Type)(FTM0_IRQn + i));
   \                     ??LPLD_FTM_DisableIrq_1: (+1)
   \   00000010   0x303E             ADDS     R0,R0,#+62
   \   00000012   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       NVIC_DisableIRQ
    681            
    682            return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_DisableIrq_2: (+1)
   \   0000001A   0xBC02             POP      {R1}
   \   0000001C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FTM_DisableIrq_0: (+1)
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable10_5  ;; 0x40039000
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD101             BNE.N    ??LPLD_FTM_DisableIrq_3
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE7F1             B.N      ??LPLD_FTM_DisableIrq_1
   \                     ??LPLD_FTM_DisableIrq_3: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable10_6  ;; 0x400b8000
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD101             BNE.N    ??LPLD_FTM_DisableIrq_4
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0xE7EB             B.N      ??LPLD_FTM_DisableIrq_1
   \                     ??LPLD_FTM_DisableIrq_4: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE7EE             B.N      ??LPLD_FTM_DisableIrq_2
    683          }
    684          
    685          /*
    686           * LPLD_FTM_QD_Enable
    687           * FTM模块正交解码模式输入使能，配置输入通道PHA和PHB
    688           *
    689           * 参数:
    690           *    ftmx--FTMx模块号
    691           *      |__FTM1          --FTM1
    692           *      |__FTM2          --FTM2
    693           *    pha--PHA输入通道引脚
    694           *      FTM1
    695           *        PTA8\PTA12\PTB0
    696           *      FTM2
    697           *        PTA10\PTB18
    698           *    phb--PHB输入通道引脚
    699           *      FTM1
    700           *        PTA9\PTA13\PTB1
    701           *      FTM2
    702           *        PTA11\PTB19
    703           *
    704           * 输出:
    705           *    0--配置错误
    706           *    1--配置成功
    707           */

   \                                 In section .text, align 2, keep-with-next
    708          uint8 LPLD_FTM_QD_Enable(FTM_Type *ftmx, PortPinsEnum_Type pha, PortPinsEnum_Type phb)
    709          {
   \                     LPLD_FTM_QD_Enable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    710            if(!LPLD_FTM_PinInit(ftmx, FTM_PhA, pha))
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE.N    ??LPLD_FTM_QD_Enable_0
    711              return 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE00A             B.N      ??LPLD_FTM_QD_Enable_1
    712            if(!LPLD_FTM_PinInit(ftmx, FTM_PhB, phb))
   \                     ??LPLD_FTM_QD_Enable_0: (+1)
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x2109             MOVS     R1,#+9
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       LPLD_FTM_PinInit
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??LPLD_FTM_QD_Enable_2
    713              return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE000             B.N      ??LPLD_FTM_QD_Enable_1
    714            
    715            return 1;
   \                     ??LPLD_FTM_QD_Enable_2: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_QD_Enable_1: (+1)
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    716          }
    717          
    718          /*
    719           * LPLD_FTM_QD_Disable
    720           * FTM模块正交解码模式输入禁用
    721           *
    722           * 参数:
    723           *    ftmx--FTMx模块号
    724           *      |__FTM1          --FTM1
    725           *      |__FTM2          --FTM2
    726           *
    727           * 输出:
    728           *    0--配置错误
    729           *    1--配置成功
    730           */

   \                                 In section .text, align 2, keep-with-next
    731          uint8 LPLD_FTM_QD_Disable(FTM_Type *ftmx)
    732          {
   \                     LPLD_FTM_QD_Disable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    733            if(!LPLD_FTM_PinDeinit(ftmx, FTM_PhA))
   \   00000004   0x2108             MOVS     R1,#+8
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       LPLD_FTM_PinDeinit
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LPLD_FTM_QD_Disable_0
    734              return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE008             B.N      ??LPLD_FTM_QD_Disable_1
    735            if(!LPLD_FTM_PinDeinit(ftmx, FTM_PhB))
   \                     ??LPLD_FTM_QD_Disable_0: (+1)
   \   00000014   0x2109             MOVS     R1,#+9
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       LPLD_FTM_PinDeinit
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD101             BNE.N    ??LPLD_FTM_QD_Disable_2
    736              return 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??LPLD_FTM_QD_Disable_1
    737            
    738            return 1;
   \                     ??LPLD_FTM_QD_Disable_2: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_QD_Disable_1: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    739          }
    740          
    741          /*
    742           * LPLD_FTM_PWM_Init
    743           * FTM模块PWM模式初始化，内部调用
    744           */

   \                                 In section .text, align 2, keep-with-next
    745          static uint8 LPLD_FTM_PWM_Init(FTM_InitTypeDef ftm_init_structure)
    746          {
   \                     LPLD_FTM_PWM_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    747            uint32 bus_clk_hz;
    748            uint32 mod, mod2;
    749            uint8 ps;
    750            uint32 freq = ftm_init_structure.FTM_PwmFreq;
   \   00000006   0x9C08             LDR      R4,[SP, #+32]
    751            uint32 dt_en = ftm_init_structure.FTM_PwmDeadtimeCfg;
   \   00000008   0x9D09             LDR      R5,[SP, #+36]
    752            uint8 dt_div = ftm_init_structure.FTM_PwmDeadtimeDiv;
   \   0000000A   0xF89D 0x6028      LDRB     R6,[SP, #+40]
    753            uint8 dt_val = ftm_init_structure.FTM_PwmDeadtimeVal;
   \   0000000E   0xF89D 0x7029      LDRB     R7,[SP, #+41]
    754            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000012   0xF8DD 0x8018      LDR      R8,[SP, #+24]
    755            
    756            //参数检查
    757            ASSERT( freq );                  //判断频率
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD105             BNE.N    ??LPLD_FTM_PWM_Init_0
   \   0000001A   0xF240 0x21F5      MOVW     R1,#+757
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000022   0x.... 0x....      BL       assert_failed
    758            ASSERT( dt_val<=63 );            //判断死区插入值
   \                     ??LPLD_FTM_PWM_Init_0: (+1)
   \   00000026   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   0x2F40             CMP      R7,#+64
   \   0000002A   0xDB05             BLT.N    ??LPLD_FTM_PWM_Init_1
   \   0000002C   0xF240 0x21F6      MOVW     R1,#+758
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000034   0x.... 0x....      BL       assert_failed
    759            
    760            bus_clk_hz = g_bus_clock;
   \                     ??LPLD_FTM_PWM_Init_1: (+1)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
    761            
    762            if(freq>bus_clk_hz) return 0;
   \   0000003E   0x42A0             CMP      R0,R4
   \   00000040   0xD201             BCS.N    ??LPLD_FTM_PWM_Init_2
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE06B             B.N      ??LPLD_FTM_PWM_Init_3
    763            
    764            if((mod=bus_clk_hz/(freq*128)) < 0xFFFFu)
   \                     ??LPLD_FTM_PWM_Init_2: (+1)
   \   00000046   0x2180             MOVS     R1,#+128
   \   00000048   0xFB01 0xF104      MUL      R1,R1,R4
   \   0000004C   0xFBB0 0xF3F1      UDIV     R3,R0,R1
   \   00000050   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000054   0x428B             CMP      R3,R1
   \   00000056   0xD261             BCS.N    ??LPLD_FTM_PWM_Init_4
    765            {
    766              ps = 7;
   \   00000058   0x2107             MOVS     R1,#+7
    767              mod2=mod;
   \   0000005A   0x001A             MOVS     R2,R3
    768              if((mod=bus_clk_hz/(freq*64)) < 0xFFFFu)
   \   0000005C   0x2340             MOVS     R3,#+64
   \   0000005E   0xFB03 0xF304      MUL      R3,R3,R4
   \   00000062   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   00000066   0xF64F 0x7CFF      MOVW     R12,#+65535
   \   0000006A   0x4563             CMP      R3,R12
   \   0000006C   0xD236             BCS.N    ??LPLD_FTM_PWM_Init_5
    769              {
    770                ps = 6;  
   \   0000006E   0x2106             MOVS     R1,#+6
    771                mod2=mod;  
   \   00000070   0x001A             MOVS     R2,R3
    772                if((mod=bus_clk_hz/(freq*32)) < 0xFFFFu)
   \   00000072   0x0163             LSLS     R3,R4,#+5
   \   00000074   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   00000078   0xF64F 0x7CFF      MOVW     R12,#+65535
   \   0000007C   0x4563             CMP      R3,R12
   \   0000007E   0xD22D             BCS.N    ??LPLD_FTM_PWM_Init_5
    773                {
    774                  ps = 5;  
   \   00000080   0x2105             MOVS     R1,#+5
    775                  mod2=mod;
   \   00000082   0x001A             MOVS     R2,R3
    776                  if((mod=bus_clk_hz/(freq*16)) < 0xFFFFu)
   \   00000084   0x0123             LSLS     R3,R4,#+4
   \   00000086   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   0000008A   0xF64F 0x7CFF      MOVW     R12,#+65535
   \   0000008E   0x4563             CMP      R3,R12
   \   00000090   0xD224             BCS.N    ??LPLD_FTM_PWM_Init_5
    777                  {
    778                    ps = 4;  
   \   00000092   0x2104             MOVS     R1,#+4
    779                    mod2=mod;   
   \   00000094   0x001A             MOVS     R2,R3
    780                    if((mod=bus_clk_hz/(freq*8)) < 0xFFFFu)
   \   00000096   0x00E3             LSLS     R3,R4,#+3
   \   00000098   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   0000009C   0xF64F 0x7CFF      MOVW     R12,#+65535
   \   000000A0   0x4563             CMP      R3,R12
   \   000000A2   0xD21B             BCS.N    ??LPLD_FTM_PWM_Init_5
    781                    {
    782                      ps = 3;
   \   000000A4   0x2103             MOVS     R1,#+3
    783                      mod2=mod;
   \   000000A6   0x001A             MOVS     R2,R3
    784                      if((mod=bus_clk_hz/(freq*4)) < 0xFFFFu)
   \   000000A8   0x00A3             LSLS     R3,R4,#+2
   \   000000AA   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   000000AE   0xF64F 0x7CFF      MOVW     R12,#+65535
   \   000000B2   0x4563             CMP      R3,R12
   \   000000B4   0xD212             BCS.N    ??LPLD_FTM_PWM_Init_5
    785                      {
    786                        ps = 2;
   \   000000B6   0x2102             MOVS     R1,#+2
    787                        mod2=mod;
   \   000000B8   0x001A             MOVS     R2,R3
    788                        if((mod=bus_clk_hz/(freq*2)) < 0xFFFFu)
   \   000000BA   0x0063             LSLS     R3,R4,#+1
   \   000000BC   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   000000C0   0xF64F 0x7CFF      MOVW     R12,#+65535
   \   000000C4   0x4563             CMP      R3,R12
   \   000000C6   0xD209             BCS.N    ??LPLD_FTM_PWM_Init_5
    789                        {
    790                          ps = 1;
   \   000000C8   0x2101             MOVS     R1,#+1
    791                          mod2=mod;
   \   000000CA   0x001A             MOVS     R2,R3
    792                          if((mod=bus_clk_hz/(freq*1)) < 0xFFFFu)
   \   000000CC   0xFBB0 0xF3F4      UDIV     R3,R0,R4
   \   000000D0   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000D4   0x4283             CMP      R3,R0
   \   000000D6   0xD201             BCS.N    ??LPLD_FTM_PWM_Init_5
    793                          {
    794                            ps = 0;
   \   000000D8   0x2100             MOVS     R1,#+0
    795                            mod2=mod;
   \   000000DA   0x001A             MOVS     R2,R3
    796                          }
    797                        }
    798                      }
    799                    }
    800                  }  
    801                }
    802              }
    803            }
    804            else
    805            {
    806              return 0;
    807            }
    808            
    809            ftmx->SC = 0;
   \                     ??LPLD_FTM_PWM_Init_5: (+1)
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0xF8C8 0x0000      STR      R0,[R8, #+0]
    810            
    811            // 设置PWM周期及占空比
    812            //    PWM周期 = (MOD-CNTIN+1)*FTM时钟周期 :
    813            // 配置FTM计数初始值
    814            ftmx->CNT = 0;
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xF8C8 0x0004      STR      R0,[R8, #+4]
    815            ftmx->CNTIN = 0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xF8C8 0x004C      STR      R0,[R8, #+76]
    816            // 配置FTM计数MOD值
    817            ftmx->MOD = mod2;
   \   000000EE   0xF8C8 0x2008      STR      R2,[R8, #+8]
    818            
    819            ftmx->DEADTIME = FTM_DEADTIME_DTPS(dt_div) | FTM_DEADTIME_DTVAL(dt_val);
   \   000000F2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F4   0x01B0             LSLS     R0,R6,#+6
   \   000000F6   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   000000FA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000FC   0xF017 0x023F      ANDS     R2,R7,#0x3F
   \   00000100   0x4310             ORRS     R0,R2,R0
   \   00000102   0xF8C8 0x0068      STR      R0,[R8, #+104]
    820            ftmx->COMBINE = dt_en;        //使能死区
   \   00000106   0xF8C8 0x5064      STR      R5,[R8, #+100]
    821            
    822            // 配置FTM控制寄存器
    823            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:8
    824            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    825            ftmx->SC = FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \   0000010A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000010C   0xF011 0x0007      ANDS     R0,R1,#0x7
   \   00000110   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000114   0xF8C8 0x0000      STR      R0,[R8, #+0]
    826            
    827            return 1;
   \   00000118   0x2001             MOVS     R0,#+1
   \   0000011A   0xE000             B.N      ??LPLD_FTM_PWM_Init_3
   \                     ??LPLD_FTM_PWM_Init_4: (+1)
   \   0000011C   0x2000             MOVS     R0,#+0
   \                     ??LPLD_FTM_PWM_Init_3: (+1)
   \   0000011E   0xE8BD 0x01F0      POP      {R4-R8}
   \   00000122   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    828          }
    829          
    830          /*
    831           * LPLD_FTM_IC_Init
    832           * FTM模块输入捕获模式初始化，内部调用
    833           */

   \                                 In section .text, align 2, keep-with-next
    834          static uint8 LPLD_FTM_IC_Init(FTM_InitTypeDef ftm_init_structure)
    835          {
   \                     LPLD_FTM_IC_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB570             PUSH     {R4-R6,LR}
    836            uint8 i;
    837            uint8 ps = ftm_init_structure.FTM_ClkDiv;
   \   00000004   0xF89D 0x5023      LDRB     R5,[SP, #+35]
    838            FTM_ISR_CALLBACK isr_func = ftm_init_structure.FTM_Isr;
   \   00000008   0x9C0A             LDR      R4,[SP, #+40]
    839            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   0000000A   0x9E04             LDR      R6,[SP, #+16]
    840            
    841            //参数检查
    842            ASSERT( ps <= 7);             //时钟分频系数
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D08             CMP      R5,#+8
   \   00000010   0xDB05             BLT.N    ??LPLD_FTM_IC_Init_0
   \   00000012   0xF240 0x314A      MOVW     R1,#+842
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000001A   0x.... 0x....      BL       assert_failed
    843            
    844            ftmx->CONF=FTM_CONF_BDMMODE(0x3);
   \                     ??LPLD_FTM_IC_Init_0: (+1)
   \   0000001E   0x20C0             MOVS     R0,#+192
   \   00000020   0xF8C6 0x0084      STR      R0,[R6, #+132]
    845            
    846            ftmx->SC = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x6030             STR      R0,[R6, #+0]
    847            
    848            ftmx->CNT = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x6070             STR      R0,[R6, #+4]
    849            ftmx->CNTIN = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x64F0             STR      R0,[R6, #+76]
    850            ftmx->MOD = 0;                           
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x60B0             STR      R0,[R6, #+8]
    851            ftmx->QDCTRL = (~FTM_QDCTRL_QUADEN_MASK); //关闭正交解码
   \   00000034   0xF07F 0x0001      MVNS     R0,#+1
   \   00000038   0xF8C6 0x0080      STR      R0,[R6, #+128]
    852            ftmx->FILTER = 0x00;                      //关过虑器
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x67B0             STR      R0,[R6, #+120]
    853            
    854            // 配置FTM控制寄存器
    855            // 将FTM Counter配置成Free Counter
    856            // 禁用中断, 加计数模式, 时钟源:System clock（Bus Clk）, 分频系数:PS
    857            // 假设SysClk = 50MHz, SC_PS=3, FTM Clk = 50MHz/2^3 = 6.25MHz
    858            ftmx->SC |= FTM_SC_CLKS(1)|FTM_SC_PS(ps);
   \   00000040   0x6830             LDR      R0,[R6, #+0]
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0xF015 0x0107      ANDS     R1,R5,#0x7
   \   00000048   0xF051 0x0108      ORRS     R1,R1,#0x8
   \   0000004C   0x4308             ORRS     R0,R1,R0
   \   0000004E   0x6030             STR      R0,[R6, #+0]
    859            //ftmx->SC |= FTM_SC_TOIE_MASK;             //使能计数溢出中断
    860            ftmx->SC &= (~FTM_SC_CPWMS_MASK);         //FTM加计数
   \   00000050   0x6830             LDR      R0,[R6, #+0]
   \   00000052   0xF030 0x0020      BICS     R0,R0,#0x20
   \   00000056   0x6030             STR      R0,[R6, #+0]
    861          
    862            //设置中断函数入口地址并开启中断
    863            if(isr_func!=NULL)
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD009             BEQ.N    ??LPLD_FTM_IC_Init_1
    864            {
    865              if(ftmx == FTM0)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40038000
   \   00000062   0x4286             CMP      R6,R0
   \   00000064   0xD109             BNE.N    ??LPLD_FTM_IC_Init_2
    866                i=0;
   \   00000066   0x2000             MOVS     R0,#+0
    867              else if(ftmx == FTM1)
    868                i=1;
    869              else if(ftmx == FTM2)
    870                i=2;
    871          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
    872              else if(ftmx == FTM3)
    873                i=3;
    874          #endif   
    875              else
    876                return 0;
    877              FTM_ISR[i] = isr_func;
   \                     ??LPLD_FTM_IC_Init_3: (+1)
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable10_8
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0xF841 0x4020      STR      R4,[R1, R0, LSL #+2]
    878            }
    879          
    880            return 1;
   \                     ??LPLD_FTM_IC_Init_1: (+1)
   \   00000072   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_IC_Init_4: (+1)
   \   00000074   0xBC70             POP      {R4-R6}
   \   00000076   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FTM_IC_Init_2: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40039000
   \   0000007E   0x4286             CMP      R6,R0
   \   00000080   0xD101             BNE.N    ??LPLD_FTM_IC_Init_5
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0xE7F0             B.N      ??LPLD_FTM_IC_Init_3
   \                     ??LPLD_FTM_IC_Init_5: (+1)
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x400b8000
   \   0000008A   0x4286             CMP      R6,R0
   \   0000008C   0xD101             BNE.N    ??LPLD_FTM_IC_Init_6
   \   0000008E   0x2002             MOVS     R0,#+2
   \   00000090   0xE7EA             B.N      ??LPLD_FTM_IC_Init_3
   \                     ??LPLD_FTM_IC_Init_6: (+1)
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xE7EE             B.N      ??LPLD_FTM_IC_Init_4
    881          }
    882          
    883          /*
    884           * LPLD_FTM_PinInit
    885           * 初始化通道n指定引脚的FTM复用功能，内部调用
    886           */

   \                                 In section .text, align 2, keep-with-next
    887          static uint8 LPLD_FTM_PinInit(FTM_Type *ftmx, FtmChnEnum_Type chn, PortPinsEnum_Type pin)
    888          { 
    889            //根据ftmx使能相应pin的ftm功能
    890            if(ftmx == FTM0)
   \                     LPLD_FTM_PinInit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R3,??DataTable14_1  ;; 0x40038000
   \   00000004   0x4298             CMP      R0,R3
   \   00000006   0xF040 0x8106      BNE.W    ??LPLD_FTM_PinInit_0
    891            {
    892              switch(chn)
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD00F             BEQ.N    ??LPLD_FTM_PinInit_1
   \   00000010   0x2902             CMP      R1,#+2
   \   00000012   0xD04A             BEQ.N    ??LPLD_FTM_PinInit_2
   \   00000014   0xD32B             BCC.N    ??LPLD_FTM_PinInit_3
   \   00000016   0x2904             CMP      R1,#+4
   \   00000018   0xF000 0x8083      BEQ.W    ??LPLD_FTM_PinInit_4
   \   0000001C   0xD363             BCC.N    ??LPLD_FTM_PinInit_5
   \   0000001E   0x2906             CMP      R1,#+6
   \   00000020   0xF000 0x80BB      BEQ.W    ??LPLD_FTM_PinInit_6
   \   00000024   0xF0C0 0x809B      BCC.W    ??LPLD_FTM_PinInit_7
   \   00000028   0x2907             CMP      R1,#+7
   \   0000002A   0xF000 0x80D4      BEQ.W    ??LPLD_FTM_PinInit_8
   \   0000002E   0xE0F0             B.N      ??LPLD_FTM_PinInit_9
    893              {
    894              case FTM_Ch0:
    895                if(pin == PTA3)
   \                     ??LPLD_FTM_PinInit_1: (+1)
   \   00000030   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000032   0x2A03             CMP      R2,#+3
   \   00000034   0xD10B             BNE.N    ??LPLD_FTM_PinInit_10
    896                  PORTA->PCR[3] = PORTA->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x4004900c
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000040   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable14_2  ;; 0x4004900c
   \   00000048   0x6008             STR      R0,[R1, #+0]
    897                else if(pin == PTC1)
    898                  PORTC->PCR[1] = PORTC->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    899                else
    900                  return 0;
    901                break;
    902              case FTM_Ch1:
    903                if(pin == PTA4)
    904                  PORTA->PCR[4] = PORTA->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    905                else if(pin == PTC2)
    906                  PORTC->PCR[2] = PORTC->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    907                else
    908                  return 0;
    909                break;
    910              case FTM_Ch2:
    911                if(pin == PTA5)
    912                  PORTA->PCR[5] = PORTA->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    913                else if(pin == PTC3)
    914                  PORTC->PCR[3] = PORTC->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    915                else
    916                  return 0;
    917                break;
    918              case FTM_Ch3:
    919                if(pin == PTA6)
    920                  PORTA->PCR[6] = PORTA->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    921                else if(pin == PTC4)
    922                  PORTC->PCR[4] = PORTC->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    923                else
    924                  return 0;
    925                break;
    926              case FTM_Ch4:
    927                if(pin == PTA7)
    928                  PORTA->PCR[7] = PORTA->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    929                else if(pin == PTD4)
    930                  PORTD->PCR[4] = PORTD->PCR[4] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    931                else
    932                  return 0;
    933                break;
    934              case FTM_Ch5:
    935                if(pin == PTA0)
    936                  PORTA->PCR[0] = PORTA->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    937                else if(pin == PTD5)
    938                  PORTD->PCR[5] = PORTD->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    939                else
    940                  return 0;
    941                break;
    942              case FTM_Ch6:
    943                if(pin == PTA1)
    944                  PORTA->PCR[1] = PORTA->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    945                else if(pin == PTD6)
    946                  PORTD->PCR[6] = PORTD->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    947                else
    948                  return 0;
    949                break;
    950              case FTM_Ch7:
    951                if(pin == PTA2)
    952                  PORTA->PCR[2] = PORTA->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    953                else if(pin == PTD7)
    954                  PORTD->PCR[7] = PORTD->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
    955                else
    956                  return 0;
    957                break;
    958              default:
    959                return 0;     
    960              }
    961            }
    962            else if(ftmx == FTM1)
    963            {
    964              switch(chn)
    965              {
    966              case FTM_Ch0:
    967                if(pin == PTA8)
    968                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    969                else if(pin == PTA12)
    970                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    971                else if(pin == PTB0)
    972                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    973                else
    974                  return 0;
    975                break;
    976              case FTM_Ch1:
    977                if(pin == PTA9)
    978                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
    979                else if(pin == PTA13)
    980                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    981                else if(pin == PTB1)
    982                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
    983                else
    984                  return 0;
    985                break;
    986              case FTM_PhA:
    987                if(pin == PTA8)
    988                  PORTA->PCR[8] = PORTA->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
    989                else if(pin == PTA12)
    990                  PORTA->PCR[12] = PORTA->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
    991                else if(pin == PTB0)
    992                  PORTB->PCR[0] = PORTB->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
    993                else
    994                  return 0;
    995                break;
    996              case FTM_PhB:
    997                if(pin == PTA9)
    998                  PORTA->PCR[9] = PORTA->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
    999                else if(pin == PTA13)
   1000                  PORTA->PCR[13] = PORTA->PCR[13] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(7);
   1001                else if(pin == PTB1)
   1002                  PORTB->PCR[1] = PORTB->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   1003                else
   1004                  return 0;
   1005              default:
   1006                return 0;   
   1007              }
   1008            }
   1009            else if(ftmx == FTM2)
   1010            {
   1011              switch(chn)
   1012              {
   1013              case FTM_Ch0:
   1014                if(pin == PTA10)
   1015                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   1016                else if(pin == PTB18)
   1017                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   1018                else
   1019                  return 0;
   1020                break;
   1021              case FTM_Ch1:
   1022                if(pin == PTA11)
   1023                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3); 
   1024                else if(pin == PTB19)
   1025                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   1026                else
   1027                  return 0;
   1028                break;
   1029              case FTM_PhA:
   1030                if(pin == PTA10)
   1031                  PORTA->PCR[10] = PORTA->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1032                else if(pin == PTB18)
   1033                  PORTB->PCR[18] = PORTB->PCR[18] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   1034                else
   1035                  return 0;
   1036                break;
   1037              case FTM_PhB:
   1038                if(pin == PTA11)
   1039                  PORTA->PCR[11] = PORTA->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1040                else if(pin == PTB19)
   1041                  PORTB->PCR[19] = PORTB->PCR[19] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6);
   1042                else
   1043                  return 0;
   1044                break;
   1045              default:
   1046                return 0;   
   1047              }
   1048            }
   1049            
   1050          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
   1051            else if(ftmx == FTM3)
   1052            {
   1053              switch(chn)
   1054              {
   1055              case FTM_Ch0:
   1056                if(pin == PTE5)
   1057                  PORTE->PCR[5] = PORTE->PCR[5] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1058                else if(pin == PTD0)
   1059                  PORTD->PCR[0] = PORTD->PCR[0] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   1060                else
   1061                  return 0;
   1062                break;
   1063              case FTM_Ch1:
   1064                if(pin == PTE6)
   1065                  PORTE->PCR[6] = PORTE->PCR[6] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1066                else if(pin == PTD0)
   1067                  PORTD->PCR[1] = PORTD->PCR[1] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   1068                else
   1069                  return 0;
   1070                break;
   1071              case FTM_Ch2:
   1072                if(pin == PTE7)
   1073                  PORTE->PCR[7] = PORTE->PCR[7] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1074                else if(pin == PTD0)
   1075                  PORTD->PCR[2] = PORTD->PCR[2] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   1076                else
   1077                  return 0;
   1078                break;
   1079              case FTM_Ch3:
   1080                if(pin == PTE8)
   1081                  PORTE->PCR[8] = PORTE->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1082                else if(pin == PTD0)
   1083                  PORTD->PCR[3] = PORTD->PCR[3] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(4);
   1084                else
   1085                  return 0;
   1086                break;
   1087              case FTM_Ch4:
   1088                if(pin == PTE9)
   1089                  PORTE->PCR[9] = PORTE->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1090                else if(pin == PTC8)
   1091                  PORTC->PCR[8] = PORTC->PCR[8] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   1092                else
   1093                  return 0;
   1094                break;
   1095              case FTM_Ch5:
   1096                if(pin == PTE10)
   1097                  PORTE->PCR[10] = PORTE->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1098                else if(pin == PTC9)
   1099                  PORTC->PCR[9] = PORTC->PCR[9] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   1100                else
   1101                  return 0;
   1102                break;
   1103              case FTM_Ch6:
   1104                if(pin == PTE11)
   1105                  PORTE->PCR[11] = PORTE->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1106                else if(pin == PTC10)
   1107                  PORTC->PCR[10] = PORTC->PCR[10] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   1108                else
   1109                  return 0;
   1110                break;
   1111              case FTM_Ch7:
   1112                if(pin == PTE12)
   1113                  PORTE->PCR[12] = PORTE->PCR[12] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(6); 
   1114                else if(pin == PTC11)
   1115                  PORTC->PCR[11] = PORTC->PCR[11] & ~PORT_PCR_MUX_MASK | PORT_PCR_MUX(3);
   1116                else
   1117                  return 0;
   1118                break;
   1119              default:
   1120                return 0;     
   1121              }
   1122            }
   1123          #endif
   1124            else
   1125            {
   1126              return 0;
   1127            }
   1128            return 1;
   \                     ??LPLD_FTM_PinInit_11: (+1)
   \                     ??LPLD_FTM_PinInit_12: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_PinInit_13: (+1)
   \   0000004C   0x4770             BX       LR               ;; return
   \                     ??LPLD_FTM_PinInit_10: (+1)
   \   0000004E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000050   0x2A3D             CMP      R2,#+61
   \   00000052   0xD10A             BNE.N    ??LPLD_FTM_PinInit_14
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x4004b004
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000005E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable14_3  ;; 0x4004b004
   \   00000066   0x6008             STR      R0,[R1, #+0]
   \   00000068   0xE7EF             B.N      ??LPLD_FTM_PinInit_11
   \                     ??LPLD_FTM_PinInit_14: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE7EE             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_3: (+1)
   \   0000006E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000070   0x2A04             CMP      R2,#+4
   \   00000072   0xD10A             BNE.N    ??LPLD_FTM_PinInit_15
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40049010
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000007E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable14_4  ;; 0x40049010
   \   00000086   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_16: (+1)
   \   00000088   0xE7DF             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_15: (+1)
   \   0000008A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000008C   0x2A3E             CMP      R2,#+62
   \   0000008E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_17
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x4004b008
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000009A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable14_5  ;; 0x4004b008
   \   000000A2   0x6008             STR      R0,[R1, #+0]
   \   000000A4   0xE7F0             B.N      ??LPLD_FTM_PinInit_16
   \                     ??LPLD_FTM_PinInit_17: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xE7D0             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_2: (+1)
   \   000000AA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000AC   0x2A05             CMP      R2,#+5
   \   000000AE   0xD10A             BNE.N    ??LPLD_FTM_PinInit_18
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40049014
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000BA   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable14_6  ;; 0x40049014
   \   000000C2   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_19: (+1)
   \   000000C4   0xE7C1             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_18: (+1)
   \   000000C6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000C8   0x2A3F             CMP      R2,#+63
   \   000000CA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_20
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x4004b00c
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000D6   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable14_7  ;; 0x4004b00c
   \   000000DE   0x6008             STR      R0,[R1, #+0]
   \   000000E0   0xE7F0             B.N      ??LPLD_FTM_PinInit_19
   \                     ??LPLD_FTM_PinInit_20: (+1)
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xE7B2             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_5: (+1)
   \   000000E6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000E8   0x2A06             CMP      R2,#+6
   \   000000EA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_21
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x40049018
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000000F6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable14_8  ;; 0x40049018
   \   000000FE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_22: (+1)
   \   00000100   0xE7A3             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_21: (+1)
   \   00000102   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000104   0x2A40             CMP      R2,#+64
   \   00000106   0xD10A             BNE.N    ??LPLD_FTM_PinInit_23
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x4004b010
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000112   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable14_9  ;; 0x4004b010
   \   0000011A   0x6008             STR      R0,[R1, #+0]
   \   0000011C   0xE7F0             B.N      ??LPLD_FTM_PinInit_22
   \                     ??LPLD_FTM_PinInit_23: (+1)
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0xE794             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_4: (+1)
   \   00000122   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000124   0x2A07             CMP      R2,#+7
   \   00000126   0xD10A             BNE.N    ??LPLD_FTM_PinInit_24
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x4004901c
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000132   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable14_10  ;; 0x4004901c
   \   0000013A   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_25: (+1)
   \   0000013C   0xE785             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_24: (+1)
   \   0000013E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000140   0x2A60             CMP      R2,#+96
   \   00000142   0xD10A             BNE.N    ??LPLD_FTM_PinInit_26
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable14_11  ;; 0x4004c010
   \   00000148   0x6800             LDR      R0,[R0, #+0]
   \   0000014A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000014E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable14_11  ;; 0x4004c010
   \   00000156   0x6008             STR      R0,[R1, #+0]
   \   00000158   0xE7F0             B.N      ??LPLD_FTM_PinInit_25
   \                     ??LPLD_FTM_PinInit_26: (+1)
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0xE776             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_7: (+1)
   \   0000015E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000160   0x2A00             CMP      R2,#+0
   \   00000162   0xD10A             BNE.N    ??LPLD_FTM_PinInit_27
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable14_12  ;; 0x40049000
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000016E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable14_12  ;; 0x40049000
   \   00000176   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_28: (+1)
   \   00000178   0xE767             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_27: (+1)
   \   0000017A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000017C   0x2A61             CMP      R2,#+97
   \   0000017E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_29
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable14_13  ;; 0x4004c014
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000018A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable14_13  ;; 0x4004c014
   \   00000192   0x6008             STR      R0,[R1, #+0]
   \   00000194   0xE7F0             B.N      ??LPLD_FTM_PinInit_28
   \                     ??LPLD_FTM_PinInit_29: (+1)
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0xE758             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_6: (+1)
   \   0000019A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000019C   0x2A01             CMP      R2,#+1
   \   0000019E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_30
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable14_14  ;; 0x40049004
   \   000001A4   0x6800             LDR      R0,[R0, #+0]
   \   000001A6   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001AA   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable14_14  ;; 0x40049004
   \   000001B2   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_31: (+1)
   \   000001B4   0xE749             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_30: (+1)
   \   000001B6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001B8   0x2A62             CMP      R2,#+98
   \   000001BA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_32
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable14_15  ;; 0x4004c018
   \   000001C0   0x6800             LDR      R0,[R0, #+0]
   \   000001C2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001C6   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001CA   0x.... 0x....      LDR.W    R1,??DataTable14_15  ;; 0x4004c018
   \   000001CE   0x6008             STR      R0,[R1, #+0]
   \   000001D0   0xE7F0             B.N      ??LPLD_FTM_PinInit_31
   \                     ??LPLD_FTM_PinInit_32: (+1)
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0xE73A             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_8: (+1)
   \   000001D6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001D8   0x2A02             CMP      R2,#+2
   \   000001DA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_33
   \   000001DC   0x.... 0x....      LDR.W    R0,??DataTable14_16  ;; 0x40049008
   \   000001E0   0x6800             LDR      R0,[R0, #+0]
   \   000001E2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000001E6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable14_16  ;; 0x40049008
   \   000001EE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_34: (+1)
   \   000001F0   0xE72B             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_33: (+1)
   \   000001F2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001F4   0x2A63             CMP      R2,#+99
   \   000001F6   0xD10A             BNE.N    ??LPLD_FTM_PinInit_35
   \   000001F8   0x.... 0x....      LDR.W    R0,??DataTable14_17  ;; 0x4004c01c
   \   000001FC   0x6800             LDR      R0,[R0, #+0]
   \   000001FE   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000202   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000206   0x.... 0x....      LDR.W    R1,??DataTable14_17  ;; 0x4004c01c
   \   0000020A   0x6008             STR      R0,[R1, #+0]
   \   0000020C   0xE7F0             B.N      ??LPLD_FTM_PinInit_34
   \                     ??LPLD_FTM_PinInit_35: (+1)
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0xE71C             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_9: (+1)
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0xE71A             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_0: (+1)
   \   00000216   0x.... 0x....      LDR.W    R3,??DataTable14_18  ;; 0x40039000
   \   0000021A   0x4298             CMP      R0,R3
   \   0000021C   0xF040 0x80B8      BNE.W    ??LPLD_FTM_PinInit_36
   \   00000220   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000222   0x2900             CMP      R1,#+0
   \   00000224   0xD007             BEQ.N    ??LPLD_FTM_PinInit_37
   \   00000226   0x2901             CMP      R1,#+1
   \   00000228   0xD031             BEQ.N    ??LPLD_FTM_PinInit_38
   \   0000022A   0x2908             CMP      R1,#+8
   \   0000022C   0xD05B             BEQ.N    ??LPLD_FTM_PinInit_39
   \   0000022E   0x2909             CMP      R1,#+9
   \   00000230   0xF000 0x8083      BEQ.W    ??LPLD_FTM_PinInit_40
   \   00000234   0xE08E             B.N      ??LPLD_FTM_PinInit_41
   \                     ??LPLD_FTM_PinInit_37: (+1)
   \   00000236   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000238   0x2A08             CMP      R2,#+8
   \   0000023A   0xD10A             BNE.N    ??LPLD_FTM_PinInit_42
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable14_19  ;; 0x40049020
   \   00000240   0x6800             LDR      R0,[R0, #+0]
   \   00000242   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000246   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000024A   0x.... 0x....      LDR.W    R1,??DataTable14_19  ;; 0x40049020
   \   0000024E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_43: (+1)
   \   00000250   0xE6FB             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_42: (+1)
   \   00000252   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000254   0x2A0C             CMP      R2,#+12
   \   00000256   0xD10A             BNE.N    ??LPLD_FTM_PinInit_44
   \   00000258   0x.... 0x....      LDR.W    R0,??DataTable14_20  ;; 0x40049030
   \   0000025C   0x6800             LDR      R0,[R0, #+0]
   \   0000025E   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000262   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable14_20  ;; 0x40049030
   \   0000026A   0x6008             STR      R0,[R1, #+0]
   \   0000026C   0xE7F0             B.N      ??LPLD_FTM_PinInit_43
   \                     ??LPLD_FTM_PinInit_44: (+1)
   \   0000026E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000270   0x2A20             CMP      R2,#+32
   \   00000272   0xD10A             BNE.N    ??LPLD_FTM_PinInit_45
   \   00000274   0x.... 0x....      LDR.W    R0,??DataTable14_21  ;; 0x4004a000
   \   00000278   0x6800             LDR      R0,[R0, #+0]
   \   0000027A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000027E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000282   0x.... 0x....      LDR.W    R1,??DataTable14_21  ;; 0x4004a000
   \   00000286   0x6008             STR      R0,[R1, #+0]
   \   00000288   0xE7E2             B.N      ??LPLD_FTM_PinInit_43
   \                     ??LPLD_FTM_PinInit_45: (+1)
   \   0000028A   0x2000             MOVS     R0,#+0
   \   0000028C   0xE6DE             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_38: (+1)
   \   0000028E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000290   0x2A09             CMP      R2,#+9
   \   00000292   0xD10A             BNE.N    ??LPLD_FTM_PinInit_46
   \   00000294   0x.... 0x....      LDR.W    R0,??DataTable14_22  ;; 0x40049024
   \   00000298   0x6800             LDR      R0,[R0, #+0]
   \   0000029A   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000029E   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002A2   0x.... 0x....      LDR.W    R1,??DataTable14_22  ;; 0x40049024
   \   000002A6   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_47: (+1)
   \   000002A8   0xE6CF             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_46: (+1)
   \   000002AA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002AC   0x2A0D             CMP      R2,#+13
   \   000002AE   0xD10A             BNE.N    ??LPLD_FTM_PinInit_48
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable14_23  ;; 0x40049034
   \   000002B4   0x6800             LDR      R0,[R0, #+0]
   \   000002B6   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002BA   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002BE   0x.... 0x....      LDR.W    R1,??DataTable14_23  ;; 0x40049034
   \   000002C2   0x6008             STR      R0,[R1, #+0]
   \   000002C4   0xE7F0             B.N      ??LPLD_FTM_PinInit_47
   \                     ??LPLD_FTM_PinInit_48: (+1)
   \   000002C6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002C8   0x2A21             CMP      R2,#+33
   \   000002CA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_49
   \   000002CC   0x.... 0x....      LDR.W    R0,??DataTable14_24  ;; 0x4004a004
   \   000002D0   0x6800             LDR      R0,[R0, #+0]
   \   000002D2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002D6   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000002DA   0x.... 0x....      LDR.W    R1,??DataTable14_24  ;; 0x4004a004
   \   000002DE   0x6008             STR      R0,[R1, #+0]
   \   000002E0   0xE7E2             B.N      ??LPLD_FTM_PinInit_47
   \                     ??LPLD_FTM_PinInit_49: (+1)
   \   000002E2   0x2000             MOVS     R0,#+0
   \   000002E4   0xE6B2             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_39: (+1)
   \   000002E6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002E8   0x2A08             CMP      R2,#+8
   \   000002EA   0xD10A             BNE.N    ??LPLD_FTM_PinInit_50
   \   000002EC   0x.... 0x....      LDR.W    R0,??DataTable14_19  ;; 0x40049020
   \   000002F0   0x6800             LDR      R0,[R0, #+0]
   \   000002F2   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000002F6   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   000002FA   0x.... 0x....      LDR.W    R1,??DataTable14_19  ;; 0x40049020
   \   000002FE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_51: (+1)
   \   00000300   0xE6A3             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_50: (+1)
   \   00000302   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000304   0x2A0C             CMP      R2,#+12
   \   00000306   0xD108             BNE.N    ??LPLD_FTM_PinInit_52
   \   00000308   0x.... 0x....      LDR.W    R0,??DataTable14_20  ;; 0x40049030
   \   0000030C   0x6800             LDR      R0,[R0, #+0]
   \   0000030E   0xF450 0x60E0      ORRS     R0,R0,#0x700
   \   00000312   0x.... 0x....      LDR.W    R1,??DataTable14_20  ;; 0x40049030
   \   00000316   0x6008             STR      R0,[R1, #+0]
   \   00000318   0xE7F2             B.N      ??LPLD_FTM_PinInit_51
   \                     ??LPLD_FTM_PinInit_52: (+1)
   \   0000031A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000031C   0x2A20             CMP      R2,#+32
   \   0000031E   0xD10A             BNE.N    ??LPLD_FTM_PinInit_53
   \   00000320   0x.... 0x....      LDR.W    R0,??DataTable14_21  ;; 0x4004a000
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000032A   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000032E   0x.... 0x....      LDR.W    R1,??DataTable14_21  ;; 0x4004a000
   \   00000332   0x6008             STR      R0,[R1, #+0]
   \   00000334   0xE7E4             B.N      ??LPLD_FTM_PinInit_51
   \                     ??LPLD_FTM_PinInit_53: (+1)
   \   00000336   0x2000             MOVS     R0,#+0
   \   00000338   0xE688             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_40: (+1)
   \   0000033A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000033C   0x2A09             CMP      R2,#+9
   \   0000033E   0xD10B             BNE.N    ??LPLD_FTM_PinInit_54
   \   00000340   0x.... 0x....      LDR.W    R0,??DataTable14_22  ;; 0x40049024
   \   00000344   0x6800             LDR      R0,[R0, #+0]
   \   00000346   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000034A   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   0000034E   0x.... 0x....      LDR.W    R1,??DataTable14_22  ;; 0x40049024
   \   00000352   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_41: (+1)
   \   00000354   0x2000             MOVS     R0,#+0
   \   00000356   0xE679             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_54: (+1)
   \   00000358   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000035A   0x2A0D             CMP      R2,#+13
   \   0000035C   0xD108             BNE.N    ??LPLD_FTM_PinInit_55
   \   0000035E   0x.... 0x....      LDR.W    R0,??DataTable14_23  ;; 0x40049034
   \   00000362   0x6800             LDR      R0,[R0, #+0]
   \   00000364   0xF450 0x60E0      ORRS     R0,R0,#0x700
   \   00000368   0x.... 0x....      LDR.W    R1,??DataTable14_23  ;; 0x40049034
   \   0000036C   0x6008             STR      R0,[R1, #+0]
   \   0000036E   0xE7F1             B.N      ??LPLD_FTM_PinInit_41
   \                     ??LPLD_FTM_PinInit_55: (+1)
   \   00000370   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000372   0x2A21             CMP      R2,#+33
   \   00000374   0xD10A             BNE.N    ??LPLD_FTM_PinInit_56
   \   00000376   0x.... 0x....      LDR.W    R0,??DataTable14_24  ;; 0x4004a004
   \   0000037A   0x6800             LDR      R0,[R0, #+0]
   \   0000037C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000380   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000384   0x.... 0x....      LDR.W    R1,??DataTable14_24  ;; 0x4004a004
   \   00000388   0x6008             STR      R0,[R1, #+0]
   \   0000038A   0xE7E3             B.N      ??LPLD_FTM_PinInit_41
   \                     ??LPLD_FTM_PinInit_56: (+1)
   \   0000038C   0x2000             MOVS     R0,#+0
   \   0000038E   0xE65D             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_36: (+1)
   \   00000390   0x....             LDR.N    R3,??DataTable10_6  ;; 0x400b8000
   \   00000392   0x4298             CMP      R0,R3
   \   00000394   0xF040 0x8084      BNE.W    ??LPLD_FTM_PinInit_57
   \   00000398   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000039A   0x2900             CMP      R1,#+0
   \   0000039C   0xD006             BEQ.N    ??LPLD_FTM_PinInit_58
   \   0000039E   0x2901             CMP      R1,#+1
   \   000003A0   0xD022             BEQ.N    ??LPLD_FTM_PinInit_59
   \   000003A2   0x2908             CMP      R1,#+8
   \   000003A4   0xD03E             BEQ.N    ??LPLD_FTM_PinInit_60
   \   000003A6   0x2909             CMP      R1,#+9
   \   000003A8   0xD05A             BEQ.N    ??LPLD_FTM_PinInit_61
   \   000003AA   0xE077             B.N      ??LPLD_FTM_PinInit_62
   \                     ??LPLD_FTM_PinInit_58: (+1)
   \   000003AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003AE   0x2A0A             CMP      R2,#+10
   \   000003B0   0xD10A             BNE.N    ??LPLD_FTM_PinInit_63
   \   000003B2   0x.... 0x....      LDR.W    R0,??DataTable14_25  ;; 0x40049028
   \   000003B6   0x6800             LDR      R0,[R0, #+0]
   \   000003B8   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003BC   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003C0   0x.... 0x....      LDR.W    R1,??DataTable14_25  ;; 0x40049028
   \   000003C4   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_64: (+1)
   \   000003C6   0xE640             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_63: (+1)
   \   000003C8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003CA   0x2A32             CMP      R2,#+50
   \   000003CC   0xD10A             BNE.N    ??LPLD_FTM_PinInit_65
   \   000003CE   0x.... 0x....      LDR.W    R0,??DataTable14_26  ;; 0x4004a048
   \   000003D2   0x6800             LDR      R0,[R0, #+0]
   \   000003D4   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003D8   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003DC   0x.... 0x....      LDR.W    R1,??DataTable14_26  ;; 0x4004a048
   \   000003E0   0x6008             STR      R0,[R1, #+0]
   \   000003E2   0xE7F0             B.N      ??LPLD_FTM_PinInit_64
   \                     ??LPLD_FTM_PinInit_65: (+1)
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0xE631             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_59: (+1)
   \   000003E8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003EA   0x2A0B             CMP      R2,#+11
   \   000003EC   0xD10A             BNE.N    ??LPLD_FTM_PinInit_66
   \   000003EE   0x.... 0x....      LDR.W    R0,??DataTable14_27  ;; 0x4004902c
   \   000003F2   0x6800             LDR      R0,[R0, #+0]
   \   000003F4   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   000003F8   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   000003FC   0x.... 0x....      LDR.W    R1,??DataTable14_27  ;; 0x4004902c
   \   00000400   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_67: (+1)
   \   00000402   0xE622             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_66: (+1)
   \   00000404   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000406   0x2A33             CMP      R2,#+51
   \   00000408   0xD10A             BNE.N    ??LPLD_FTM_PinInit_68
   \   0000040A   0x.... 0x....      LDR.W    R0,??DataTable14_28  ;; 0x4004a04c
   \   0000040E   0x6800             LDR      R0,[R0, #+0]
   \   00000410   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000414   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   00000418   0x.... 0x....      LDR.W    R1,??DataTable14_28  ;; 0x4004a04c
   \   0000041C   0x6008             STR      R0,[R1, #+0]
   \   0000041E   0xE7F0             B.N      ??LPLD_FTM_PinInit_67
   \                     ??LPLD_FTM_PinInit_68: (+1)
   \   00000420   0x2000             MOVS     R0,#+0
   \   00000422   0xE613             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_60: (+1)
   \   00000424   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000426   0x2A0A             CMP      R2,#+10
   \   00000428   0xD10A             BNE.N    ??LPLD_FTM_PinInit_69
   \   0000042A   0x.... 0x....      LDR.W    R0,??DataTable14_25  ;; 0x40049028
   \   0000042E   0x6800             LDR      R0,[R0, #+0]
   \   00000430   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000434   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000438   0x.... 0x....      LDR.W    R1,??DataTable14_25  ;; 0x40049028
   \   0000043C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_70: (+1)
   \   0000043E   0xE604             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_69: (+1)
   \   00000440   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000442   0x2A32             CMP      R2,#+50
   \   00000444   0xD10A             BNE.N    ??LPLD_FTM_PinInit_71
   \   00000446   0x.... 0x....      LDR.W    R0,??DataTable14_26  ;; 0x4004a048
   \   0000044A   0x6800             LDR      R0,[R0, #+0]
   \   0000044C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000450   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000454   0x.... 0x....      LDR.W    R1,??DataTable14_26  ;; 0x4004a048
   \   00000458   0x6008             STR      R0,[R1, #+0]
   \   0000045A   0xE7F0             B.N      ??LPLD_FTM_PinInit_70
   \                     ??LPLD_FTM_PinInit_71: (+1)
   \   0000045C   0x2000             MOVS     R0,#+0
   \   0000045E   0xE5F5             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_61: (+1)
   \   00000460   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000462   0x2A0B             CMP      R2,#+11
   \   00000464   0xD10A             BNE.N    ??LPLD_FTM_PinInit_72
   \   00000466   0x.... 0x....      LDR.W    R0,??DataTable14_27  ;; 0x4004902c
   \   0000046A   0x6800             LDR      R0,[R0, #+0]
   \   0000046C   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   00000470   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000474   0x.... 0x....      LDR.W    R1,??DataTable14_27  ;; 0x4004902c
   \   00000478   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinInit_73: (+1)
   \   0000047A   0xE5E6             B.N      ??LPLD_FTM_PinInit_12
   \                     ??LPLD_FTM_PinInit_72: (+1)
   \   0000047C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000047E   0x2A33             CMP      R2,#+51
   \   00000480   0xD10A             BNE.N    ??LPLD_FTM_PinInit_74
   \   00000482   0x.... 0x....      LDR.W    R0,??DataTable14_28  ;; 0x4004a04c
   \   00000486   0x6800             LDR      R0,[R0, #+0]
   \   00000488   0xF430 0x60E0      BICS     R0,R0,#0x700
   \   0000048C   0xF450 0x60C0      ORRS     R0,R0,#0x600
   \   00000490   0x.... 0x....      LDR.W    R1,??DataTable14_28  ;; 0x4004a04c
   \   00000494   0x6008             STR      R0,[R1, #+0]
   \   00000496   0xE7F0             B.N      ??LPLD_FTM_PinInit_73
   \                     ??LPLD_FTM_PinInit_74: (+1)
   \   00000498   0x2000             MOVS     R0,#+0
   \   0000049A   0xE5D7             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_62: (+1)
   \   0000049C   0x2000             MOVS     R0,#+0
   \   0000049E   0xE5D5             B.N      ??LPLD_FTM_PinInit_13
   \                     ??LPLD_FTM_PinInit_57: (+1)
   \   000004A0   0x2000             MOVS     R0,#+0
   \   000004A2   0xE5D3             B.N      ??LPLD_FTM_PinInit_13
   1129          }
   1130          
   1131          /*
   1132           * LPLD_FTM_PinInit
   1133           * 反初始化通道n指定引脚的FTM复用功能，内部调用
   1134           */

   \                                 In section .text, align 2, keep-with-next
   1135          static uint8 LPLD_FTM_PinDeinit(FTM_Type *ftmx, FtmChnEnum_Type chn)
   1136          {
   1137            //根据ftmx禁用相应pin的ftm功能，回复到默认功能
   1138            if(ftmx == FTM0)
   \                     LPLD_FTM_PinDeinit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable14_1  ;; 0x40038000
   \   00000004   0x4290             CMP      R0,R2
   \   00000006   0xF040 0x80CF      BNE.W    ??LPLD_FTM_PinDeinit_0
   1139            {
   1140              switch(chn)
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD00E             BEQ.N    ??LPLD_FTM_PinDeinit_1
   \   00000010   0x2902             CMP      R1,#+2
   \   00000012   0xD03F             BEQ.N    ??LPLD_FTM_PinDeinit_2
   \   00000014   0xD325             BCC.N    ??LPLD_FTM_PinDeinit_3
   \   00000016   0x2904             CMP      R1,#+4
   \   00000018   0xD06E             BEQ.N    ??LPLD_FTM_PinDeinit_4
   \   0000001A   0xD354             BCC.N    ??LPLD_FTM_PinDeinit_5
   \   0000001C   0x2906             CMP      R1,#+6
   \   0000001E   0xF000 0x8097      BEQ.W    ??LPLD_FTM_PinDeinit_6
   \   00000022   0xF0C0 0x8080      BCC.W    ??LPLD_FTM_PinDeinit_7
   \   00000026   0x2907             CMP      R1,#+7
   \   00000028   0xF000 0x80A7      BEQ.W    ??LPLD_FTM_PinDeinit_8
   \   0000002C   0xE0BA             B.N      ??LPLD_FTM_PinDeinit_9
   1141              {
   1142              case FTM_Ch0:
   1143                if((PORTA->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   \                     ??LPLD_FTM_PinDeinit_1: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x4004900c
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000038   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000003C   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_10
   1144                  PORTA->PCR[3] = PORT_PCR_MUX(0); 
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable14_2  ;; 0x4004900c
   \   00000044   0x6008             STR      R0,[R1, #+0]
   1145                if((PORTC->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   \                     ??LPLD_FTM_PinDeinit_10: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x4004b004
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000050   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000054   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_11
   1146                  PORTC->PCR[1] = PORT_PCR_MUX(0);
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable14_3  ;; 0x4004b004
   \   0000005C   0x6008             STR      R0,[R1, #+0]
   1147                break;
   1148              case FTM_Ch1:
   1149                if((PORTA->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1150                  PORTA->PCR[4] = PORT_PCR_MUX(0); 
   1151                if((PORTC->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1152                  PORTC->PCR[2] = PORT_PCR_MUX(0);
   1153                break;
   1154              case FTM_Ch2:
   1155                if((PORTA->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1156                  PORTA->PCR[5] = PORT_PCR_MUX(0); 
   1157                if((PORTC->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1158                  PORTC->PCR[3] = PORT_PCR_MUX(0);
   1159                break;
   1160              case FTM_Ch3:
   1161                if((PORTA->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1162                  PORTA->PCR[6] = PORT_PCR_MUX(0); 
   1163                if((PORTC->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1164                  PORTC->PCR[4] = PORT_PCR_MUX(0);
   1165                break;
   1166              case FTM_Ch4:
   1167                if((PORTA->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1168                  PORTA->PCR[7] = PORT_PCR_MUX(0); 
   1169                if((PORTD->PCR[4]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1170                  PORTD->PCR[4] = PORT_PCR_MUX(0);
   1171                break;
   1172              case FTM_Ch5:
   1173                if((PORTA->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1174                  PORTA->PCR[0] = PORT_PCR_MUX(0); 
   1175                if((PORTD->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1176                  PORTD->PCR[5] = PORT_PCR_MUX(0);
   1177                break;
   1178              case FTM_Ch6:
   1179                if((PORTA->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1180                  PORTA->PCR[1] = PORT_PCR_MUX(0); 
   1181                if((PORTD->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1182                  PORTD->PCR[6] = PORT_PCR_MUX(0);
   1183                break;
   1184              case FTM_Ch7:
   1185                if((PORTA->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1186                  PORTA->PCR[2] = PORT_PCR_MUX(0); 
   1187                if((PORTD->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1188                  PORTD->PCR[7] = PORT_PCR_MUX(0);      
   1189                break;
   1190              default:
   1191                return 0;     
   1192              }
   1193            }
   1194            else if(ftmx == FTM1)
   1195            {
   1196              switch(chn)
   1197              {
   1198              case FTM_Ch0:
   1199                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1200                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   1201                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1202                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   1203                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1204                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   1205                break;
   1206              case FTM_Ch1:
   1207                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1208                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   1209                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1210                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   1211                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1212                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   1213                break;
   1214              case FTM_PhA:
   1215                if((PORTA->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1216                  PORTA->PCR[8] = PORT_PCR_MUX(0); 
   1217                if((PORTA->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   1218                  PORTA->PCR[12] = PORT_PCR_MUX(0);
   1219                if((PORTB->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1220                  PORTB->PCR[0] = PORT_PCR_MUX(0);
   1221                break;
   1222              case FTM_PhB:
   1223                if((PORTA->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1224                  PORTA->PCR[9] = PORT_PCR_MUX(0); 
   1225                if((PORTA->PCR[13]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(7))
   1226                  PORTA->PCR[13] = PORT_PCR_MUX(0);
   1227                if((PORTB->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1228                  PORTB->PCR[1] = PORT_PCR_MUX(0);
   1229                break;
   1230              default:
   1231                return 0;   
   1232              }
   1233            }
   1234            else if(ftmx == FTM2)
   1235            {
   1236              switch(chn)
   1237              {
   1238              case FTM_Ch0:
   1239                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1240                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   1241                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1242                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   1243                break;
   1244              case FTM_Ch1:
   1245                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1246                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   1247                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1248                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   1249                break;
   1250              case FTM_PhA:
   1251                if((PORTA->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1252                  PORTA->PCR[10] = PORT_PCR_MUX(0); 
   1253                if((PORTB->PCR[18]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1254                  PORTB->PCR[18] = PORT_PCR_MUX(0);
   1255                break;
   1256              case FTM_PhB:
   1257                if((PORTA->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1258                  PORTA->PCR[11] = PORT_PCR_MUX(0); 
   1259                if((PORTB->PCR[19]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1260                  PORTB->PCR[19] = PORT_PCR_MUX(0);
   1261                break;
   1262              default:
   1263                return 0;   
   1264              }
   1265            }
   1266          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
   1267            else if(ftmx == FTM3)
   1268            {
   1269              switch(chn)
   1270              {
   1271              case FTM_Ch0:
   1272                if((PORTE->PCR[5]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1273                  PORTE->PCR[5] = PORT_PCR_MUX(0); 
   1274                if((PORTD->PCR[0]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1275                  PORTD->PCR[0] = PORT_PCR_MUX(0);
   1276                break;
   1277              case FTM_Ch1:
   1278                if((PORTE->PCR[6]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1279                  PORTE->PCR[6] = PORT_PCR_MUX(0); 
   1280                if((PORTD->PCR[1]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1281                  PORTD->PCR[1] = PORT_PCR_MUX(0);
   1282                break;
   1283              case FTM_Ch2:
   1284                if((PORTE->PCR[7]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1285                  PORTE->PCR[7] = PORT_PCR_MUX(0); 
   1286                if((PORTD->PCR[2]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1287                  PORTD->PCR[2] = PORT_PCR_MUX(0);
   1288                break;
   1289              case FTM_Ch3:
   1290                if((PORTE->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1291                  PORTE->PCR[8] = PORT_PCR_MUX(0); 
   1292                if((PORTD->PCR[3]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(4))
   1293                  PORTD->PCR[3] = PORT_PCR_MUX(0);
   1294                break;
   1295              case FTM_Ch4:
   1296                if((PORTE->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1297                  PORTE->PCR[9] = PORT_PCR_MUX(0); 
   1298                if((PORTC->PCR[8]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1299                  PORTC->PCR[8] = PORT_PCR_MUX(0);
   1300                break;
   1301              case FTM_Ch5:
   1302                if((PORTE->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1303                  PORTE->PCR[10] = PORT_PCR_MUX(0); 
   1304                if((PORTC->PCR[9]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1305                  PORTC->PCR[9] = PORT_PCR_MUX(0);
   1306                break;
   1307              case FTM_Ch6:
   1308                if((PORTE->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1309                  PORTE->PCR[11] = PORT_PCR_MUX(0); 
   1310                if((PORTC->PCR[10]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1311                  PORTC->PCR[10] = PORT_PCR_MUX(0);
   1312                break;
   1313              case FTM_Ch7:
   1314                if((PORTE->PCR[12]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(6))
   1315                  PORTE->PCR[12] = PORT_PCR_MUX(0); 
   1316                if((PORTC->PCR[11]& PORT_PCR_MUX_MASK) == PORT_PCR_MUX(3))
   1317                  PORTC->PCR[11] = PORT_PCR_MUX(0);
   1318                break;
   1319              default:
   1320                return 0;     
   1321              }
   1322            }
   1323          #endif
   1324            else
   1325            {
   1326              return 0;
   1327            }
   1328            return 1;
   \                     ??LPLD_FTM_PinDeinit_11: (+1)
   \                     ??LPLD_FTM_PinDeinit_12: (+1)
   \   0000005E   0x2001             MOVS     R0,#+1
   \                     ??LPLD_FTM_PinDeinit_13: (+1)
   \   00000060   0x4770             BX       LR               ;; return
   \                     ??LPLD_FTM_PinDeinit_3: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40049010
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000006C   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000070   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_14
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable14_4  ;; 0x40049010
   \   00000078   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_14: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x4004b008
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000084   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000088   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_15
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable14_5  ;; 0x4004b008
   \   00000090   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_15: (+1)
   \   00000092   0xE7E4             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_2: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40049014
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000009E   0xF5B0 0x7F40      CMP      R0,#+768
   \   000000A2   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_16
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable14_6  ;; 0x40049014
   \   000000AA   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_16: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x4004b00c
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000B6   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000BA   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_17
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable14_7  ;; 0x4004b00c
   \   000000C2   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_17: (+1)
   \   000000C4   0xE7CB             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_5: (+1)
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x40049018
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000D0   0xF5B0 0x7F40      CMP      R0,#+768
   \   000000D4   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_18
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable14_8  ;; 0x40049018
   \   000000DC   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_18: (+1)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x4004b010
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000E8   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000EC   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_19
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable14_9  ;; 0x4004b010
   \   000000F4   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_19: (+1)
   \   000000F6   0xE7B2             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_4: (+1)
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x4004901c
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000102   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000106   0xD103             BNE.N    ??LPLD_FTM_PinDeinit_20
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      LDR.W    R1,??DataTable14_10  ;; 0x4004901c
   \   0000010E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_20: (+1)
   \   00000110   0x....             LDR.N    R0,??DataTable14_11  ;; 0x4004c010
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000118   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000011C   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_21
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x....             LDR.N    R1,??DataTable14_11  ;; 0x4004c010
   \   00000122   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_21: (+1)
   \   00000124   0xE79B             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_7: (+1)
   \   00000126   0x....             LDR.N    R0,??DataTable14_12  ;; 0x40049000
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000012E   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000132   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_22
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0x....             LDR.N    R1,??DataTable14_12  ;; 0x40049000
   \   00000138   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_22: (+1)
   \   0000013A   0x....             LDR.N    R0,??DataTable14_13  ;; 0x4004c014
   \   0000013C   0x6800             LDR      R0,[R0, #+0]
   \   0000013E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000142   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000146   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_23
   \   00000148   0x2000             MOVS     R0,#+0
   \   0000014A   0x....             LDR.N    R1,??DataTable14_13  ;; 0x4004c014
   \   0000014C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_23: (+1)
   \   0000014E   0xE786             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_6: (+1)
   \   00000150   0x....             LDR.N    R0,??DataTable14_14  ;; 0x40049004
   \   00000152   0x6800             LDR      R0,[R0, #+0]
   \   00000154   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000158   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000015C   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_24
   \   0000015E   0x2000             MOVS     R0,#+0
   \   00000160   0x....             LDR.N    R1,??DataTable14_14  ;; 0x40049004
   \   00000162   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_24: (+1)
   \   00000164   0x....             LDR.N    R0,??DataTable14_15  ;; 0x4004c018
   \   00000166   0x6800             LDR      R0,[R0, #+0]
   \   00000168   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000016C   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000170   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_25
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x....             LDR.N    R1,??DataTable14_15  ;; 0x4004c018
   \   00000176   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_25: (+1)
   \   00000178   0xE771             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_8: (+1)
   \   0000017A   0x....             LDR.N    R0,??DataTable14_16  ;; 0x40049008
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000182   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000186   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_26
   \   00000188   0x2000             MOVS     R0,#+0
   \   0000018A   0x....             LDR.N    R1,??DataTable14_16  ;; 0x40049008
   \   0000018C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_26: (+1)
   \   0000018E   0x....             LDR.N    R0,??DataTable14_17  ;; 0x4004c01c
   \   00000190   0x6800             LDR      R0,[R0, #+0]
   \   00000192   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000196   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000019A   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_27
   \   0000019C   0x2000             MOVS     R0,#+0
   \   0000019E   0x....             LDR.N    R1,??DataTable14_17  ;; 0x4004c01c
   \   000001A0   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_27: (+1)
   \   000001A2   0xE75C             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_9: (+1)
   \   000001A4   0x2000             MOVS     R0,#+0
   \   000001A6   0xE75B             B.N      ??LPLD_FTM_PinDeinit_13
   \                     ??LPLD_FTM_PinDeinit_0: (+1)
   \   000001A8   0x....             LDR.N    R2,??DataTable14_18  ;; 0x40039000
   \   000001AA   0x4290             CMP      R0,R2
   \   000001AC   0xF040 0x8088      BNE.W    ??LPLD_FTM_PinDeinit_28
   \   000001B0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001B2   0x2900             CMP      R1,#+0
   \   000001B4   0xD006             BEQ.N    ??LPLD_FTM_PinDeinit_29
   \   000001B6   0x2901             CMP      R1,#+1
   \   000001B8   0xD023             BEQ.N    ??LPLD_FTM_PinDeinit_30
   \   000001BA   0x2908             CMP      R1,#+8
   \   000001BC   0xD040             BEQ.N    ??LPLD_FTM_PinDeinit_31
   \   000001BE   0x2909             CMP      R1,#+9
   \   000001C0   0xD05D             BEQ.N    ??LPLD_FTM_PinDeinit_32
   \   000001C2   0xE07B             B.N      ??LPLD_FTM_PinDeinit_33
   \                     ??LPLD_FTM_PinDeinit_29: (+1)
   \   000001C4   0x....             LDR.N    R0,??DataTable14_19  ;; 0x40049020
   \   000001C6   0x6800             LDR      R0,[R0, #+0]
   \   000001C8   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001CC   0xF5B0 0x7F40      CMP      R0,#+768
   \   000001D0   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_34
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x....             LDR.N    R1,??DataTable14_19  ;; 0x40049020
   \   000001D6   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_34: (+1)
   \   000001D8   0x....             LDR.N    R0,??DataTable14_20  ;; 0x40049030
   \   000001DA   0x6800             LDR      R0,[R0, #+0]
   \   000001DC   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001E0   0xF5B0 0x7F40      CMP      R0,#+768
   \   000001E4   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_35
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x....             LDR.N    R1,??DataTable14_20  ;; 0x40049030
   \   000001EA   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_35: (+1)
   \   000001EC   0x....             LDR.N    R0,??DataTable14_21  ;; 0x4004a000
   \   000001EE   0x6800             LDR      R0,[R0, #+0]
   \   000001F0   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000001F4   0xF5B0 0x7F40      CMP      R0,#+768
   \   000001F8   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_36
   \   000001FA   0x2000             MOVS     R0,#+0
   \   000001FC   0x....             LDR.N    R1,??DataTable14_21  ;; 0x4004a000
   \   000001FE   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_36: (+1)
   \   00000200   0xE72D             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_30: (+1)
   \   00000202   0x....             LDR.N    R0,??DataTable14_22  ;; 0x40049024
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000020A   0xF5B0 0x7F40      CMP      R0,#+768
   \   0000020E   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_37
   \   00000210   0x2000             MOVS     R0,#+0
   \   00000212   0x....             LDR.N    R1,??DataTable14_22  ;; 0x40049024
   \   00000214   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_37: (+1)
   \   00000216   0x....             LDR.N    R0,??DataTable14_23  ;; 0x40049034
   \   00000218   0x6800             LDR      R0,[R0, #+0]
   \   0000021A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000021E   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000222   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_38
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0x....             LDR.N    R1,??DataTable14_23  ;; 0x40049034
   \   00000228   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_38: (+1)
   \   0000022A   0x....             LDR.N    R0,??DataTable14_24  ;; 0x4004a004
   \   0000022C   0x6800             LDR      R0,[R0, #+0]
   \   0000022E   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000232   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000236   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_39
   \   00000238   0x2000             MOVS     R0,#+0
   \   0000023A   0x....             LDR.N    R1,??DataTable14_24  ;; 0x4004a004
   \   0000023C   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_39: (+1)
   \   0000023E   0xE70E             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_31: (+1)
   \   00000240   0x....             LDR.N    R0,??DataTable14_19  ;; 0x40049020
   \   00000242   0x6800             LDR      R0,[R0, #+0]
   \   00000244   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000248   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000024C   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_40
   \   0000024E   0x2000             MOVS     R0,#+0
   \   00000250   0x....             LDR.N    R1,??DataTable14_19  ;; 0x40049020
   \   00000252   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_40: (+1)
   \   00000254   0x....             LDR.N    R0,??DataTable14_20  ;; 0x40049030
   \   00000256   0x6800             LDR      R0,[R0, #+0]
   \   00000258   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000025C   0xF5B0 0x6FE0      CMP      R0,#+1792
   \   00000260   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_41
   \   00000262   0x2000             MOVS     R0,#+0
   \   00000264   0x....             LDR.N    R1,??DataTable14_20  ;; 0x40049030
   \   00000266   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_41: (+1)
   \   00000268   0x....             LDR.N    R0,??DataTable14_21  ;; 0x4004a000
   \   0000026A   0x6800             LDR      R0,[R0, #+0]
   \   0000026C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000270   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000274   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_42
   \   00000276   0x2000             MOVS     R0,#+0
   \   00000278   0x....             LDR.N    R1,??DataTable14_21  ;; 0x4004a000
   \   0000027A   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_42: (+1)
   \   0000027C   0xE6EF             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_32: (+1)
   \   0000027E   0x....             LDR.N    R0,??DataTable14_22  ;; 0x40049024
   \   00000280   0x6800             LDR      R0,[R0, #+0]
   \   00000282   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000286   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000028A   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_43
   \   0000028C   0x2000             MOVS     R0,#+0
   \   0000028E   0x....             LDR.N    R1,??DataTable14_22  ;; 0x40049024
   \   00000290   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_43: (+1)
   \   00000292   0x....             LDR.N    R0,??DataTable14_23  ;; 0x40049034
   \   00000294   0x6800             LDR      R0,[R0, #+0]
   \   00000296   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000029A   0xF5B0 0x6FE0      CMP      R0,#+1792
   \   0000029E   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_44
   \   000002A0   0x2000             MOVS     R0,#+0
   \   000002A2   0x....             LDR.N    R1,??DataTable14_23  ;; 0x40049034
   \   000002A4   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_44: (+1)
   \   000002A6   0x....             LDR.N    R0,??DataTable14_24  ;; 0x4004a004
   \   000002A8   0x6800             LDR      R0,[R0, #+0]
   \   000002AA   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002AE   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   000002B2   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_45
   \   000002B4   0x2000             MOVS     R0,#+0
   \   000002B6   0x....             LDR.N    R1,??DataTable14_24  ;; 0x4004a004
   \   000002B8   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_45: (+1)
   \   000002BA   0xE6D0             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_33: (+1)
   \   000002BC   0x2000             MOVS     R0,#+0
   \   000002BE   0xE6CF             B.N      ??LPLD_FTM_PinDeinit_13
   \                     ??LPLD_FTM_PinDeinit_28: (+1)
   \   000002C0   0x....             LDR.N    R2,??DataTable14_29  ;; 0x400b8000
   \   000002C2   0x4290             CMP      R0,R2
   \   000002C4   0xD15F             BNE.N    ??LPLD_FTM_PinDeinit_46
   \   000002C6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002C8   0x2900             CMP      R1,#+0
   \   000002CA   0xD006             BEQ.N    ??LPLD_FTM_PinDeinit_47
   \   000002CC   0x2901             CMP      R1,#+1
   \   000002CE   0xD019             BEQ.N    ??LPLD_FTM_PinDeinit_48
   \   000002D0   0x2908             CMP      R1,#+8
   \   000002D2   0xD02C             BEQ.N    ??LPLD_FTM_PinDeinit_49
   \   000002D4   0x2909             CMP      R1,#+9
   \   000002D6   0xD03F             BEQ.N    ??LPLD_FTM_PinDeinit_50
   \   000002D8   0xE053             B.N      ??LPLD_FTM_PinDeinit_51
   \                     ??LPLD_FTM_PinDeinit_47: (+1)
   \   000002DA   0x....             LDR.N    R0,??DataTable14_25  ;; 0x40049028
   \   000002DC   0x6800             LDR      R0,[R0, #+0]
   \   000002DE   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002E2   0xF5B0 0x7F40      CMP      R0,#+768
   \   000002E6   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_52
   \   000002E8   0x2000             MOVS     R0,#+0
   \   000002EA   0x....             LDR.N    R1,??DataTable14_25  ;; 0x40049028
   \   000002EC   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_52: (+1)
   \   000002EE   0x....             LDR.N    R0,??DataTable14_26  ;; 0x4004a048
   \   000002F0   0x6800             LDR      R0,[R0, #+0]
   \   000002F2   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000002F6   0xF5B0 0x7F40      CMP      R0,#+768
   \   000002FA   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_53
   \   000002FC   0x2000             MOVS     R0,#+0
   \   000002FE   0x....             LDR.N    R1,??DataTable14_26  ;; 0x4004a048
   \   00000300   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_53: (+1)
   \   00000302   0xE6AC             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_48: (+1)
   \   00000304   0x....             LDR.N    R0,??DataTable14_27  ;; 0x4004902c
   \   00000306   0x6800             LDR      R0,[R0, #+0]
   \   00000308   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000030C   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000310   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_54
   \   00000312   0x2000             MOVS     R0,#+0
   \   00000314   0x....             LDR.N    R1,??DataTable14_27  ;; 0x4004902c
   \   00000316   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_54: (+1)
   \   00000318   0x....             LDR.N    R0,??DataTable14_28  ;; 0x4004a04c
   \   0000031A   0x6800             LDR      R0,[R0, #+0]
   \   0000031C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000320   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000324   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_55
   \   00000326   0x2000             MOVS     R0,#+0
   \   00000328   0x....             LDR.N    R1,??DataTable14_28  ;; 0x4004a04c
   \   0000032A   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_55: (+1)
   \   0000032C   0xE697             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_49: (+1)
   \   0000032E   0x....             LDR.N    R0,??DataTable14_25  ;; 0x40049028
   \   00000330   0x6800             LDR      R0,[R0, #+0]
   \   00000332   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000336   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000033A   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_56
   \   0000033C   0x2000             MOVS     R0,#+0
   \   0000033E   0x....             LDR.N    R1,??DataTable14_25  ;; 0x40049028
   \   00000340   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_56: (+1)
   \   00000342   0x....             LDR.N    R0,??DataTable14_26  ;; 0x4004a048
   \   00000344   0x6800             LDR      R0,[R0, #+0]
   \   00000346   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000034A   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000034E   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_57
   \   00000350   0x2000             MOVS     R0,#+0
   \   00000352   0x....             LDR.N    R1,??DataTable14_26  ;; 0x4004a048
   \   00000354   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_57: (+1)
   \   00000356   0xE682             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_50: (+1)
   \   00000358   0x....             LDR.N    R0,??DataTable14_27  ;; 0x4004902c
   \   0000035A   0x6800             LDR      R0,[R0, #+0]
   \   0000035C   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000360   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000364   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_58
   \   00000366   0x2000             MOVS     R0,#+0
   \   00000368   0x....             LDR.N    R1,??DataTable14_27  ;; 0x4004902c
   \   0000036A   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_58: (+1)
   \   0000036C   0x....             LDR.N    R0,??DataTable14_28  ;; 0x4004a04c
   \   0000036E   0x6800             LDR      R0,[R0, #+0]
   \   00000370   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000374   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   00000378   0xD102             BNE.N    ??LPLD_FTM_PinDeinit_59
   \   0000037A   0x2000             MOVS     R0,#+0
   \   0000037C   0x....             LDR.N    R1,??DataTable14_28  ;; 0x4004a04c
   \   0000037E   0x6008             STR      R0,[R1, #+0]
   \                     ??LPLD_FTM_PinDeinit_59: (+1)
   \   00000380   0xE66D             B.N      ??LPLD_FTM_PinDeinit_12
   \                     ??LPLD_FTM_PinDeinit_51: (+1)
   \   00000382   0x2000             MOVS     R0,#+0
   \   00000384   0xE66C             B.N      ??LPLD_FTM_PinDeinit_13
   \                     ??LPLD_FTM_PinDeinit_46: (+1)
   \   00000386   0x2000             MOVS     R0,#+0
   \   00000388   0xE66A             B.N      ??LPLD_FTM_PinDeinit_13
   1329          }
   1330          
   1331          /*
   1332           * LPLD_FTM_QD_Init
   1333           * FTM模块正交解码模式初始化，内部调用
   1334           */

   \                                 In section .text, align 2, keep-with-next
   1335          static uint8 LPLD_FTM_QD_Init(FTM_InitTypeDef ftm_init_structure)
   1336          {
   \                     LPLD_FTM_QD_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   1337            uint8 mode = ftm_init_structure.FTM_QdMode;
   \   00000002   0xF89D 0x0012      LDRB     R0,[SP, #+18]
   1338            FTM_Type *ftmx = ftm_init_structure.FTM_Ftmx;
   \   00000006   0x9900             LDR      R1,[SP, #+0]
   1339           
   1340            ftmx->MODE |= FTM_MODE_FTMEN_MASK;    //FTM2EN=1   
   \   00000008   0x6D4A             LDR      R2,[R1, #+84]
   \   0000000A   0xF052 0x0201      ORRS     R2,R2,#0x1
   \   0000000E   0x654A             STR      R2,[R1, #+84]
   1341            
   1342            ftmx->CNTIN = 0;//FTM0计数器初始值为0  
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x64CA             STR      R2,[R1, #+76]
   1343            ftmx->CNT=0;  
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x604A             STR      R2,[R1, #+4]
   1344            ftmx->MOD = 0xFFFF;//结束值  
   \   00000018   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000001C   0x608A             STR      R2,[R1, #+8]
   1345            
   1346            ftmx->QDCTRL |= mode;     //解码模式选择
   \   0000001E   0xF8D1 0x2080      LDR      R2,[R1, #+128]
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x4310             ORRS     R0,R0,R2
   \   00000026   0xF8C1 0x0080      STR      R0,[R1, #+128]
   1347            ftmx->QDCTRL |= FTM_QDCTRL_QUADEN_MASK;       //使能正交解码模式 
   \   0000002A   0xF8D1 0x0080      LDR      R0,[R1, #+128]
   \   0000002E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000032   0xF8C1 0x0080      STR      R0,[R1, #+128]
   1348          
   1349            return 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xB004             ADD      SP,SP,#+16
   \   0000003A   0x4770             BX       LR               ;; return
   1350          }
   1351          

   \                                 In section .text, align 2, keep-with-next
   1352          static uint8 LPLD_FTM_DEC_Init(FTM_InitTypeDef ftm_init_structure)
   1353          {
   \                     LPLD_FTM_DEC_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   1354            
   1355            return 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xB004             ADD      SP,SP,#+16
   \   00000006   0x4770             BX       LR               ;; return
   1356          }
   1357          
   1358          /*
   1359           * FTM0--FTM1中断处理函数
   1360           * 与启动文件startup_K60.s中的中断向量表关联
   1361           * 用户无需修改，程序自动进入对应通道中断函数
   1362           */

   \                                 In section .text, align 2, keep-with-next
   1363          void FTM0_IRQHandler(void)
   1364          {
   \                     FTM0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1365          #if (UCOS_II > 0u)
   1366            OS_CPU_SR  cpu_sr = 0u;
   1367            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1368            OSIntEnter();
   1369            OS_EXIT_CRITICAL();
   1370          #endif
   1371            
   1372            FTM_ISR[0]();
   \   00000002   0x....             LDR.N    R0,??DataTable14_30
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
   1373            
   1374          #if (UCOS_II > 0u)
   1375            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1376          #endif
   1377          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
   1378          

   \                                 In section .text, align 2, keep-with-next
   1379          void FTM1_IRQHandler(void)
   1380          {
   \                     FTM1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1381          #if (UCOS_II > 0u)
   1382            OS_CPU_SR  cpu_sr = 0u;
   1383            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1384            OSIntEnter();
   1385            OS_EXIT_CRITICAL();
   1386          #endif
   1387            
   1388            FTM_ISR[1]();
   \   00000002   0x....             LDR.N    R0,??DataTable14_30
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
   1389            
   1390          #if (UCOS_II > 0u)
   1391            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1392          #endif
   1393          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
   1394          

   \                                 In section .text, align 2, keep-with-next
   1395          void FTM2_IRQHandler(void)
   1396          {
   \                     FTM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1397          #if (UCOS_II > 0u)
   1398            OS_CPU_SR  cpu_sr = 0u;
   1399            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1400            OSIntEnter();
   1401            OS_EXIT_CRITICAL();
   1402          #endif
   1403            
   1404            FTM_ISR[2]();
   \   00000002   0x....             LDR.N    R0,??DataTable14_30
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
   1405            
   1406          #if (UCOS_II > 0u)
   1407            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1408          #endif
   1409          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     FTM_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x4004900C         DC32     0x4004900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x40049010         DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x40049014         DC32     0x40049014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x4004901C         DC32     0x4004901c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x40049004         DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x40049008         DC32     0x40049008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x4004C01C         DC32     0x4004c01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x40049020         DC32     0x40049020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0x40049024         DC32     0x40049024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0x40049028         DC32     0x40049028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x4004A048         DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x4004902C         DC32     0x4004902c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x4004A04C         DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \   00000000   0x........         DC32     FTM_ISR

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x41          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \              0x64 0x6D    
   \              0x69 0x6E    
   \              0x69 0x73    
   \   00000010   0x74 0x72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \              0x61 0x74    
   \              0x6F 0x72    
   \              0x5C 0x44    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 47H
   \              0x6B 0x74    
   \              0x6F 0x70    
   \              0x5C 0x47    
   \   00000020   0x6F 0x6C          DC8 6FH, 6CH, 64H, 5FH, 52H, 61H, 7AH, 6FH
   \              0x64 0x5F    
   \              0x52 0x61    
   \              0x7A 0x6F    
   \   00000028   0x72 0x5F          DC8 72H, 5FH, 41H, 5CH, 6CH, 69H, 62H, 5CH
   \              0x41 0x5C    
   \              0x6C 0x69    
   \              0x62 0x5C    
   \   00000030   0x4C 0x50          DC8 4CH, 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH
   \              0x4C 0x44    
   \              0x5C 0x48    
   \              0x57 0x5C    
   \   00000038   0x48 0x57          DC8 48H, 57H, 5FH, 46H, 54H, 4DH, 2EH, 63H
   \              0x5F 0x46    
   \              0x54 0x4D    
   \              0x2E 0x63    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1410          
   1411          #if defined(CPU_MK60F12) || defined(CPU_MK60F15)
   1412          void FTM3_IRQHandler(void)
   1413          {
   1414          #if (UCOS_II > 0u)
   1415            OS_CPU_SR  cpu_sr = 0u;
   1416            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1417            OSIntEnter();
   1418            OS_EXIT_CRITICAL();
   1419          #endif
   1420            
   1421            FTM_ISR[3]();
   1422            
   1423          #if (UCOS_II > 0u)
   1424            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1425          #endif
   1426          }
   1427          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FTM0_IRQHandler
         8   -- Indirect call
       8   FTM1_IRQHandler
         8   -- Indirect call
       8   FTM2_IRQHandler
         8   -- Indirect call
       0   LPLD_FTM_ClearCHnF
       0   LPLD_FTM_ClearCounter
       0   LPLD_FTM_ClearTOF
      16   LPLD_FTM_DEC_Init
      48   LPLD_FTM_Deinit
        32   -> LPLD_FTM_DisableIrq
        48   -> __aeabi_memcpy4
      16   LPLD_FTM_DisableChn
        16   -> LPLD_FTM_PinDeinit
      24   LPLD_FTM_DisableIrq
        24   -> NVIC_DisableIRQ
      24   LPLD_FTM_EnableIrq
        24   -> NVIC_EnableIRQ
       0   LPLD_FTM_GetChVal
       0   LPLD_FTM_GetClkDiv
       0   LPLD_FTM_GetCounter
      16   LPLD_FTM_IC_Enable
        16   -> LPLD_FTM_PinInit
      32   LPLD_FTM_IC_Init
        32   -> assert_failed
      56   LPLD_FTM_Init
        40   -> LPLD_FTM_DEC_Init
        40   -> LPLD_FTM_IC_Init
        40   -> LPLD_FTM_PWM_Init
        40   -> LPLD_FTM_QD_Init
        56   -> __aeabi_memcpy4
        40   -> assert_failed
       0   LPLD_FTM_IsCHnF
       0   LPLD_FTM_IsTOF
      24   LPLD_FTM_PWM_ChangeDuty
        24   -> assert_failed
      24   LPLD_FTM_PWM_Enable
        24   -> LPLD_FTM_PinInit
        24   -> assert_failed
      40   LPLD_FTM_PWM_Init
        40   -> assert_failed
       0   LPLD_FTM_PinDeinit
       0   LPLD_FTM_PinInit
       8   LPLD_FTM_QD_Disable
         8   -> LPLD_FTM_PinDeinit
      16   LPLD_FTM_QD_Enable
        16   -> LPLD_FTM_PinInit
      16   LPLD_FTM_QD_Init
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      68  ?_0
      10  FTM0_IRQHandler
      10  FTM1_IRQHandler
      10  FTM2_IRQHandler
      12  FTM_ISR
      22  LPLD_FTM_ClearCHnF
       6  LPLD_FTM_ClearCounter
      10  LPLD_FTM_ClearTOF
       8  LPLD_FTM_DEC_Init
     114  LPLD_FTM_Deinit
      40  LPLD_FTM_DisableChn
      60  LPLD_FTM_DisableIrq
      60  LPLD_FTM_EnableIrq
      12  LPLD_FTM_GetChVal
      16  LPLD_FTM_GetClkDiv
       6  LPLD_FTM_GetCounter
     162  LPLD_FTM_IC_Enable
     150  LPLD_FTM_IC_Init
     288  LPLD_FTM_Init
      16  LPLD_FTM_IsCHnF
      10  LPLD_FTM_IsTOF
      80  LPLD_FTM_PWM_ChangeDuty
     106  LPLD_FTM_PWM_Enable
     294  LPLD_FTM_PWM_Init
     906  LPLD_FTM_PinDeinit
    1188  LPLD_FTM_PinInit
      40  LPLD_FTM_QD_Disable
      50  LPLD_FTM_QD_Enable
      60  LPLD_FTM_QD_Init
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ

 
    12 bytes in section .bss
    68 bytes in section .rodata
 3 938 bytes in section .text
 
 3 938 bytes of CODE  memory
    68 bytes of CONST memory
    12 bytes of DATA  memory

Errors: none
Warnings: none
