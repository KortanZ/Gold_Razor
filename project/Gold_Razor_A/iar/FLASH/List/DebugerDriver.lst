###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        11/May/2016  19:10:52
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\DebugerDriver.c
#    Command line =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\DebugerDriver.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\DebugerDriver.lst
#    Object file  =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\DebugerDriver.o
#
###############################################################################

E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\DebugerDriver.c
      1          /*
      2          *This file for debuger driver
      3          *include UART and GPIO initial
      4          *include timer initial
      5          */
      6          //#include "common.h"
      7          #include "Menu.h"
      8          #include "DebugerDriver.h"
      9          

   \                                 In section .data, align 4
     10          uint32 steerDebugDuty = 1431;
   \                     steerDebugDuty:
   \   00000000   0x00000597         DC32 1431
     11          #if (!Twin_Car)

   \                                 In section .text, align 2, keep-with-next
     12          void UART_Debuger_Init(void)
     13          {
   \                     UART_Debuger_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     14          	UART_InitTypeDef uartInitStruct;
     15          	uartInitStruct.UART_Uartx = UART2; //‰ΩøÁî®UART2
   \   00000004   0x....             LDR.N    R0,??DataTable5  ;; 0x4006c000
   \   00000006   0x9003             STR      R0,[SP, #+12]
     16          	uartInitStruct.UART_BaudRate = 115200; //ËÆæÁΩÆÊ≥¢ÁâπÁéá115200
   \   00000008   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000000C   0x9004             STR      R0,[SP, #+16]
     17          	uartInitStruct.UART_RxPin = PTD2;  //Êé•Êî∂ÂºïËÑö‰∏∫PTD2
   \   0000000E   0x205E             MOVS     R0,#+94
   \   00000010   0xF88D 0x0015      STRB     R0,[SP, #+21]
     18          	uartInitStruct.UART_TxPin = PTD3;  //ÂèëÈÄÅÂºïËÑö‰∏∫PTD3
   \   00000014   0x205F             MOVS     R0,#+95
   \   00000016   0xF88D 0x0014      STRB     R0,[SP, #+20]
     19          	//ÂàùÂßãÂåñUART
     20          	LPLD_UART_Init(uartInitStruct);
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x221C             MOVS     R2,#+28
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_UART_Init
     21          }
   \   0000002C   0xB00B             ADD      SP,SP,#+44
   \   0000002E   0xBD00             POP      {PC}             ;; return
     22          #else
     23          void UART_Blooth_Init(void)
     24          {
     25          
     26          }
     27          #endif
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void LED_Debuger_Init(void)
     30          {
   \                     LED_Debuger_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     31          	GPIO_InitTypeDef gpioInitStruct;
     32          
     33          	//--------------------K60_LED-------------------
     34          	gpioInitStruct.GPIO_PTx = PTA;
   \   00000004   0x....             LDR.N    R0,??DataTable5_1  ;; 0x400ff000
   \   00000006   0x9001             STR      R0,[SP, #+4]
     35          	gpioInitStruct.GPIO_Pins = GPIO_Pin17;
   \   00000008   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     36          	gpioInitStruct.GPIO_Dir = DIR_OUTPUT;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0010      STRB     R0,[SP, #+16]
     37          	gpioInitStruct.GPIO_Output = OUTPUT_H;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF88D 0x0011      STRB     R0,[SP, #+17]
     38          	gpioInitStruct.GPIO_PinControl = IRQC_DIS;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     39          	LPLD_GPIO_Init(gpioInitStruct);   /* */
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0xB084             SUB      SP,SP,#+16
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x2214             MOVS     R2,#+20
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xBC0F             POP      {R0-R3}
   \   0000002C   0x.... 0x....      BL       LPLD_GPIO_Init
     40          	//---------------------Razor_LED----------------
     41          	gpioInitStruct.GPIO_PTx = PTE;
   \   00000030   0x....             LDR.N    R0,??DataTable5_2  ;; 0x400ff100
   \   00000032   0x9001             STR      R0,[SP, #+4]
     42          	gpioInitStruct.GPIO_Pins = GPIO_Pin10;
   \   00000034   0xF44F 0x6080      MOV      R0,#+1024
   \   00000038   0x9002             STR      R0,[SP, #+8]
     43          	gpioInitStruct.GPIO_Dir = DIR_OUTPUT;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xF88D 0x0010      STRB     R0,[SP, #+16]
     44          	gpioInitStruct.GPIO_Output = OUTPUT_L;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF88D 0x0011      STRB     R0,[SP, #+17]
     45          	gpioInitStruct.GPIO_PinControl = IRQC_DIS;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x9003             STR      R0,[SP, #+12]
     46          	LPLD_GPIO_Init(gpioInitStruct);
   \   0000004A   0xA901             ADD      R1,SP,#+4
   \   0000004C   0xB084             SUB      SP,SP,#+16
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x2214             MOVS     R2,#+20
   \   00000052   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000056   0xBC0F             POP      {R0-R3}
   \   00000058   0x.... 0x....      BL       LPLD_GPIO_Init
     47          }
   \   0000005C   0xB007             ADD      SP,SP,#+28
   \   0000005E   0xBD00             POP      {PC}             ;; return
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void Keyboard_GPIO_Init(void)
     50          {
   \                     Keyboard_GPIO_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     51          
     52            	  GPIO_InitTypeDef keyboard_gpio_init_struct;
     53          
     54                keyboard_gpio_init_struct.GPIO_PTx = PTD;
   \   00000004   0x....             LDR.N    R0,??DataTable5_3  ;; 0x400ff0c0
   \   00000006   0x9001             STR      R0,[SP, #+4]
     55                keyboard_gpio_init_struct.GPIO_Pins = GPIO_Pin10 | GPIO_Pin11 | GPIO_Pin12 | GPIO_Pin13;
   \   00000008   0xF44F 0x5070      MOV      R0,#+15360
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     56                keyboard_gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0010      STRB     R0,[SP, #+16]
     57                keyboard_gpio_init_struct.GPIO_Output = OUTPUT_L;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF88D 0x0011      STRB     R0,[SP, #+17]
     58                keyboard_gpio_init_struct.GPIO_PinControl = IRQC_FA | INPUT_PULL_UP;
   \   0000001A   0x....             LDR.N    R0,??DataTable5_4  ;; 0xa0003
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     59                keyboard_gpio_init_struct.GPIO_Isr = Keyboard_Isr;
   \   0000001E   0x.... 0x....      ADR.W    R0,Keyboard_Isr
   \   00000022   0x9005             STR      R0,[SP, #+20]
     60                LPLD_GPIO_Init(keyboard_gpio_init_struct);
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0xB084             SUB      SP,SP,#+16
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x2214             MOVS     R2,#+20
   \   0000002C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000030   0xBC0F             POP      {R0-R3}
   \   00000032   0x.... 0x....      BL       LPLD_GPIO_Init
     61                LPLD_GPIO_EnableIrq(keyboard_gpio_init_struct);
   \   00000036   0xA901             ADD      R1,SP,#+4
   \   00000038   0xB084             SUB      SP,SP,#+16
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x2214             MOVS     R2,#+20
   \   0000003E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000042   0xBC0F             POP      {R0-R3}
   \   00000044   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     62          
     63                keyboard_gpio_init_struct.GPIO_PTx = PTC;
   \   00000048   0x....             LDR.N    R0,??DataTable5_5  ;; 0x400ff080
   \   0000004A   0x9001             STR      R0,[SP, #+4]
     64                keyboard_gpio_init_struct.GPIO_Pins = GPIO_Pin14 | GPIO_Pin15;
   \   0000004C   0xF44F 0x4040      MOV      R0,#+49152
   \   00000050   0x9002             STR      R0,[SP, #+8]
     65                keyboard_gpio_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF88D 0x0010      STRB     R0,[SP, #+16]
     66                keyboard_gpio_init_struct.GPIO_Output = OUTPUT_L;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xF88D 0x0011      STRB     R0,[SP, #+17]
     67                keyboard_gpio_init_struct.GPIO_PinControl = IRQC_FA | INPUT_PULL_UP;
   \   0000005E   0x....             LDR.N    R0,??DataTable5_4  ;; 0xa0003
   \   00000060   0x9003             STR      R0,[SP, #+12]
     68                keyboard_gpio_init_struct.GPIO_Isr = Keyboard_Isr;
   \   00000062   0x.... 0x....      ADR.W    R0,Keyboard_Isr
   \   00000066   0x9005             STR      R0,[SP, #+20]
     69                LPLD_GPIO_Init(keyboard_gpio_init_struct);
   \   00000068   0xA901             ADD      R1,SP,#+4
   \   0000006A   0xB084             SUB      SP,SP,#+16
   \   0000006C   0x4668             MOV      R0,SP
   \   0000006E   0x2214             MOVS     R2,#+20
   \   00000070   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000074   0xBC0F             POP      {R0-R3}
   \   00000076   0x.... 0x....      BL       LPLD_GPIO_Init
     70                LPLD_GPIO_EnableIrq(keyboard_gpio_init_struct);
   \   0000007A   0xA901             ADD      R1,SP,#+4
   \   0000007C   0xB084             SUB      SP,SP,#+16
   \   0000007E   0x4668             MOV      R0,SP
   \   00000080   0x2214             MOVS     R2,#+20
   \   00000082   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000086   0xBC0F             POP      {R0-R3}
   \   00000088   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     71          }
   \   0000008C   0xB007             ADD      SP,SP,#+28
   \   0000008E   0xBD00             POP      {PC}             ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void Time_Counter_Start(void)
     74          {
     75          	/* Timer count start */
     76          	SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;         //‰ΩøËÉΩPITÊó∂Èíü
   \                     Time_Counter_Start: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_6  ;; 0x4004803c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   00000008   0x....             LDR.N    R1,??DataTable5_6  ;; 0x4004803c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     77          	PIT->MCR &= ~(PIT_MCR_MDIS_MASK | PIT_MCR_FRZ_MASK);    //‰ΩøËÉΩPITÂÆöÊó∂Âô®Êó∂Èíü ÔºåË∞ÉËØïÊ®°Âºè‰∏ãÁªßÁª≠ËøêË°å
   \   0000000C   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40037000
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x0880             LSRS     R0,R0,#+2
   \   00000012   0x0080             LSLS     R0,R0,#+2
   \   00000014   0x....             LDR.N    R1,??DataTable5_7  ;; 0x40037000
   \   00000016   0x6008             STR      R0,[R1, #+0]
     78          	PIT->CHANNEL[0].TCTRL &= ~(PIT_TCTRL_TEN_MASK);
   \   00000018   0x....             LDR.N    R0,??DataTable5_8  ;; 0x40037108
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x0840             LSRS     R0,R0,#+1
   \   0000001E   0x0040             LSLS     R0,R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable5_8  ;; 0x40037108
   \   00000022   0x6008             STR      R0,[R1, #+0]
     79          	PIT->CHANNEL[0].LDVAL = ~0;							 //ËÆæÁΩÆÊ∫¢Âá∫‰∏≠Êñ≠Êó∂Èó¥
   \   00000024   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000028   0x....             LDR.N    R1,??DataTable5_9  ;; 0x40037100
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     80          	PIT->CHANNEL[0].TFLG |= PIT_TFLG_TIF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable5_10  ;; 0x4003710c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000034   0x....             LDR.N    R1,??DataTable5_10  ;; 0x4003710c
   \   00000036   0x6008             STR      R0,[R1, #+0]
     81          	PIT->CHANNEL[0].TCTRL &= ~PIT_TCTRL_TEN_MASK;
   \   00000038   0x....             LDR.N    R0,??DataTable5_8  ;; 0x40037108
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x0840             LSRS     R0,R0,#+1
   \   0000003E   0x0040             LSLS     R0,R0,#+1
   \   00000040   0x....             LDR.N    R1,??DataTable5_8  ;; 0x40037108
   \   00000042   0x6008             STR      R0,[R1, #+0]
     82          	PIT->CHANNEL[0].TCTRL |= (0 | PIT_TCTRL_TEN_MASK);
   \   00000044   0x....             LDR.N    R0,??DataTable5_8  ;; 0x40037108
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000004C   0x....             LDR.N    R1,??DataTable5_8  ;; 0x40037108
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     83          }
   \   00000050   0x4770             BX       LR               ;; return
     84          

   \                                 In section .text, align 2, keep-with-next
     85          uint32 Time_Counter_Get(void)
     86          {
     87          	/* Timer count end */
     88          	uint32 val;
     89          	val = (~0) - PIT->CHANNEL[0].CVAL;
   \                     Time_Counter_Get: (+1)
   \   00000000   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000004   0x....             LDR.N    R1,??DataTable5_11  ;; 0x40037104
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x1A40             SUBS     R0,R0,R1
     90          	if (PIT->CHANNEL[0].TFLG & PIT_TFLG_TIF_MASK)
   \   0000000A   0x....             LDR.N    R1,??DataTable5_10  ;; 0x4003710c
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x07C9             LSLS     R1,R1,#+31
   \   00000010   0xD50E             BPL.N    ??Time_Counter_Get_0
     91          	{
     92          		PIT->CHANNEL[0].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000012   0x....             LDR.N    R0,??DataTable5_10  ;; 0x4003710c
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000001A   0x....             LDR.N    R1,??DataTable5_10  ;; 0x4003710c
   \   0000001C   0x6008             STR      R0,[R1, #+0]
     93          		PIT->CHANNEL[0].TCTRL &= ~PIT_TCTRL_TEN_MASK;
   \   0000001E   0x....             LDR.N    R0,??DataTable5_8  ;; 0x40037108
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0840             LSRS     R0,R0,#+1
   \   00000024   0x0040             LSLS     R0,R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable5_8  ;; 0x40037108
   \   00000028   0x6008             STR      R0,[R1, #+0]
     94          		return ~0;
   \   0000002A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002E   0xE003             B.N      ??Time_Counter_Get_1
     95          	}
     96          	if (val == (~0))
   \                     ??Time_Counter_Get_0: (+1)
   \   00000030   0xF110 0x0F01      CMN      R0,#+1
   \   00000034   0xD100             BNE.N    ??Time_Counter_Get_2
     97          	{
     98          		val--;              //Á°Æ‰øù ‰∏çÁ≠â‰∫é ~0
   \   00000036   0x1E40             SUBS     R0,R0,#+1
     99          	}
    100          	return val;
   \                     ??Time_Counter_Get_2: (+1)
   \                     ??Time_Counter_Get_1: (+1)
   \   00000038   0x4770             BX       LR               ;; return
    101          }
    102          

   \                                 In section .text, align 4, keep-with-next
    103          void Keybord_Delay(void)
    104          {
    105          	uint16 i, n;
    106          	for (i = 0; i<15000; i++)
   \                     Keybord_Delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??Keybord_Delay_0
    107          	{
    108          		for (n = 0; n<50; n++)
    109          		{
    110          			asm("nop");
   \                     ??Keybord_Delay_1: (+1)
   \   00000004   0xBF00             nop
    111          		}
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??Keybord_Delay_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x2932             CMP      R1,#+50
   \   0000000C   0xDBFA             BLT.N    ??Keybord_Delay_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??Keybord_Delay_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF643 0x2198      MOVW     R1,#+15000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??Keybord_Delay_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??Keybord_Delay_2
    112          	}
    113          }
   \                     ??Keybord_Delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
    114          

   \                                 In section .text, align 4, keep-with-next
    115          void Keyboard_Isr(void)
    116          {
   \                     Keyboard_Isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    117          	//Á°ÆÂÆö
    118          	if(LPLD_GPIO_IsPinxExt(PORTC, GPIO_Pin14))
   \   00000002   0x....             LDR.N    R0,??DataTable5_12  ;; 0x4004b0a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0440             LSLS     R0,R0,#+17
   \   00000008   0xD508             BPL.N    ??Keyboard_Isr_0
    119            	{
    120            		currentList = menuList[currentList].child;
   \   0000000A   0x....             LDR.N    R0,??DataTable5_13
   \   0000000C   0x....             LDR.N    R1,??DataTable5_14
   \   0000000E   0x7809             LDRB     R1,[R1, #+0]
   \   00000010   0x2214             MOVS     R2,#+20
   \   00000012   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000016   0x78C0             LDRB     R0,[R0, #+3]
   \   00000018   0x....             LDR.N    R1,??DataTable5_14
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    121            	}
    122          
    123            	//ËøîÂõû
    124            	if(LPLD_GPIO_IsPinxExt(PORTC, GPIO_Pin15))
   \                     ??Keyboard_Isr_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable5_12  ;; 0x4004b0a0
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x0400             LSLS     R0,R0,#+16
   \   00000022   0xD508             BPL.N    ??Keyboard_Isr_1
    125            	{
    126            		currentList = menuList[currentList].parent;
   \   00000024   0x....             LDR.N    R0,??DataTable5_13
   \   00000026   0x....             LDR.N    R1,??DataTable5_14
   \   00000028   0x7809             LDRB     R1,[R1, #+0]
   \   0000002A   0x2214             MOVS     R2,#+20
   \   0000002C   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000030   0x7880             LDRB     R0,[R0, #+2]
   \   00000032   0x....             LDR.N    R1,??DataTable5_14
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    127            	}
    128          
    129            	//Âêë‰∏ãÁøª
    130            	if(LPLD_GPIO_IsPinxExt(PORTD, GPIO_Pin10))
   \                     ??Keyboard_Isr_1: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable5_15  ;; 0x4004c0a0
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0540             LSLS     R0,R0,#+21
   \   0000003C   0xD508             BPL.N    ??Keyboard_Isr_2
    131          	{
    132          		currentList = menuList[currentList].next;
   \   0000003E   0x....             LDR.N    R0,??DataTable5_13
   \   00000040   0x....             LDR.N    R1,??DataTable5_14
   \   00000042   0x7809             LDRB     R1,[R1, #+0]
   \   00000044   0x2214             MOVS     R2,#+20
   \   00000046   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000004A   0x7840             LDRB     R0,[R0, #+1]
   \   0000004C   0x....             LDR.N    R1,??DataTable5_14
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
    133          	}
    134          
    135          	//ÂÄºÂáè
    136          	if(LPLD_GPIO_IsPinxExt(PORTD, GPIO_Pin11))
   \                     ??Keyboard_Isr_2: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable5_15  ;; 0x4004c0a0
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x0500             LSLS     R0,R0,#+20
   \   00000056   0xD503             BPL.N    ??Keyboard_Isr_3
    137          	{
    138          		Menu_Data_Decrease(currentList);
   \   00000058   0x....             LDR.N    R0,??DataTable5_14
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x.... 0x....      BL       Menu_Data_Decrease
    139          	}
    140          
    141          	//Âêë‰∏äÁøª
    142          	if(LPLD_GPIO_IsPinxExt(PORTD, GPIO_Pin12))
   \                     ??Keyboard_Isr_3: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable5_15  ;; 0x4004c0a0
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x04C0             LSLS     R0,R0,#+19
   \   00000066   0xD508             BPL.N    ??Keyboard_Isr_4
    143          	{
    144          		currentList = menuList[currentList].previous;
   \   00000068   0x....             LDR.N    R0,??DataTable5_13
   \   0000006A   0x....             LDR.N    R1,??DataTable5_14
   \   0000006C   0x7809             LDRB     R1,[R1, #+0]
   \   0000006E   0x2214             MOVS     R2,#+20
   \   00000070   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0x....             LDR.N    R1,??DataTable5_14
   \   00000078   0x7008             STRB     R0,[R1, #+0]
    145          	}
    146          
    147          	//ÂÄºÂ¢û
    148          	if(LPLD_GPIO_IsPinxExt(PORTD, GPIO_Pin13))
   \                     ??Keyboard_Isr_4: (+1)
   \   0000007A   0x....             LDR.N    R0,??DataTable5_15  ;; 0x4004c0a0
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x0480             LSLS     R0,R0,#+18
   \   00000080   0xD503             BPL.N    ??Keyboard_Isr_5
    149          	{
    150          		Menu_Data_Increase(currentList);
   \   00000082   0x....             LDR.N    R0,??DataTable5_14
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x.... 0x....      BL       Menu_Data_Increase
    151          	}
    152          	Menu_Show();
   \                     ??Keyboard_Isr_5: (+1)
   \   0000008A   0x.... 0x....      BL       Menu_Show
    153          }
   \   0000008E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x000A0003         DC32     0xa0003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x40037108         DC32     0x40037108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x40037100         DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x40037104         DC32     0x40037104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     menuList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     currentList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x4004C0A0         DC32     0x4004c0a0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   Keyboard_GPIO_Init
        32   -> LPLD_GPIO_EnableIrq
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       8   Keyboard_Isr
         8   -> Menu_Data_Decrease
         8   -> Menu_Data_Increase
         8   -> Menu_Show
       0   Keybord_Delay
      48   LED_Debuger_Init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       0   Time_Counter_Get
       0   Time_Counter_Start
      64   UART_Debuger_Init
        48   -> LPLD_UART_Init
        64   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     144  Keyboard_GPIO_Init
     144  Keyboard_Isr
      32  Keybord_Delay
      96  LED_Debuger_Init
      58  Time_Counter_Get
      82  Time_Counter_Start
      48  UART_Debuger_Init
       4  steerDebugDuty

 
   4 bytes in section .data
 668 bytes in section .text
 
 668 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
