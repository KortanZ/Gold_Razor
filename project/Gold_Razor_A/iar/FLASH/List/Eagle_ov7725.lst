###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        08/May/2016  17:35:42
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\Eagle_ov7725.c
#    Command line =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\Eagle_ov7725.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR EWARM\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR EWARM\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\Eagle_ov7725.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\Eagle_ov7725.o
#
###############################################################################

C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\Eagle_ov7725.c
      1          //#include "common.h"
      2          #include "Eagle_ov7725.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable7  ;; 0xe000e180
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
      3          #include "Eagle_ov7725_reg.h"
      4          /*OV7725初始化配置表*/

   \                                 In section .data, align 4
      5          reg_s ov7725_eagle_reg[] =
   \                     ov7725_eagle_reg:
   \   00000000   0x0D 0xC1          DC8 13, 193, 17, 0, 9, 3, 12, 208, 18, 64, 23, 63, 24, 80, 25, 3, 26
   \              0x11 0x00    
   \              0x09 0x03    
   \              0x0C 0xD0    
   \              0x12 0x40    
   \              0x17 0x3F    
   \              0x18 0x50    
   \              0x19 0x03    
   \              0x1A         
   \   00000011   0x78 0x32          DC8 120, 50, 0, 160, 10, 99, 224, 172, 255, 101, 12, 102, 0, 103, 0, 41
   \              0x00 0xA0    
   \              0x0A 0x63    
   \              0xE0 0xAC    
   \              0xFF 0x65    
   \              0x0C 0x66    
   \              0x00 0x67    
   \              0x00 0x29    
   \   00000021   0x28 0x2C          DC8 40, 44, 60, 42, 0, 126, 12, 127, 22, 128, 42, 129, 78, 130, 97, 131
   \              0x3C 0x2A    
   \              0x00 0x7E    
   \              0x0C 0x7F    
   \              0x16 0x80    
   \              0x2A 0x81    
   \              0x4E 0x82    
   \              0x61 0x83    
   \   00000031   0x6F 0x84          DC8 111, 132, 123, 133, 134, 134, 142, 135, 151, 136, 164, 137, 175
   \              0x7B 0x85    
   \              0x86 0x86    
   \              0x8E 0x87    
   \              0x97 0x88    
   \              0xA4 0x89    
   \              0xAF         
   \   0000003E   0x8A 0xC5          DC8 138, 197, 139, 215, 140, 232, 141, 32, 74, 0, 73, 19, 71, 8, 75, 20
   \              0x8B 0xD7    
   \              0x8C 0xE8    
   \              0x8D 0x20    
   \              0x4A 0x00    
   \              0x49 0x13    
   \              0x47 0x08    
   \              0x4B 0x14    
   \   0000004E   0x4C 0x17          DC8 76, 23, 70, 5, 34, 153, 35, 3, 166, 4, 155, 0, 156, 60, 171, 6, 158
   \              0x46 0x05    
   \              0x22 0x99    
   \              0x23 0x03    
   \              0xA6 0x04    
   \              0x9B 0x00    
   \              0x9C 0x3C    
   \              0xAB 0x06    
   \              0x9E         
   \   0000005F   0x11 0x9F          DC8 17, 159, 2, 0, 0
   \              0x02 0x00    
   \              0x00         
      6          {
      7              //寄存器，寄存器值次
      8              { OV7725_COM4, 0xC1 },   //PLL时钟设置:8x时钟   AEC设置:Full Window
      9              { OV7725_CLKRC, 0x00 },   //使用外部时钟
     10              { OV7725_COM2, 0x03 },   //配置输出驱动能力:4x驱动能力
     11              { OV7725_COM3, 0xD0 },   //7:垂直翻转开关 6:水平镜像开关
     12              { OV7725_COM7, 0x40 },   //SCCB : No Change
     13              { OV7725_HSTART, 0x3F },
     14              { OV7725_HSIZE, 0x50 },
     15              { OV7725_VSTRT, 0x03 },
     16              { OV7725_VSIZE, 0x78 },
     17              { OV7725_HREF, 0x00 },
     18              { OV7725_SCAL0, 0x0A },
     19              { OV7725_AWB_Ctrl0, 0xE0 },
     20              { OV7725_DSPAuto, 0xff },
     21              { OV7725_DSP_Ctrl2, 0x0C },
     22              { OV7725_DSP_Ctrl3, 0x00 },
     23              { OV7725_DSP_Ctrl4, 0x00 },
     24          
     25          #if (CAMERA_W == 80)
     26              { OV7725_HOutSize, 0x14 },
     27          #elif (CAMERA_W == 160)
     28              { OV7725_HOutSize, 0x28 },
     29          #elif (CAMERA_W == 240)
     30              { OV7725_HOutSize, 0x3c },
     31          #elif (CAMERA_W == 320)
     32              { OV7725_HOutSize, 0x50 },
     33          #else
     34          
     35          #endif
     36          
     37          #if (CAMERA_H == 60 )
     38              { OV7725_VOutSize, 0x1E },
     39          #elif (CAMERA_H == 120 )
     40              { OV7725_VOutSize, 0x3c },
     41          #elif (CAMERA_H == 180 )
     42              { OV7725_VOutSize, 0x5a },
     43          #elif (CAMERA_H == 240 )
     44              { OV7725_VOutSize, 0x78 },
     45          #else
     46          
     47          #endif
     48          
     49              { OV7725_EXHCH, 0x00 },
     50              { OV7725_GAM1, 0x0c },
     51              { OV7725_GAM2, 0x16 },
     52              { OV7725_GAM3, 0x2a },
     53              { OV7725_GAM4, 0x4e },
     54              { OV7725_GAM5, 0x61 },
     55              { OV7725_GAM6, 0x6f },
     56              { OV7725_GAM7, 0x7b },
     57              { OV7725_GAM8, 0x86 },
     58              { OV7725_GAM9, 0x8e },
     59              { OV7725_GAM10, 0x97 },
     60              { OV7725_GAM11, 0xa4 },
     61              { OV7725_GAM12, 0xaf },
     62              { OV7725_GAM13, 0xc5 },
     63              { OV7725_GAM14, 0xd7 },
     64              { OV7725_GAM15, 0xe8 },
     65              { OV7725_SLOP, 0x20 },
     66              { OV7725_LC_RADI, 0x00 },
     67              { OV7725_LC_COEF, 0x13 },
     68              { OV7725_LC_XC, 0x08 },
     69              { OV7725_LC_COEFB, 0x14 },
     70              { OV7725_LC_COEFR, 0x17 },
     71              { OV7725_LC_CTR, 0x05 },
     72              { OV7725_BDBase, 0x99 },
     73              { OV7725_BDMStep, 0x03 },
     74              { OV7725_SDE, 0x04 },
     75              { OV7725_BRIGHT, 0x00 },
     76              { OV7725_CNST, 0x3C },
     77              { OV7725_SIGN, 0x06 },
     78              { OV7725_UVADJ0, 0x11 },
     79              { OV7725_UVADJ1, 0x02 },
     80          
     81          };
     82          
     83          

   \                                 In section .data, align 1
     84          uint8 ov7725_eagle_cfgnum = ARR_SIZE(ov7725_eagle_reg); /*结构体数组成员数目*/
   \                     ov7725_eagle_cfgnum:
   \   00000000   0x31               DC8 49
     85          
     86          

   \                                 In section .bss, align 4
     87          uint8 imgbuff[CAMERA_SIZE];
   \                     imgbuff:
   \   00000000                      DS8 2400

   \                                 In section .bss, align 4
     88          uint8 img[CAMERA_H * CAMERA_W];
   \                     img:
   \   00000000                      DS8 19200

   \                                 In section .data, align 1
     89          uint8 ov7725_eagle_img_flag = IMG_FINISH;
   \                     ov7725_eagle_img_flag:
   \   00000000   0x01               DC8 1
     90          

   \                                 In section .text, align 2, keep-with-next
     91          uint8 Camera_init(void)
     92          {
   \                     Camera_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     93              while (ov7725_eagle_reg_init() == 0);
   \                     ??Camera_init_0: (+1)
   \   00000002   0x.... 0x....      BL       ov7725_eagle_reg_init
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD0FB             BEQ.N    ??Camera_init_0
     94              camera_delay();
   \   0000000A   0x.... 0x....      BL       camera_delay
     95          
     96          	GPIO_ov7725_init();
   \   0000000E   0x.... 0x....      BL       GPIO_ov7725_init
     97          	DMA_ov7725_init();
   \   00000012   0x.... 0x....      BL       DMA_ov7725_init
     98          
     99          
    100              return 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    101          }
    102          
    103          

   \                                 In section .text, align 2, keep-with-next
    104          uint8 ov7725_eagle_reg_init(void)
    105          {
   \                     ov7725_eagle_reg_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    106              uint16 i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    107              uint8 Sensor_IDCode = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    108              LPLD_SCCB_Init();
   \   0000000C   0x.... 0x....      BL       LPLD_SCCB_Init
    109              camera_delay();
   \   00000010   0x.... 0x....      BL       camera_delay
    110          
    111              if (0 == LPLD_SCCB_WriteReg(OV7725_COM7, 0x80))
   \   00000014   0x2180             MOVS     R1,#+128
   \   00000016   0x2012             MOVS     R0,#+18
   \   00000018   0x.... 0x....      BL       LPLD_SCCB_WriteReg
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD101             BNE.N    ??ov7725_eagle_reg_init_0
    112              {
    113                  //printf("\n Error!")
    114                  return 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE02A             B.N      ??ov7725_eagle_reg_init_1
    115              }
    116          
    117              camera_delay();
   \                     ??ov7725_eagle_reg_init_0: (+1)
   \   00000024   0x.... 0x....      BL       camera_delay
    118          
    119              if (0 == LPLD_SCCB_ReadReg(OV7725_VER, &Sensor_IDCode, 1))
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x200B             MOVS     R0,#+11
   \   0000002E   0x.... 0x....      BL       LPLD_SCCB_ReadReg
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD101             BNE.N    ??ov7725_eagle_reg_init_2
    120              {
    121                  //printf("\n Error!")
    122                  return 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE01F             B.N      ??ov7725_eagle_reg_init_1
    123              }
    124          
    125              if (Sensor_IDCode == OV7725_ID)
   \                     ??ov7725_eagle_reg_init_2: (+1)
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0x2821             CMP      R0,#+33
   \   00000040   0xD11A             BNE.N    ??ov7725_eagle_reg_init_3
    126              {
    127                  for (i = 0; i < ov7725_eagle_cfgnum; i++)
   \   00000042   0x2400             MOVS     R4,#+0
   \   00000044   0xE000             B.N      ??ov7725_eagle_reg_init_4
   \                     ??ov7725_eagle_reg_init_5: (+1)
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??ov7725_eagle_reg_init_4: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable7_1
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000004E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD20F             BCS.N    ??ov7725_eagle_reg_init_6
    128                  {
    129                      if (0 == LPLD_SCCB_WriteReg(ov7725_eagle_reg[i].addr, ov7725_eagle_reg[i].val))
   \   00000054   0x....             LDR.N    R0,??DataTable7_2
   \   00000056   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000058   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   0000005C   0x7841             LDRB     R1,[R0, #+1]
   \   0000005E   0x....             LDR.N    R0,??DataTable7_2
   \   00000060   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000062   0xF810 0x0014      LDRB     R0,[R0, R4, LSL #+1]
   \   00000066   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   0x.... 0x....      BL       LPLD_SCCB_WriteReg
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD1EA             BNE.N    ??ov7725_eagle_reg_init_5
    130                      {
    131                          //printf("\n Error!")
    132                          return 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0xE002             B.N      ??ov7725_eagle_reg_init_1
    133                      }
    134                  }
    135              }
    136              else
    137              {
    138                  return 0;
    139              }
    140              //printf("\n Successfully")
    141              return 1;
   \                     ??ov7725_eagle_reg_init_6: (+1)
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xE000             B.N      ??ov7725_eagle_reg_init_1
   \                     ??ov7725_eagle_reg_init_3: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??ov7725_eagle_reg_init_1: (+1)
   \   0000007A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    142          }
    143          

   \                                 In section .text, align 2, keep-with-next
    144          static void GPIO_ov7725_init(void)
    145          {
   \                     GPIO_ov7725_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    146              
    147              GPIO_InitTypeDef ov7725_gpio_init;
    148              /*------------ov7725数据IO初始化(PTB0_PTB7)-------------*/
    149              ov7725_gpio_init.GPIO_PTx = PTB;
   \   00000004   0x....             LDR.N    R0,??DataTable7_3  ;; 0x400ff040
   \   00000006   0x9001             STR      R0,[SP, #+4]
    150              ov7725_gpio_init.GPIO_Dir = DIR_INPUT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0010      STRB     R0,[SP, #+16]
    151              ov7725_gpio_init.GPIO_Pins = GPIO_Pin0_7;
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x9002             STR      R0,[SP, #+8]
    152          	ov7725_gpio_init.GPIO_Output = OUTPUT_L;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x0011      STRB     R0,[SP, #+17]
    153              ov7725_gpio_init.GPIO_PinControl = IRQC_DIS | INPUT_PULL_DIS;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9003             STR      R0,[SP, #+12]
    154              LPLD_GPIO_Init(ov7725_gpio_init);
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_GPIO_Init
    155              /*------------ov7725场信号IO初始化(PTA29)---------------*/
    156              ov7725_gpio_init.GPIO_PTx = PTA;
   \   0000002E   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400ff000
   \   00000030   0x9001             STR      R0,[SP, #+4]
    157              ov7725_gpio_init.GPIO_Dir = DIR_INPUT;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF88D 0x0010      STRB     R0,[SP, #+16]
    158              ov7725_gpio_init.GPIO_Pins = GPIO_Pin29;
   \   00000038   0xF05F 0x5000      MOVS     R0,#+536870912
   \   0000003C   0x9002             STR      R0,[SP, #+8]
    159              ov7725_gpio_init.GPIO_PinControl = IRQC_RI | INPUT_PULL_DOWN | INPUT_PF_EN;
   \   0000003E   0x....             LDR.N    R0,??DataTable7_5  ;; 0x90012
   \   00000040   0x9003             STR      R0,[SP, #+12]
    160              ov7725_gpio_init.GPIO_Isr = porta_isr;
   \   00000042   0x.... 0x....      ADR.W    R0,porta_isr
   \   00000046   0x9005             STR      R0,[SP, #+20]
    161              LPLD_GPIO_Init(ov7725_gpio_init);
   \   00000048   0xA901             ADD      R1,SP,#+4
   \   0000004A   0xB084             SUB      SP,SP,#+16
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x2214             MOVS     R2,#+20
   \   00000050   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000054   0xBC0F             POP      {R0-R3}
   \   00000056   0x.... 0x....      BL       LPLD_GPIO_Init
    162              /*------------ov7725_PCLK_IO初始化(PTA27)---------------*/
    163              ov7725_gpio_init.GPIO_PTx = PTA;
   \   0000005A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400ff000
   \   0000005C   0x9001             STR      R0,[SP, #+4]
    164              ov7725_gpio_init.GPIO_Pins = GPIO_Pin27;
   \   0000005E   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000062   0x9002             STR      R0,[SP, #+8]
    165              ov7725_gpio_init.GPIO_Dir = DIR_INPUT;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF88D 0x0010      STRB     R0,[SP, #+16]
    166              ov7725_gpio_init.GPIO_PinControl = IRQC_DMAFA | INPUT_PULL_DOWN;
   \   0000006A   0xF05F 0x1002      MOVS     R0,#+131074
   \   0000006E   0x9003             STR      R0,[SP, #+12]
    167              LPLD_GPIO_Init(ov7725_gpio_init);
   \   00000070   0xA901             ADD      R1,SP,#+4
   \   00000072   0xB084             SUB      SP,SP,#+16
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x2214             MOVS     R2,#+20
   \   00000078   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000007C   0xBC0F             POP      {R0-R3}
   \   0000007E   0x.... 0x....      BL       LPLD_GPIO_Init
    168          }
   \   00000082   0xB007             ADD      SP,SP,#+28
   \   00000084   0xBD00             POP      {PC}             ;; return
    169          
    170          

   \                                 In section .text, align 2, keep-with-next
    171          void DMA_ov7725_init(void)
    172          {
   \                     DMA_ov7725_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
    173          
    174              DMA_InitTypeDef dma_init_struct;
    175              //DMA参数配置
    176              dma_init_struct.DMA_CHx = DMA_CH0;    //CH0通道
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x001C      STRB     R0,[SP, #+28]
    177              dma_init_struct.DMA_Req = PORTA_DMAREQ;       //PORTA为请求源
   \   0000000A   0x2031             MOVS     R0,#+49
   \   0000000C   0xF88D 0x001D      STRB     R0,[SP, #+29]
    178              dma_init_struct.DMA_PeriodicTriggerEnable = FALSE;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x001E      STRB     R0,[SP, #+30]
    179              dma_init_struct.DMA_MajorLoopCnt = CAMERA_SIZE; //主循环计数值
   \   00000016   0xF44F 0x6016      MOV      R0,#+2400
   \   0000001A   0xF8AD 0x0020      STRH     R0,[SP, #+32]
    180              dma_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x9009             STR      R0,[SP, #+36]
    181              dma_init_struct.DMA_SourceDataSize = DMA_SRC_8BIT;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF88D 0x002C      STRB     R0,[SP, #+44]
    182              dma_init_struct.DMA_SourceAddr = (uint32)&PTB->PDIR;        //源地址：PTD8~15
   \   00000028   0x....             LDR.N    R0,??DataTable7_6  ;; 0x400ff050
   \   0000002A   0x900A             STR      R0,[SP, #+40]
    183              dma_init_struct.DMA_SourceAddrOffset = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF8AD 0x002E      STRH     R0,[SP, #+46]
    184              dma_init_struct.DMA_LastSourceAddrAdj = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x900C             STR      R0,[SP, #+48]
    185              dma_init_struct.DMA_DestAddr = (uint32)imgbuff;      //目的地址：存放图像的数组
   \   00000036   0x....             LDR.N    R0,??DataTable7_7
   \   00000038   0x900D             STR      R0,[SP, #+52]
    186              dma_init_struct.DMA_DestDataSize = DMA_DST_8BIT;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF88D 0x0038      STRB     R0,[SP, #+56]
    187              dma_init_struct.DMA_DestAddrOffset = 1;       //目的地址偏移：每次读入增加1
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xF8AD 0x003A      STRH     R0,[SP, #+58]
    188              dma_init_struct.DMA_LastDestAddrAdj = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x900F             STR      R0,[SP, #+60]
    189              dma_init_struct.DMA_AutoDisableReq = TRUE;    //自动禁用请求
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xF88D 0x0040      STRB     R0,[SP, #+64]
    190              dma_init_struct.DMA_MajorCompleteIntEnable = TRUE;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xF88D 0x0041      STRB     R0,[SP, #+65]
    191              dma_init_struct.DMA_MajorHalfCompleteIntEnable = FALSE;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xF88D 0x0042      STRB     R0,[SP, #+66]
    192              dma_init_struct.DMA_Isr = RazorDMA_Isr;
   \   0000005C   0x.... 0x....      ADR.W    R0,RazorDMA_Isr
   \   00000060   0x9011             STR      R0,[SP, #+68]
    193              //初始化DMA
    194              LPLD_DMA_Init(dma_init_struct);
   \   00000062   0xA907             ADD      R1,SP,#+28
   \   00000064   0xB084             SUB      SP,SP,#+16
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x222C             MOVS     R2,#+44
   \   0000006A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000006E   0xBC0F             POP      {R0-R3}
   \   00000070   0x.... 0x....      BL       LPLD_DMA_Init
    195              DMA0->INT |= 0x1u << 0;
   \   00000074   0x....             LDR.N    R0,??DataTable7_8  ;; 0x40008024
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000007C   0x....             LDR.N    R1,??DataTable7_8  ;; 0x40008024
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    196              LPLD_DMA_EnableIrq(dma_init_struct);
   \   00000080   0xA907             ADD      R1,SP,#+28
   \   00000082   0xB084             SUB      SP,SP,#+16
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x222C             MOVS     R2,#+44
   \   00000088   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000008C   0xBC0F             POP      {R0-R3}
   \   0000008E   0x.... 0x....      BL       LPLD_DMA_EnableIrq
    197          }
   \   00000092   0xB013             ADD      SP,SP,#+76
   \   00000094   0xBD00             POP      {PC}             ;; return
    198          
    199          

   \                                 In section .text, align 2, keep-with-next
    200          void vcan_sendimg(void *imgaddr, uint32_t imgsize)
    201          {
   \                     vcan_sendimg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    202          #define CMD_IMG     1
    203              int8 cmdf[2] = { CMD_IMG, ~CMD_IMG };    //山外上位机 使用的命令
   \   00000006   0x....             LDR.N    R0,??DataTable7_9
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    204              int8 cmdr[2] = { ~CMD_IMG, CMD_IMG };    //山外上位机 使用的命令
   \   0000000E   0x....             LDR.N    R0,??DataTable7_10
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    205          
    206              LPLD_UART_PutCharArr(UART2, cmdf, sizeof(cmdf));    //先发送命令
   \   00000016   0x2202             MOVS     R2,#+2
   \   00000018   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000001C   0x....             LDR.N    R0,??DataTable7_11  ;; 0x4006c000
   \   0000001E   0x.... 0x....      BL       LPLD_UART_PutCharArr
    207          
    208              LPLD_UART_PutCharArr(UART2, (int8 *)imgaddr, imgsize); //再发送图像
   \   00000022   0x002A             MOVS     R2,R5
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x....             LDR.N    R0,??DataTable7_11  ;; 0x4006c000
   \   00000028   0x.... 0x....      BL       LPLD_UART_PutCharArr
    209          
    210              LPLD_UART_PutCharArr(UART2, cmdr, sizeof(cmdr));    //先发送命令
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x....             LDR.N    R0,??DataTable7_11  ;; 0x4006c000
   \   00000032   0x.... 0x....      BL       LPLD_UART_PutCharArr
    211          }
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    212          void img_extract(void *dst, void *src, uint32 srclen)
    213          {
   \                     img_extract: (+1)
   \   00000000   0xB438             PUSH     {R3-R5}
    214              uint8 colour[2] = { 255, 0 }; //0 和 1 分别对应的颜色
   \   00000002   0x....             LDR.N    R3,??DataTable7_12
   \   00000004   0x881B             LDRH     R3,[R3, #+0]
   \   00000006   0xF8AD 0x3000      STRH     R3,[SP, #+0]
    215              uint8 * mdst = dst;
    216              uint8 * msrc = src;
   \   0000000A   0xE038             B.N      ??img_extract_0
    217              //注：山外的摄像头 0 表示 白色，1表示 黑色
    218              uint8 tmpsrc;
    219              while (srclen--)
    220              {
    221                  tmpsrc = *msrc++;
   \                     ??img_extract_1: (+1)
   \   0000000C   0x780B             LDRB     R3,[R1, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
    222                  *mdst++ = colour[(tmpsrc >> 7) & 0x01];
   \   00000010   0xAC00             ADD      R4,SP,#+0
   \   00000012   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000014   0x11DD             ASRS     R5,R3,#+7
   \   00000016   0x5D2C             LDRB     R4,[R5, R4]
   \   00000018   0x7004             STRB     R4,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
    223                  *mdst++ = colour[(tmpsrc >> 6) & 0x01];
   \   0000001C   0xAC00             ADD      R4,SP,#+0
   \   0000001E   0xF3C3 0x1580      UBFX     R5,R3,#+6,#+1
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x5D2C             LDRB     R4,[R5, R4]
   \   00000026   0x7004             STRB     R4,[R0, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
    224                  *mdst++ = colour[(tmpsrc >> 5) & 0x01];
   \   0000002A   0xAC00             ADD      R4,SP,#+0
   \   0000002C   0xF3C3 0x1540      UBFX     R5,R3,#+5,#+1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x5D2C             LDRB     R4,[R5, R4]
   \   00000034   0x7004             STRB     R4,[R0, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
    225                  *mdst++ = colour[(tmpsrc >> 4) & 0x01];
   \   00000038   0xAC00             ADD      R4,SP,#+0
   \   0000003A   0xF3C3 0x1500      UBFX     R5,R3,#+4,#+1
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x5D2C             LDRB     R4,[R5, R4]
   \   00000042   0x7004             STRB     R4,[R0, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
    226                  *mdst++ = colour[(tmpsrc >> 3) & 0x01];
   \   00000046   0xAC00             ADD      R4,SP,#+0
   \   00000048   0xF3C3 0x05C0      UBFX     R5,R3,#+3,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x5D2C             LDRB     R4,[R5, R4]
   \   00000050   0x7004             STRB     R4,[R0, #+0]
   \   00000052   0x1C40             ADDS     R0,R0,#+1
    227                  *mdst++ = colour[(tmpsrc >> 2) & 0x01];
   \   00000054   0xAC00             ADD      R4,SP,#+0
   \   00000056   0xF3C3 0x0580      UBFX     R5,R3,#+2,#+1
   \   0000005A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005C   0x5D2C             LDRB     R4,[R5, R4]
   \   0000005E   0x7004             STRB     R4,[R0, #+0]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
    228                  *mdst++ = colour[(tmpsrc >> 1) & 0x01];
   \   00000062   0xAC00             ADD      R4,SP,#+0
   \   00000064   0xF3C3 0x0540      UBFX     R5,R3,#+1,#+1
   \   00000068   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   0x5D2C             LDRB     R4,[R5, R4]
   \   0000006C   0x7004             STRB     R4,[R0, #+0]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
    229                  *mdst++ = colour[(tmpsrc >> 0) & 0x01];
   \   00000070   0xAC00             ADD      R4,SP,#+0
   \   00000072   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000074   0xF013 0x0301      ANDS     R3,R3,#0x1
   \   00000078   0x5D1B             LDRB     R3,[R3, R4]
   \   0000007A   0x7003             STRB     R3,[R0, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
    230              }
   \                     ??img_extract_0: (+1)
   \   0000007E   0x0013             MOVS     R3,R2
   \   00000080   0x1E5A             SUBS     R2,R3,#+1
   \   00000082   0x2B00             CMP      R3,#+0
   \   00000084   0xD1C2             BNE.N    ??img_extract_1
    231          }
   \   00000086   0xBC31             POP      {R0,R4,R5}
   \   00000088   0x4770             BX       LR               ;; return
    232          
    233          

   \                                 In section .text, align 4, keep-with-next
    234          void porta_isr(void)
    235          {
   \                     porta_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    236              if (LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin29))
   \   00000002   0x....             LDR.N    R0,??DataTable7_13  ;; 0x400490a0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0080             LSLS     R0,R0,#+2
   \   00000008   0xD521             BPL.N    ??porta_isr_0
    237              {
    238                  //场中断需要判断是场结束还是场开始
    239                  if (ov7725_eagle_img_flag == IMG_START)                   //需要开始采集图像
   \   0000000A   0x....             LDR.N    R0,??DataTable7_14
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD117             BNE.N    ??porta_isr_1
    240                  {
    241                      ov7725_eagle_img_flag = IMG_GATHER;                  //标记图像采集中
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x....             LDR.N    R1,??DataTable7_14
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    242                      disable_irq(PORTA_IRQn);
   \   00000018   0x2057             MOVS     R0,#+87
   \   0000001A   0x.... 0x....      BL       NVIC_DisableIRQ
    243                      PORTA->ISFR = 1 << 27;            //清空PCLK标志位
   \   0000001E   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000022   0x....             LDR.N    R1,??DataTable7_13  ;; 0x400490a0
   \   00000024   0x6008             STR      R0,[R1, #+0]
    244                      DMA0->ERQ |= DMA_ERQ_ERQ0_MASK << 0;
   \   00000026   0x....             LDR.N    R0,??DataTable7_15  ;; 0x4000800c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000002E   0x....             LDR.N    R1,??DataTable7_15  ;; 0x4000800c
   \   00000030   0x6008             STR      R0,[R1, #+0]
    245                      PORTA->ISFR = 1 << 27;            //清空PCLK标志位
   \   00000032   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000036   0x....             LDR.N    R1,??DataTable7_13  ;; 0x400490a0
   \   00000038   0x6008             STR      R0,[R1, #+0]
    246                      DMA0->TCD[0].DADDR = DMA_DADDR_DADDR(imgbuff);
   \   0000003A   0x....             LDR.N    R0,??DataTable7_7
   \   0000003C   0x....             LDR.N    R1,??DataTable7_16  ;; 0x40009010
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0xE005             B.N      ??porta_isr_0
    247                  }
    248                  else
    249                  {
    250                      disable_irq(PORTA_IRQn);
   \                     ??porta_isr_1: (+1)
   \   00000042   0x2057             MOVS     R0,#+87
   \   00000044   0x.... 0x....      BL       NVIC_DisableIRQ
    251                      ov7725_eagle_img_flag = IMG_FAIL;
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x....             LDR.N    R1,??DataTable7_14
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    252                  }
    253              }
    254          }
   \                     ??porta_isr_0: (+1)
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
    255          

   \                                 In section .text, align 4, keep-with-next
    256          void RazorDMA_Isr(void)
    257          {
    258              ov7725_eagle_img_flag = IMG_FINISH;
   \                     RazorDMA_Isr: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable7_14
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    259          
    260              //img_extract(img, imgbuff, CAMERA_SIZE);
    261              //imgEdge(img);
    262              //vcan_sendimg(imgbuff, CAMERA_SIZE);
    263              //vcan_sendimg(img, CAMERA_W * CAMERA_H);                  //发送到上位机
    264              DMA0->INT |= 0x1u << 0;
   \   00000006   0x....             LDR.N    R0,??DataTable7_8  ;; 0x40008024
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000E   0x....             LDR.N    R1,??DataTable7_8  ;; 0x40008024
   \   00000010   0x6008             STR      R0,[R1, #+0]
    265          }
   \   00000012   0x4770             BX       LR               ;; return
    266          

   \                                 In section .text, align 4, keep-with-next
    267          void camera_delay(void)
    268          {
    269              uint16 i, n;
    270              for (i = 0; i<30000; i++)
   \                     camera_delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??camera_delay_0
    271              {
    272                  for (n = 0; n<200; n++)
    273                  {
    274                      asm("nop");
   \                     ??camera_delay_1: (+1)
   \   00000004   0xBF00             nop
    275                  }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??camera_delay_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x29C8             CMP      R1,#+200
   \   0000000C   0xDBFA             BLT.N    ??camera_delay_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??camera_delay_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF247 0x5130      MOVW     R1,#+30000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??camera_delay_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??camera_delay_2
    276              }
    277          }
   \                     ??camera_delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     ov7725_eagle_cfgnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     ov7725_eagle_reg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x00090012         DC32     0x90012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x400FF050         DC32     0x400ff050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     imgbuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     ov7725_eagle_img_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0x01 0xFE          DC8 1, -2

   \                                 In section .rodata, align 2
   \                     ?_1:
   \   00000000   0xFE 0x01          DC8 -2, 1

   \                                 In section .rodata, align 2
   \                     ?_2:
   \   00000000   0xFF 0x00          DC8 255, 0
    278          
    279          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Camera_init
         8   -> DMA_ov7725_init
         8   -> GPIO_ov7725_init
         8   -> camera_delay
         8   -> ov7725_eagle_reg_init
      96   DMA_ov7725_init
        80   -> LPLD_DMA_EnableIrq
        80   -> LPLD_DMA_Init
        96   -> __aeabi_memcpy4
      48   GPIO_ov7725_init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       0   NVIC_DisableIRQ
       0   RazorDMA_Isr
       0   camera_delay
      12   img_extract
      16   ov7725_eagle_reg_init
        16   -> LPLD_SCCB_Init
        16   -> LPLD_SCCB_ReadReg
        16   -> LPLD_SCCB_WriteReg
        16   -> camera_delay
       8   porta_isr
         8   -> NVIC_DisableIRQ
      16   vcan_sendimg
        16   -> LPLD_UART_PutCharArr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       2  ?_0
       2  ?_1
       2  ?_2
      26  Camera_init
     150  DMA_ov7725_init
     134  GPIO_ov7725_init
      20  NVIC_DisableIRQ
      20  RazorDMA_Isr
      32  camera_delay
   19200  img
     138  img_extract
    2400  imgbuff
       1  ov7725_eagle_cfgnum
       1  ov7725_eagle_img_flag
     100  ov7725_eagle_reg
     124  ov7725_eagle_reg_init
      80  porta_isr
      56  vcan_sendimg

 
 21 600 bytes in section .bss
    102 bytes in section .data
      6 bytes in section .rodata
    848 bytes in section .text
 
    848 bytes of CODE  memory
      6 bytes of CONST memory
 21 702 bytes of DATA  memory

Errors: none
Warnings: none
