###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        11/May/2016  19:10:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\SequenceCtrl.c
#    Command line =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\SequenceCtrl.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\SequenceCtrl.lst
#    Object file  =  
#        E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\SequenceCtrl.o
#
###############################################################################

E:\11ΩÏFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\SequenceCtrl.c
      1          /*
      2          *ËØ•‰ª£Á†ÅÊèê‰æõÊó∂‰∏≠Êñ≠‰ºòÂÖàÁ∫ßÂàùÂßãÂåñÂáΩÊï∞
      3          *Êèê‰æõÊó∂Â∫èÊéßÂà∂ÂàùÂßãÂåñÂíåÊ†∏ÂøÉÊéßÂà∂ÂáΩÊï∞
      4          */
      5          
      6          #include "SequenceCtrl.h"
      7          #include "ImgProcess.h"
      8          #include "EncoderDriver.h"
      9          #include "MotorDriver.h"
     10          #include "SteerDriver.h"
     11          #include "DebugerDriver.h"
     12          #include "Oled.h"
     13          #include "PID.h"
     14          

   \                                 In section .bss, align 1
     15          uint8 pitCounter=0; //Êó∂Â∫èÊéßÂà∂ÂèòÈáè
   \                     pitCounter:
   \   00000000                      DS8 1
     16          
     17          /*     process functiong declare   */
     18          void First_Process(void);
     19          void Second_Process(void);
     20          void Thrid_Process(void);
     21          
     22          /*Êó∂Â∫èÊéßÂà∂PITÂàùÂßãÂåñ*/
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void MainCtrl_Pit_Init(void)
     25          {
   \                     MainCtrl_Pit_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     26          
     27          	PIT_InitTypeDef pit3_init_struct;
     28          	//ÈÖçÁΩÆPIT3ÂèÇÊï∞
     29          	pit3_init_struct.PIT_Pitx = PIT3;
   \   00000004   0x2003             MOVS     R0,#+3
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
     30          	pit3_init_struct.PIT_PeriodMs = 1;//ÂÆöÊó∂Âë®Êúü
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x9003             STR      R0,[SP, #+12]
     31          	pit3_init_struct.PIT_PeriodUs = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9002             STR      R0,[SP, #+8]
     32          	pit3_init_struct.PIT_PeriodS = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9004             STR      R0,[SP, #+16]
     33          	pit3_init_struct.PIT_Isr = Main_Isr;  //ËÆæÁΩÆ‰∏≠Êñ≠ÂáΩÊï∞
   \   00000016   0x.... 0x....      ADR.W    R0,Main_Isr
   \   0000001A   0x9005             STR      R0,[SP, #+20]
     34          	//ÂàùÂßãÂåñPIT3
     35          	LPLD_PIT_Init(pit3_init_struct);
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_PIT_Init
     36          	LPLD_PIT_EnableIrq(pit3_init_struct);
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0xB084             SUB      SP,SP,#+16
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x2214             MOVS     R2,#+20
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003A   0xBC0F             POP      {R0-R3}
   \   0000003C   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     37          }
   \   00000040   0xB007             ADD      SP,SP,#+28
   \   00000042   0xBD00             POP      {PC}             ;; return
     38          
     39          
     40          /*‰∏≠Êñ≠‰ºòÂÖàÁ∫ßÂàùÂßãÂåñ*/
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void NVIC_Init(void)
     43          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     44          	NVIC_InitTypeDef nvic_init_struct;
     45          
     46          	//ÈÖçÁΩÆPIT3ÁöÑNVICÂàÜÁªÑ
     47          	nvic_init_struct.NVIC_IRQChannel = PIT3_IRQn;
   \   00000004   0x2047             MOVS     R0,#+71
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
     48          	nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_3;
   \   0000000A   0x2004             MOVS     R0,#+4
   \   0000000C   0x9002             STR      R0,[SP, #+8]
     49          	nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 3;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x9003             STR      R0,[SP, #+12]
     50          	nvic_init_struct.NVIC_IRQChannelSubPriority = 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x9004             STR      R0,[SP, #+16]
     51          	nvic_init_struct.NVIC_IRQChannelEnable = FALSE;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0014      STRB     R0,[SP, #+20]
     52          	LPLD_NVIC_Init(nvic_init_struct);
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_NVIC_Init
     53          	//ÈÖçÁΩÆKey_IsrÁöÑNVICÂàÜÁªÑ
     54          	nvic_init_struct.NVIC_IRQChannel = PORTC_IRQn;
   \   0000002E   0x2059             MOVS     R0,#+89
   \   00000030   0xF88D 0x0004      STRB     R0,[SP, #+4]
     55          	nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_3;
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0x9002             STR      R0,[SP, #+8]
     56          	nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 2;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x9003             STR      R0,[SP, #+12]
     57          	nvic_init_struct.NVIC_IRQChannelSubPriority = 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9004             STR      R0,[SP, #+16]
     58          	nvic_init_struct.NVIC_IRQChannelEnable = FALSE;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF88D 0x0014      STRB     R0,[SP, #+20]
     59          	LPLD_NVIC_Init(nvic_init_struct);
   \   00000046   0xA901             ADD      R1,SP,#+4
   \   00000048   0xB084             SUB      SP,SP,#+16
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x2214             MOVS     R2,#+20
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000052   0xBC0F             POP      {R0-R3}
   \   00000054   0x.... 0x....      BL       LPLD_NVIC_Init
     60          
     61          	nvic_init_struct.NVIC_IRQChannel = PORTD_IRQn;
   \   00000058   0x205A             MOVS     R0,#+90
   \   0000005A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     62          	nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_3;
   \   0000005E   0x2004             MOVS     R0,#+4
   \   00000060   0x9002             STR      R0,[SP, #+8]
     63          	nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 2;
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x9003             STR      R0,[SP, #+12]
     64          	nvic_init_struct.NVIC_IRQChannelSubPriority = 0;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x9004             STR      R0,[SP, #+16]
     65          	nvic_init_struct.NVIC_IRQChannelEnable = FALSE;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF88D 0x0014      STRB     R0,[SP, #+20]
     66          	LPLD_NVIC_Init(nvic_init_struct);
   \   00000070   0xA901             ADD      R1,SP,#+4
   \   00000072   0xB084             SUB      SP,SP,#+16
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x2214             MOVS     R2,#+20
   \   00000078   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000007C   0xBC0F             POP      {R0-R3}
   \   0000007E   0x.... 0x....      BL       LPLD_NVIC_Init
     67          	//ÈÖçÁΩÆPORTAÁöÑNVICÂàÜÁªÑ
     68          	nvic_init_struct.NVIC_IRQChannel = PORTA_IRQn;
   \   00000082   0x2057             MOVS     R0,#+87
   \   00000084   0xF88D 0x0004      STRB     R0,[SP, #+4]
     69          	nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_3;
   \   00000088   0x2004             MOVS     R0,#+4
   \   0000008A   0x9002             STR      R0,[SP, #+8]
     70          	nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 1;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x9003             STR      R0,[SP, #+12]
     71          	nvic_init_struct.NVIC_IRQChannelSubPriority = 1;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x9004             STR      R0,[SP, #+16]
     72          	nvic_init_struct.NVIC_IRQChannelEnable = FALSE;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xF88D 0x0014      STRB     R0,[SP, #+20]
     73          	LPLD_NVIC_Init(nvic_init_struct);
   \   0000009A   0xA901             ADD      R1,SP,#+4
   \   0000009C   0xB084             SUB      SP,SP,#+16
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x2214             MOVS     R2,#+20
   \   000000A2   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000A6   0xBC0F             POP      {R0-R3}
   \   000000A8   0x.... 0x....      BL       LPLD_NVIC_Init
     74          	//ÈÖçÁΩÆDMA0ÁöÑNVICÂàÜÁªÑ
     75          	nvic_init_struct.NVIC_IRQChannel = DMA0_IRQn;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xF88D 0x0004      STRB     R0,[SP, #+4]
     76          	nvic_init_struct.NVIC_IRQChannelGroupPriority = NVIC_PriorityGroup_3;
   \   000000B2   0x2004             MOVS     R0,#+4
   \   000000B4   0x9002             STR      R0,[SP, #+8]
     77          	nvic_init_struct.NVIC_IRQChannelPreemptionPriority = 0;
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x9003             STR      R0,[SP, #+12]
     78          	nvic_init_struct.NVIC_IRQChannelSubPriority = 1;
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x9004             STR      R0,[SP, #+16]
     79          	nvic_init_struct.NVIC_IRQChannelEnable = FALSE;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xF88D 0x0014      STRB     R0,[SP, #+20]
     80          	LPLD_NVIC_Init(nvic_init_struct);
   \   000000C4   0xA901             ADD      R1,SP,#+4
   \   000000C6   0xB084             SUB      SP,SP,#+16
   \   000000C8   0x4668             MOV      R0,SP
   \   000000CA   0x2214             MOVS     R2,#+20
   \   000000CC   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000D0   0xBC0F             POP      {R0-R3}
   \   000000D2   0x.... 0x....      BL       LPLD_NVIC_Init
     81          
     82          }
   \   000000D6   0xB007             ADD      SP,SP,#+28
   \   000000D8   0xBD00             POP      {PC}             ;; return
     83          
     84          /*Êó∂Â∫èÊéßÂà∂Ê†∏ÂøÉÂáΩÊï∞*/
     85          

   \                                 In section .text, align 4, keep-with-next
     86          void Main_Isr(void)
     87          {
   \                     Main_Isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     88          	switch(++pitCounter)
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable2
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
   \   0000000C   0x....             LDR.N    R0,??DataTable2
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD002             BEQ.N    ??Main_Isr_0
   \   00000014   0x280F             CMP      R0,#+15
   \   00000016   0xD003             BEQ.N    ??Main_Isr_1
   \   00000018   0xE004             B.N      ??Main_Isr_2
     89          	{
     90          		case 1 : First_Process();break;
   \                     ??Main_Isr_0: (+1)
   \   0000001A   0x.... 0x....      BL       First_Process
   \   0000001E   0xE001             B.N      ??Main_Isr_2
     91          
     92          		case 15 : Second_Process(); break;
   \                     ??Main_Isr_1: (+1)
   \   00000020   0x.... 0x....      BL       Second_Process
     93          	}
     94          }
   \                     ??Main_Isr_2: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     95          
     96          /*    process function prototype     */

   \                                 In section .text, align 2, keep-with-next
     97          void First_Process(void)
     98          {
   \                     First_Process: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     99          	Get_Img();
   \   00000002   0x.... 0x....      BL       Get_Img
    100              //vcan_sendimg(imgbuff, CAMERA_SIZE);
    101          	Get_MidLine();
   \   00000006   0x.... 0x....      BL       Get_MidLine
    102          	OLED_ShowString(0,0,"MidAve");
   \   0000000A   0x....             LDR.N    R2,??DataTable2_1
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       OLED_ShowString
    103          	OLED_ShowNum(70,0,MidAve,3);
   \   00000014   0x2303             MOVS     R3,#+3
   \   00000016   0x....             LDR.N    R0,??DataTable2_2
   \   00000018   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x2046             MOVS     R0,#+70
   \   00000020   0x.... 0x....      BL       OLED_ShowNum
    104          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    105          void Second_Process(void)
    106          {
   \                     Second_Process: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    107          	int16 leftPulse, rightPulse;
    108          
    109          	pitCounter=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable2
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    110          
    111          	leftPulse = Encoder_GetPulseNum(ENCODER_LEFT);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       Encoder_GetPulseNum
   \   0000000E   0x0005             MOVS     R5,R0
    112          	rightPulse = Encoder_GetPulseNum(ENCODER_RIGHT);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       Encoder_GetPulseNum
   \   00000016   0x0006             MOVS     R6,R0
    113          
    114          	if(leftPulse < 0)
   \   00000018   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD501             BPL.N    ??Second_Process_0
    115          		rightPulse = -rightPulse;
   \   0000001E   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000020   0x4276             RSBS     R6,R6,#+0
    116          
    117          	Steer_Controller(steerCtrler , \
    118          					 STEER_MIDVALUE , \
    119          					 MidAve);
   \                     ??Second_Process_0: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable2_2
   \   00000024   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000028   0x.... 0x....      BL       __aeabi_i2f
   \   0000002C   0x0002             MOVS     R2,R0
   \   0000002E   0x....             LDR.N    R1,??DataTable2_3  ;; 0x42a00000
   \   00000030   0x....             LDR.N    R0,??DataTable2_4
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       Steer_Controller
    120          
    121          	Speed_Controller(speedCtrler, \
    122          					 PWM_To_Pulse(PWM_Expect), \
    123          					 (leftPulse + rightPulse) / 2.0);
   \   00000038   0x....             LDR.N    R0,??DataTable2_5
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x.... 0x....      BL       PWM_To_Pulse
   \   00000040   0x0004             MOVS     R4,R0
   \   00000042   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000044   0xFA06 0xF085      SXTAH    R0,R6,R5
   \   00000048   0x.... 0x....      BL       __aeabi_i2d
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0xF05F 0x4380      MOVS     R3,#+1073741824
   \   00000052   0x.... 0x....      BL       __aeabi_ddiv
   \   00000056   0x.... 0x....      BL       __aeabi_d2f
   \   0000005A   0x0002             MOVS     R2,R0
   \   0000005C   0x0021             MOVS     R1,R4
   \   0000005E   0x....             LDR.N    R0,??DataTable2_6
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x.... 0x....      BL       Speed_Controller
    124          }
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    125          void Third_Process(void)
    126          {
    127          
    128          }
   \                     Third_Process: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     pitCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     MidAve

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x42A00000         DC32     0x42a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     steerCtrler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     PWM_Expect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     speedCtrler

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x4D 0x69          DC8 "MidAve"
   \              0x64 0x41    
   \              0x76 0x65    
   \              0x00         
   \   00000007   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   First_Process
         8   -> Get_Img
         8   -> Get_MidLine
         8   -> OLED_ShowNum
         8   -> OLED_ShowString
      48   MainCtrl_Pit_Init
        32   -> LPLD_PIT_EnableIrq
        32   -> LPLD_PIT_Init
        48   -> __aeabi_memcpy4
       8   Main_Isr
         8   -> First_Process
         8   -> Second_Process
      48   NVIC_Init
        32   -> LPLD_NVIC_Init
        48   -> __aeabi_memcpy4
      16   Second_Process
        16   -> Encoder_GetPulseNum
        16   -> PWM_To_Pulse
        16   -> Speed_Controller
        16   -> Steer_Controller
        16   -> __aeabi_d2f
        16   -> __aeabi_ddiv
        16   -> __aeabi_i2d
        16   -> __aeabi_i2f
       0   Third_Process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       8  ?_0
      38  First_Process
      68  MainCtrl_Pit_Init
      38  Main_Isr
     218  NVIC_Init
     104  Second_Process
       2  Third_Process
       1  pitCounter

 
   1 byte  in section .bss
   8 bytes in section .rodata
 496 bytes in section .text
 
 496 bytes of CODE  memory
   8 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
