###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        11/May/2016  19:10:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\PID.c
#    Command line =  
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\PID.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
#    List file    =  
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\PID.lst
#    Object file  =  
#        E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\PID.o
#
###############################################################################

E:\11½ìFreescale\Gold_Razor_A\Gold_Razor_A\project\Gold_Razor_A\app\Source\PID.c
      1          //#include "common.h"
      2          #include "PID.h"
      3          #include "Oled.h"
      4          #include "Menu.h"
      5          #include "MotorDriver.h"
      6          #include "ImgProcess.h"
      7          #include "SteerDriver.h"
      8          
      9          float32 Differ_Controller(PIDStruct *, float32 , float32 );
     10          

   \                                 In section .bss, align 4
     11          PIDStruct *speedCtrler;
   \                     speedCtrler:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     12          PIDStruct *steerCtrler;
   \                     steerCtrler:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     13          PIDStruct *differCtrler;
   \                     differCtrler:
   \   00000000                      DS8 4
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void Speed_Controller(PIDStruct *motorCtrler, float32 expect, float32 real)
     16          {
   \                     Speed_Controller: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x0011             MOVS     R1,R2
     17          	float32 PWMoutput_1 , PWMoutput_2;
     18          	/* previous difference PID */
     19          
     20          	float32 incrementU;
     21          
     22          	motorCtrler -> error[0] = expect - real;
   \   00000008   0x.... 0x....      BL       __aeabi_fsub
   \   0000000C   0x60E0             STR      R0,[R4, #+12]
     23          
     24          	incrementU = (motorCtrler -> Kp) * ((motorCtrler -> error[0]) - (motorCtrler -> error[1]))
     25          					 + (motorCtrler -> Ki) * (motorCtrler -> error[0]) + (motorCtrler -> Kd)
     26          					 * ((motorCtrler -> u[0]) - 2 * (motorCtrler -> u[1]) + (motorCtrler -> u[2]))
     27          					 - (motorCtrler -> Kd) * ((motorCtrler -> u[0]) - (motorCtrler -> u[1]));
   \   0000000E   0x68E0             LDR      R0,[R4, #+12]
   \   00000010   0x6921             LDR      R1,[R4, #+16]
   \   00000012   0x.... 0x....      BL       __aeabi_fsub
   \   00000016   0x6821             LDR      R1,[R4, #+0]
   \   00000018   0x.... 0x....      BL       __aeabi_fmul
   \   0000001C   0x0005             MOVS     R5,R0
   \   0000001E   0x68A1             LDR      R1,[R4, #+8]
   \   00000020   0x68E0             LDR      R0,[R4, #+12]
   \   00000022   0x.... 0x....      BL       __aeabi_fmul
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x0005             MOVS     R5,R0
   \   0000002E   0x69E1             LDR      R1,[R4, #+28]
   \   00000030   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000034   0x.... 0x....      BL       __aeabi_fmul
   \   00000038   0x0001             MOVS     R1,R0
   \   0000003A   0x69A0             LDR      R0,[R4, #+24]
   \   0000003C   0x.... 0x....      BL       __aeabi_fsub
   \   00000040   0x6A21             LDR      R1,[R4, #+32]
   \   00000042   0x.... 0x....      BL       __aeabi_fadd
   \   00000046   0x6861             LDR      R1,[R4, #+4]
   \   00000048   0x.... 0x....      BL       __aeabi_fmul
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x.... 0x....      BL       __aeabi_fadd
   \   00000052   0x0005             MOVS     R5,R0
   \   00000054   0x69E0             LDR      R0,[R4, #+28]
   \   00000056   0x69A1             LDR      R1,[R4, #+24]
   \   00000058   0x.... 0x....      BL       __aeabi_fsub
   \   0000005C   0x6861             LDR      R1,[R4, #+4]
   \   0000005E   0x.... 0x....      BL       __aeabi_fmul
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0x.... 0x....      BL       __aeabi_fadd
   \   00000068   0x0005             MOVS     R5,R0
     28          
     29          	/* anti-windup */
     30          
     31          	if ((motorCtrler -> u[1]) > U_MAX || (motorCtrler -> u[1]) < -U_MAX)
   \   0000006A   0x69E0             LDR      R0,[R4, #+28]
   \   0000006C   0x....             LDR.N    R1,??DataTable5  ;; 0x45960001
   \   0000006E   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000072   0xD904             BLS.N    ??Speed_Controller_0
   \   00000074   0x69E0             LDR      R0,[R4, #+28]
   \   00000076   0x....             LDR.N    R1,??DataTable5_1  ;; 0xc5960000
   \   00000078   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000007C   0xD208             BCS.N    ??Speed_Controller_1
     32          	{
     33          		incrementU -= (motorCtrler -> Ki) * (motorCtrler -> error[0]);
   \                     ??Speed_Controller_0: (+1)
   \   0000007E   0x68A1             LDR      R1,[R4, #+8]
   \   00000080   0x68E0             LDR      R0,[R4, #+12]
   \   00000082   0x.... 0x....      BL       __aeabi_fmul
   \   00000086   0x0001             MOVS     R1,R0
   \   00000088   0x0028             MOVS     R0,R5
   \   0000008A   0x.... 0x....      BL       __aeabi_fsub
   \   0000008E   0x0005             MOVS     R5,R0
     34          	}
     35          
     36          	motorCtrler -> u[0] = (motorCtrler -> u[1]) + incrementU;
   \                     ??Speed_Controller_1: (+1)
   \   00000090   0x69E0             LDR      R0,[R4, #+28]
   \   00000092   0x0029             MOVS     R1,R5
   \   00000094   0x.... 0x....      BL       __aeabi_fadd
   \   00000098   0x61A0             STR      R0,[R4, #+24]
     37          
     38          	motorCtrler -> u[2] = motorCtrler -> u[1];
   \   0000009A   0x69E0             LDR      R0,[R4, #+28]
   \   0000009C   0x6220             STR      R0,[R4, #+32]
     39          	motorCtrler -> u[1] = motorCtrler -> u[0];
   \   0000009E   0x69A0             LDR      R0,[R4, #+24]
   \   000000A0   0x61E0             STR      R0,[R4, #+28]
     40          	motorCtrler -> error[1] = motorCtrler -> error[0];
   \   000000A2   0x68E0             LDR      R0,[R4, #+12]
   \   000000A4   0x6120             STR      R0,[R4, #+16]
     41          
     42          	/*          Differ PID Control  Block      */
     43          	float32 Differ_Temp = 0;
   \   000000A6   0x2600             MOVS     R6,#+0
     44          	Differ_Temp = Differ_Controller(differCtrler , \
     45          					 				STEER_MIDVALUE , \
     46          	 				 				MidAve);
   \   000000A8   0x....             LDR.N    R0,??DataTable5_2
   \   000000AA   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000000AE   0x.... 0x....      BL       __aeabi_i2f
   \   000000B2   0x0002             MOVS     R2,R0
   \   000000B4   0x....             LDR.N    R1,??DataTable5_3  ;; 0x42a00000
   \   000000B6   0x....             LDR.N    R0,??DataTable5_4
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x.... 0x....      BL       Differ_Controller
   \   000000BE   0x0006             MOVS     R6,R0
     47          	PWMoutput_1 = motorCtrler -> u[0] + Differ_Temp;
   \   000000C0   0x69A0             LDR      R0,[R4, #+24]
   \   000000C2   0x0031             MOVS     R1,R6
   \   000000C4   0x.... 0x....      BL       __aeabi_fadd
   \   000000C8   0x0005             MOVS     R5,R0
     48          	PWMoutput_2 = motorCtrler -> u[0] - Differ_Temp;
   \   000000CA   0x69A0             LDR      R0,[R4, #+24]
   \   000000CC   0x0031             MOVS     R1,R6
   \   000000CE   0x.... 0x....      BL       __aeabi_fsub
   \   000000D2   0x0004             MOVS     R4,R0
     49          
     50          
     51          	Motor_Duty_Change(MOTOR_LEFT, (int32)PulseNum_To_PWM(PWMoutput_1));
   \   000000D4   0x0028             MOVS     R0,R5
   \   000000D6   0x.... 0x....      BL       PulseNum_To_PWM
   \   000000DA   0x.... 0x....      BL       __aeabi_f2iz
   \   000000DE   0x0001             MOVS     R1,R0
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      BL       Motor_Duty_Change
     52          	Motor_Duty_Change(MOTOR_RIGHT, (int32)PulseNum_To_PWM(PWMoutput_2));
   \   000000E6   0x0020             MOVS     R0,R4
   \   000000E8   0x.... 0x....      BL       PulseNum_To_PWM
   \   000000EC   0x.... 0x....      BL       __aeabi_f2iz
   \   000000F0   0x0001             MOVS     R1,R0
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x.... 0x....      BL       Motor_Duty_Change
     53          }
   \   000000F8   0xBD70             POP      {R4-R6,PC}       ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void SpeedCtrler_Init(void)
     56          {
   \                     SpeedCtrler_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     57          	/* Initial PID speedCtrler */
     58          	int8 i;
     59          
     60          	speedCtrler = (PIDStruct *)malloc(sizeof(PIDStruct));
   \   00000002   0x2024             MOVS     R0,#+36
   \   00000004   0x.... 0x....      BL       malloc
   \   00000008   0x....             LDR.N    R1,??DataTable5_5
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     61          
     62          	if (NULL == speedCtrler)
   \   0000000C   0x....             LDR.N    R0,??DataTable5_5
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD108             BNE.N    ??SpeedCtrler_Init_0
     63          	{
     64          		printf("Memory alloc faild!\n");
   \   00000014   0x....             LDR.N    R0,??DataTable5_6
   \   00000016   0x.... 0x....      BL       printf
     65          		OLED_ShowString(0, 5, "Memory alloc faild!");
   \   0000001A   0x....             LDR.N    R2,??DataTable5_7
   \   0000001C   0x2105             MOVS     R1,#+5
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       OLED_ShowString
   \   00000024   0xE023             B.N      ??SpeedCtrler_Init_1
     66          	}
     67          	else
     68          	{
     69          		speedCtrler -> Kp = 3.2;
   \                     ??SpeedCtrler_Init_0: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable5_8  ;; 0x404ccccd
   \   00000028   0x....             LDR.N    R1,??DataTable5_5
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     70          		speedCtrler -> Kd = 0.5;
   \   0000002E   0xF05F 0x507C      MOVS     R0,#+1056964608
   \   00000032   0x....             LDR.N    R1,??DataTable5_5
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x6048             STR      R0,[R1, #+4]
     71          		speedCtrler -> Ki = 0.8;
   \   00000038   0x....             LDR.N    R0,??DataTable5_9  ;; 0x3f4ccccd
   \   0000003A   0x....             LDR.N    R1,??DataTable5_5
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0x6088             STR      R0,[R1, #+8]
     72          		for (i = 0; i < 3; ++i)
   \   00000040   0x2400             MOVS     R4,#+0
   \   00000042   0xE011             B.N      ??SpeedCtrler_Init_2
     73          		{
     74          			speedCtrler -> error[i] = 0;
   \                     ??SpeedCtrler_Init_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable5_5
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000004C   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000050   0x60C8             STR      R0,[R1, #+12]
     75          			speedCtrler -> u[i] = PWM_To_Pulse(PWM_Expect);
   \   00000052   0x....             LDR.N    R0,??DataTable5_10
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x.... 0x....      BL       PWM_To_Pulse
   \   0000005A   0x....             LDR.N    R1,??DataTable5_5
   \   0000005C   0x6809             LDR      R1,[R1, #+0]
   \   0000005E   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000060   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000064   0x6188             STR      R0,[R1, #+24]
     76          		}
   \   00000066   0x1C64             ADDS     R4,R4,#+1
   \                     ??SpeedCtrler_Init_2: (+1)
   \   00000068   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000006A   0x2C03             CMP      R4,#+3
   \   0000006C   0xDBEA             BLT.N    ??SpeedCtrler_Init_3
     77          	}
     78          }
   \                     ??SpeedCtrler_Init_1: (+1)
   \   0000006E   0xBD10             POP      {R4,PC}          ;; return
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void Steer_Controller(PIDStruct *SteerCon_Data, float32 expect, float32 real)
     81          {
   \                     Steer_Controller: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0010             MOVS     R0,R2
     82          	float32 incrementU;
     83          
     84          	SteerCon_Data -> error[2] = SteerCon_Data -> error[1];
   \   00000006   0x6922             LDR      R2,[R4, #+16]
   \   00000008   0x6162             STR      R2,[R4, #+20]
     85          	SteerCon_Data -> error[1] = SteerCon_Data -> error[0];
   \   0000000A   0x68E2             LDR      R2,[R4, #+12]
   \   0000000C   0x6122             STR      R2,[R4, #+16]
     86          	SteerCon_Data -> error[0] = real - expect;
   \   0000000E   0x.... 0x....      BL       __aeabi_fsub
   \   00000012   0x60E0             STR      R0,[R4, #+12]
     87          
     88          	incrementU = (SteerCon_Data -> Kp) * ((SteerCon_Data -> error[0])           \
     89          										   - (SteerCon_Data -> error[1]))  		\
     90          			   + (SteerCon_Data -> Kd) * ((SteerCon_Data -> error[0])      		\
     91          											- 2 * (SteerCon_Data -> error[1])   \
     92          											+ (SteerCon_Data -> error[2]));
   \   00000014   0x68E0             LDR      R0,[R4, #+12]
   \   00000016   0x6921             LDR      R1,[R4, #+16]
   \   00000018   0x.... 0x....      BL       __aeabi_fsub
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x.... 0x....      BL       __aeabi_fmul
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0x6921             LDR      R1,[R4, #+16]
   \   00000026   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000002A   0x.... 0x....      BL       __aeabi_fmul
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0x68E0             LDR      R0,[R4, #+12]
   \   00000032   0x.... 0x....      BL       __aeabi_fsub
   \   00000036   0x6961             LDR      R1,[R4, #+20]
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0x6861             LDR      R1,[R4, #+4]
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0x.... 0x....      BL       __aeabi_fadd
   \   00000048   0x0001             MOVS     R1,R0
     93          
     94          	SteerCon_Data -> u[2] = SteerCon_Data -> u[1];
   \   0000004A   0x69E0             LDR      R0,[R4, #+28]
   \   0000004C   0x6220             STR      R0,[R4, #+32]
     95          	SteerCon_Data -> u[1] = SteerCon_Data -> u[0];
   \   0000004E   0x69A0             LDR      R0,[R4, #+24]
   \   00000050   0x61E0             STR      R0,[R4, #+28]
     96          	SteerCon_Data -> u[0] = SteerCon_Data -> u[1] + incrementU;
   \   00000052   0x69E0             LDR      R0,[R4, #+28]
   \   00000054   0x.... 0x....      BL       __aeabi_fadd
   \   00000058   0x61A0             STR      R0,[R4, #+24]
     97          
     98          	(SteerCon_Data -> u[0] > STEER_RIGHT_DUTY) ? (SteerCon_Data -> u[0] = STEER_RIGHT_DUTY) : (NULL);
   \   0000005A   0x69A0             LDR      R0,[R4, #+24]
   \   0000005C   0x....             LDR.N    R1,??DataTable5_11  ;; 0x44c30001
   \   0000005E   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000062   0xD803             BHI.N    ??Steer_Controller_0
   \   00000064   0x....             LDR.N    R0,??DataTable5_12  ;; 0x44c30000
   \   00000066   0x61A0             STR      R0,[R4, #+24]
   \   00000068   0x69A0             LDR      R0,[R4, #+24]
   \   0000006A   0xE000             B.N      ??Steer_Controller_1
   \                     ??Steer_Controller_0: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
     99          	(SteerCon_Data -> u[0] < STEER_LEFT_DUTY) ? (SteerCon_Data -> u[0] = STEER_LEFT_DUTY) : (NULL);
   \                     ??Steer_Controller_1: (+1)
   \   0000006E   0x69A0             LDR      R0,[R4, #+24]
   \   00000070   0x....             LDR.N    R1,??DataTable5_13  ;; 0x44992000
   \   00000072   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000076   0xD203             BCS.N    ??Steer_Controller_2
   \   00000078   0x....             LDR.N    R0,??DataTable5_13  ;; 0x44992000
   \   0000007A   0x61A0             STR      R0,[R4, #+24]
   \   0000007C   0x69A0             LDR      R0,[R4, #+24]
   \   0000007E   0xE000             B.N      ??Steer_Controller_3
   \                     ??Steer_Controller_2: (+1)
   \   00000080   0x2000             MOVS     R0,#+0
    100          
    101          	LPLD_FTM_PWM_ChangeDuty(FTM2, FTM_Ch0, (uint32) (SteerCon_Data -> u[0]));
   \                     ??Steer_Controller_3: (+1)
   \   00000082   0x69A0             LDR      R0,[R4, #+24]
   \   00000084   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000088   0x0002             MOVS     R2,R0
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x....             LDR.N    R0,??DataTable5_14  ;; 0x400b8000
   \   0000008E   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    102          }
   \   00000092   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    103          void SteerCtrler_Init(void)
    104          {
   \                     SteerCtrler_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105          	int8 i;
    106          	steerCtrler = (PIDStruct *)malloc(sizeof(PIDStruct));
   \   00000002   0x2024             MOVS     R0,#+36
   \   00000004   0x.... 0x....      BL       malloc
   \   00000008   0x....             LDR.N    R1,??DataTable5_15
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    107          	if (NULL == steerCtrler)
   \   0000000C   0x....             LDR.N    R0,??DataTable5_15
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD108             BNE.N    ??SteerCtrler_Init_0
    108          	{
    109          		printf("Memory alloc faild!\n");
   \   00000014   0x....             LDR.N    R0,??DataTable5_6
   \   00000016   0x.... 0x....      BL       printf
    110          		OLED_ShowString(0, 5, "Memory alloc faild!");
   \   0000001A   0x....             LDR.N    R2,??DataTable5_7
   \   0000001C   0x2105             MOVS     R1,#+5
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       OLED_ShowString
   \   00000024   0xE020             B.N      ??SteerCtrler_Init_1
    111          	}
    112          	else
    113          	{
    114          		steerCtrler -> Kp = 5;
   \                     ??SteerCtrler_Init_0: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable5_16  ;; 0x40a00000
   \   00000028   0x....             LDR.N    R1,??DataTable5_15
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    115          		steerCtrler -> Kd = 1;
   \   0000002E   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   00000032   0x....             LDR.N    R1,??DataTable5_15
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x6048             STR      R0,[R1, #+4]
    116          		steerCtrler -> Ki = 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable5_15
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0x6088             STR      R0,[R1, #+8]
    117          		for(i = 0; i < 3; i++)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xE00E             B.N      ??SteerCtrler_Init_2
    118          		{
    119          			steerCtrler -> error[i] = 0;
   \                     ??SteerCtrler_Init_3: (+1)
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x....             LDR.N    R2,??DataTable5_15
   \   00000048   0x6812             LDR      R2,[R2, #+0]
   \   0000004A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000004C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000050   0x60D1             STR      R1,[R2, #+12]
    120          			steerCtrler -> u[i] = STEER_MID_DUTY;
   \   00000052   0x....             LDR.N    R1,??DataTable5_17  ;; 0x44b18000
   \   00000054   0x....             LDR.N    R2,??DataTable5_15
   \   00000056   0x6812             LDR      R2,[R2, #+0]
   \   00000058   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000005A   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000005E   0x6191             STR      R1,[R2, #+24]
    121          		}
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \                     ??SteerCtrler_Init_2: (+1)
   \   00000062   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000064   0x2803             CMP      R0,#+3
   \   00000066   0xDBED             BLT.N    ??SteerCtrler_Init_3
    122          	}
    123          }
   \                     ??SteerCtrler_Init_1: (+1)
   \   00000068   0xBD01             POP      {R0,PC}          ;; return
    124          

   \                                 In section .text, align 2, keep-with-next
    125          float32 Differ_Controller(PIDStruct *DifferCon_Data, float32 expect, float32 real)
    126          {
   \                     Differ_Controller: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0010             MOVS     R0,R2
    127          	float32 incrementU;
    128          
    129          	DifferCon_Data -> error[2] = DifferCon_Data -> error[1];
   \   00000006   0x6922             LDR      R2,[R4, #+16]
   \   00000008   0x6162             STR      R2,[R4, #+20]
    130          	DifferCon_Data -> error[1] = DifferCon_Data -> error[0];
   \   0000000A   0x68E2             LDR      R2,[R4, #+12]
   \   0000000C   0x6122             STR      R2,[R4, #+16]
    131          	DifferCon_Data -> error[0] = real - expect;
   \   0000000E   0x.... 0x....      BL       __aeabi_fsub
   \   00000012   0x60E0             STR      R0,[R4, #+12]
    132          
    133          	incrementU = (DifferCon_Data -> Kp) * ((DifferCon_Data -> error[0]) 		\
    134          										 - (DifferCon_Data -> error[1]))		\
    135          				+ (DifferCon_Data -> Kd) * ((DifferCon_Data -> error[0]) 		\
    136          											- 2 * (DifferCon_Data -> error[1]) 	\
    137          											+ (DifferCon_Data -> error[2]));
   \   00000014   0x68E0             LDR      R0,[R4, #+12]
   \   00000016   0x6921             LDR      R1,[R4, #+16]
   \   00000018   0x.... 0x....      BL       __aeabi_fsub
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x.... 0x....      BL       __aeabi_fmul
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0x6921             LDR      R1,[R4, #+16]
   \   00000026   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000002A   0x.... 0x....      BL       __aeabi_fmul
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0x68E0             LDR      R0,[R4, #+12]
   \   00000032   0x.... 0x....      BL       __aeabi_fsub
   \   00000036   0x6961             LDR      R1,[R4, #+20]
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0x6861             LDR      R1,[R4, #+4]
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0x.... 0x....      BL       __aeabi_fadd
   \   00000048   0x0001             MOVS     R1,R0
    138          
    139          	DifferCon_Data -> u[2] = DifferCon_Data -> u[1];
   \   0000004A   0x69E0             LDR      R0,[R4, #+28]
   \   0000004C   0x6220             STR      R0,[R4, #+32]
    140          	DifferCon_Data -> u[1] = DifferCon_Data -> u[0];
   \   0000004E   0x69A0             LDR      R0,[R4, #+24]
   \   00000050   0x61E0             STR      R0,[R4, #+28]
    141          	DifferCon_Data -> u[0] = DifferCon_Data -> u[1] + incrementU;
   \   00000052   0x69E0             LDR      R0,[R4, #+28]
   \   00000054   0x.... 0x....      BL       __aeabi_fadd
   \   00000058   0x61A0             STR      R0,[R4, #+24]
    142          
    143          	(DifferCon_Data -> u[0] > 2000) ? (DifferCon_Data -> u[0] = 1000) : (NULL);
   \   0000005A   0x69A0             LDR      R0,[R4, #+24]
   \   0000005C   0x....             LDR.N    R1,??DataTable5_18  ;; 0x44fa0001
   \   0000005E   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000062   0xD803             BHI.N    ??Differ_Controller_0
   \   00000064   0x....             LDR.N    R0,??DataTable5_19  ;; 0x447a0000
   \   00000066   0x61A0             STR      R0,[R4, #+24]
   \   00000068   0x69A0             LDR      R0,[R4, #+24]
   \   0000006A   0xE000             B.N      ??Differ_Controller_1
   \                     ??Differ_Controller_0: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
    144          	(DifferCon_Data -> u[0] < -2000) ? (DifferCon_Data -> u[0] = -1000) : (NULL);
   \                     ??Differ_Controller_1: (+1)
   \   0000006E   0x69A0             LDR      R0,[R4, #+24]
   \   00000070   0x....             LDR.N    R1,??DataTable5_20  ;; 0xc4fa0000
   \   00000072   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000076   0xD203             BCS.N    ??Differ_Controller_2
   \   00000078   0x....             LDR.N    R0,??DataTable5_21  ;; 0xc47a0000
   \   0000007A   0x61A0             STR      R0,[R4, #+24]
   \   0000007C   0x69A0             LDR      R0,[R4, #+24]
   \   0000007E   0xE000             B.N      ??Differ_Controller_3
   \                     ??Differ_Controller_2: (+1)
   \   00000080   0x2000             MOVS     R0,#+0
    145          
    146          	return (DifferCon_Data -> u[0]);
   \                     ??Differ_Controller_3: (+1)
   \   00000082   0x69A0             LDR      R0,[R4, #+24]
   \   00000084   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    147          }

   \                                 In section .text, align 2, keep-with-next
    148          void DifferCtrler_Init(void)
    149          {
   \                     DifferCtrler_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    150          	uint8 i;
    151          	differCtrler = (PIDStruct *)malloc(sizeof(PIDStruct));
   \   00000002   0x2024             MOVS     R0,#+36
   \   00000004   0x.... 0x....      BL       malloc
   \   00000008   0x....             LDR.N    R1,??DataTable5_4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    152          	if (NULL == differCtrler)
   \   0000000C   0x....             LDR.N    R0,??DataTable5_4
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD108             BNE.N    ??DifferCtrler_Init_0
    153          	{
    154          		printf("Memory alloc faild!\n");
   \   00000014   0x....             LDR.N    R0,??DataTable5_6
   \   00000016   0x.... 0x....      BL       printf
    155          		OLED_ShowString(0, 5, "Memory alloc faild!");
   \   0000001A   0x....             LDR.N    R2,??DataTable5_7
   \   0000001C   0x2105             MOVS     R1,#+5
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       OLED_ShowString
   \   00000024   0xE01F             B.N      ??DifferCtrler_Init_1
    156          	}
    157          	else
    158          	{
    159          		differCtrler -> Kp = 10;
   \                     ??DifferCtrler_Init_0: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable5_22  ;; 0x41200000
   \   00000028   0x....             LDR.N    R1,??DataTable5_4
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    160          		differCtrler -> Kd = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable5_4
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x6048             STR      R0,[R1, #+4]
    161          		differCtrler -> Ki = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable5_4
   \   0000003A   0x6809             LDR      R1,[R1, #+0]
   \   0000003C   0x6088             STR      R0,[R1, #+8]
    162          		for(i = 0;i < 3; i++)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE00E             B.N      ??DifferCtrler_Init_2
    163          		{
    164          			differCtrler -> error[i] = 0;
   \                     ??DifferCtrler_Init_3: (+1)
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x....             LDR.N    R2,??DataTable5_4
   \   00000046   0x6812             LDR      R2,[R2, #+0]
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000004E   0x60D1             STR      R1,[R2, #+12]
    165          			differCtrler -> u[i] = 0;
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x....             LDR.N    R2,??DataTable5_4
   \   00000054   0x6812             LDR      R2,[R2, #+0]
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000005C   0x6191             STR      R1,[R2, #+24]
    166          		}
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \                     ??DifferCtrler_Init_2: (+1)
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x2803             CMP      R0,#+3
   \   00000064   0xDBED             BLT.N    ??DifferCtrler_Init_3
    167          	}
    168          }
   \                     ??DifferCtrler_Init_1: (+1)
   \   00000066   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x45960001         DC32     0x45960001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xC5960000         DC32     0xc5960000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     MidAve

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x42A00000         DC32     0x42a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     differCtrler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     speedCtrler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x404CCCCD         DC32     0x404ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x3F4CCCCD         DC32     0x3f4ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     PWM_Expect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x44C30001         DC32     0x44c30001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x44C30000         DC32     0x44c30000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x44992000         DC32     0x44992000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x400B8000         DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     steerCtrler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x44B18000         DC32     0x44b18000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x44FA0001         DC32     0x44fa0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0xC4FA0000         DC32     0xc4fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0xC47A0000         DC32     0xc47a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x4D 0x65          DC8 "Memory alloc faild!\012"
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x64    
   \              0x21 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x4D 0x65          DC8 "Memory alloc faild!"
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x64    
   \              0x21 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DifferCtrler_Init
         8   -> OLED_ShowString
         8   -> malloc
         8   -> printf
      16   Differ_Controller
        16   -> __aeabi_fadd
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16 __aeabi_cfcmple
        16 __aeabi_cfrcmple
       8   SpeedCtrler_Init
         8   -> OLED_ShowString
         8   -> PWM_To_Pulse
         8   -> malloc
         8   -> printf
      16   Speed_Controller
        16   -> Differ_Controller
        16   -> Motor_Duty_Change
        16   -> PulseNum_To_PWM
        16   -> __aeabi_f2iz
        16   -> __aeabi_fadd
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16   -> __aeabi_i2f
        16 __aeabi_cfcmple
        16 __aeabi_cfrcmple
       8   SteerCtrler_Init
         8   -> OLED_ShowString
         8   -> malloc
         8   -> printf
      16   Steer_Controller
        16   -> LPLD_FTM_PWM_ChangeDuty
        16   -> __aeabi_f2uiz
        16   -> __aeabi_fadd
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16 __aeabi_cfcmple
        16 __aeabi_cfrcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      24  ?_0
      20  ?_1
     104  DifferCtrler_Init
     134  Differ_Controller
     112  SpeedCtrler_Init
     250  Speed_Controller
     106  SteerCtrler_Init
     148  Steer_Controller
       4  differCtrler
       4  speedCtrler
       4  steerCtrler

 
  12 bytes in section .bss
  44 bytes in section .rodata
 946 bytes in section .text
 
 946 bytes of CODE  memory
  44 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none
