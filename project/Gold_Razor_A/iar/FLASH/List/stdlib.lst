###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        24/Apr/2016  20:13:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\lib\common\stdlib.c
#    Command line =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\lib\common\stdlib.c -D
#        LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR EWARM\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR EWARM\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\stdlib.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\stdlib.o
#
###############################################################################

C:\Users\Administrator\Desktop\Gold_Razor_A\lib\common\stdlib.c
      1          /**
      2           * @file stdlib.c
      3           * @version 3.01[By LPLD]
      4           * @date 2013-11-4
      5           * @brief C标准代码库
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 由标准C代码库移植，仅支持ASCII
     10           *
     11           * 版权所有:北京拉普兰德电子技术有限公司
     12           * http://www.lpld.cn
     13           * mail:support@lpld.cn
     14           *
     15           * @par
     16           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     17           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     18           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     19           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     20           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     21           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     22           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     23           */
     24          #include "stdlib.h"
     25          
     26          
     27          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     28          int isspace (int ch)
     29          {
     30              if ((ch == ' ') || (ch == '\t'))    /* \n ??? */
   \                     isspace: (+1)
   \   00000000   0x2820             CMP      R0,#+32
   \   00000002   0xD001             BEQ.N    ??isspace_0
   \   00000004   0x2809             CMP      R0,#+9
   \   00000006   0xD101             BNE.N    ??isspace_1
     31                  return TRUE;
   \                     ??isspace_0: (+1)
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE000             B.N      ??isspace_2
     32              else
     33                  return FALSE;
   \                     ??isspace_1: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \                     ??isspace_2: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
     34          }
     35          
     36          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     37          int isalnum (int ch)
     38          {
     39              /* ASCII only */
     40              if (((ch >= '0') && (ch <= '9')) ||
     41                  ((ch >= 'A') && (ch <= 'Z')) ||
     42                  ((ch >= 'a') && (ch <= 'z')))
   \                     isalnum: (+1)
   \   00000000   0xF1B0 0x0130      SUBS     R1,R0,#+48
   \   00000004   0x290A             CMP      R1,#+10
   \   00000006   0xD306             BCC.N    ??isalnum_0
   \   00000008   0xF1B0 0x0141      SUBS     R1,R0,#+65
   \   0000000C   0x291A             CMP      R1,#+26
   \   0000000E   0xD302             BCC.N    ??isalnum_0
   \   00000010   0x3861             SUBS     R0,R0,#+97
   \   00000012   0x281A             CMP      R0,#+26
   \   00000014   0xD201             BCS.N    ??isalnum_1
     43                  return TRUE;
   \                     ??isalnum_0: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE000             B.N      ??isalnum_2
     44              else
     45                  return FALSE;
   \                     ??isalnum_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??isalnum_2: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
     46          }
     47          
     48          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     49          int isdigit (int ch)
     50          {
     51              /* ASCII only */
     52              if ((ch >= '0') && (ch <= '9'))
   \                     isdigit: (+1)
   \   00000000   0x3830             SUBS     R0,R0,#+48
   \   00000002   0x280A             CMP      R0,#+10
   \   00000004   0xD201             BCS.N    ??isdigit_0
     53                  return TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B.N      ??isdigit_1
     54              else
     55                  return FALSE;
   \                     ??isdigit_0: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??isdigit_1: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
     56          }
     57          
     58          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     59          int isupper (int ch)
     60          {
     61              /* ASCII only */
     62              if ((ch >= 'A') && (ch <= 'Z'))
   \                     isupper: (+1)
   \   00000000   0x3841             SUBS     R0,R0,#+65
   \   00000002   0x281A             CMP      R0,#+26
   \   00000004   0xD201             BCS.N    ??isupper_0
     63                  return TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B.N      ??isupper_1
     64              else
     65                  return FALSE;
   \                     ??isupper_0: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??isupper_1: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
     66          }
     67          
     68          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     69          int strcasecmp (const int8 *s1, const int8 *s2)
     70          {
   \                     strcasecmp: (+1)
   \   00000000   0xB410             PUSH     {R4}
     71              int8    c1, c2;
     72              int     result = 0;
   \   00000002   0x2200             MOVS     R2,#+0
     73          
     74              while (result == 0)
   \                     ??strcasecmp_0: (+1)
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD11C             BNE.N    ??strcasecmp_1
     75              {
     76                  c1 = *s1++;
   \   00000008   0xF990 0x3000      LDRSB    R3,[R0, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
     77                  c2 = *s2++;
   \   0000000E   0xF991 0x4000      LDRSB    R4,[R1, #+0]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
     78                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   00000014   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \   00000016   0xF1B3 0x0261      SUBS     R2,R3,#+97
   \   0000001A   0x2A1A             CMP      R2,#+26
   \   0000001C   0xD200             BCS.N    ??strcasecmp_2
     79                      c1 = (int8)(c1 - ' ');
   \   0000001E   0x3B20             SUBS     R3,R3,#+32
     80                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strcasecmp_2: (+1)
   \   00000020   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000022   0xF1B4 0x0261      SUBS     R2,R4,#+97
   \   00000026   0x2A1A             CMP      R2,#+26
   \   00000028   0xD200             BCS.N    ??strcasecmp_3
     81                      c2 = (int8)(c2 - ' ');
   \   0000002A   0x3C20             SUBS     R4,R4,#+32
     82                  if ((result = (c1 - c2)) != 0)
   \                     ??strcasecmp_3: (+1)
   \   0000002C   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \   0000002E   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000030   0x1B1A             SUBS     R2,R3,R4
   \   00000032   0x2A00             CMP      R2,#+0
   \   00000034   0xD105             BNE.N    ??strcasecmp_1
     83                      break;
     84                  if ((c1 == 0) || (c2 == 0))
   \                     ??strcasecmp_4: (+1)
   \   00000036   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD002             BEQ.N    ??strcasecmp_5
   \   0000003C   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD1E0             BNE.N    ??strcasecmp_0
     85                      break;
     86              }
     87              return result;
   \                     ??strcasecmp_5: (+1)
   \                     ??strcasecmp_1: (+1)
   \   00000042   0x0010             MOVS     R0,R2
   \   00000044   0xBC10             POP      {R4}
   \   00000046   0x4770             BX       LR               ;; return
     88          }
     89          
     90          
     91          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     92          int strncasecmp (const int8 *s1, const int8 *s2, int n)
     93          {
   \                     strncasecmp: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     94              int8    c1, c2;
     95              int     k = 0;
   \   00000002   0x2600             MOVS     R6,#+0
     96              int     result = 0;
   \   00000004   0x2300             MOVS     R3,#+0
     97          
     98              while ( k++ < n )
   \                     ??strncasecmp_0: (+1)
   \   00000006   0x0034             MOVS     R4,R6
   \   00000008   0x1C66             ADDS     R6,R4,#+1
   \   0000000A   0x4294             CMP      R4,R2
   \   0000000C   0xDA1C             BGE.N    ??strncasecmp_1
     99              {
    100                  c1 = *s1++;
   \   0000000E   0xF990 0x4000      LDRSB    R4,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
    101                  c2 = *s2++;
   \   00000014   0xF991 0x5000      LDRSB    R5,[R1, #+0]
   \   00000018   0x1C49             ADDS     R1,R1,#+1
    102                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   0000001A   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000001C   0xF1B4 0x0361      SUBS     R3,R4,#+97
   \   00000020   0x2B1A             CMP      R3,#+26
   \   00000022   0xD200             BCS.N    ??strncasecmp_2
    103                      c1 = (int8)(c1 - ' ');
   \   00000024   0x3C20             SUBS     R4,R4,#+32
    104                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strncasecmp_2: (+1)
   \   00000026   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   00000028   0xF1B5 0x0361      SUBS     R3,R5,#+97
   \   0000002C   0x2B1A             CMP      R3,#+26
   \   0000002E   0xD200             BCS.N    ??strncasecmp_3
    105                      c2 = (int8)(c2 - ' ');
   \   00000030   0x3D20             SUBS     R5,R5,#+32
    106                  if ((result = (c1 - c2)) != 0)
   \                     ??strncasecmp_3: (+1)
   \   00000032   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000034   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   00000036   0x1B63             SUBS     R3,R4,R5
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD105             BNE.N    ??strncasecmp_1
    107                      break;
    108                  if ((c1 == 0) || (c2 == 0))
   \                     ??strncasecmp_4: (+1)
   \   0000003C   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD002             BEQ.N    ??strncasecmp_5
   \   00000042   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD1DE             BNE.N    ??strncasecmp_0
    109                      break;
    110              }
    111              return result;
   \                     ??strncasecmp_5: (+1)
   \                     ??strncasecmp_1: (+1)
   \   00000048   0x0018             MOVS     R0,R3
   \   0000004A   0xBC70             POP      {R4-R6}
   \   0000004C   0x4770             BX       LR               ;; return
    112          }
    113          
    114          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    115          unsigned long strtoul (int8 *str, int8 **ptr, int base)
    116          {
   \                     strtoul: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    117              unsigned long rvalue;
    118              int c, err, neg;
    119              int8 *endp;
    120              int8 *startp;
    121          
    122              rvalue = 0;  err = 0;  neg = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
    123          
    124              /* Check for invalid arguments */
    125              if ((str == NULL) || (base < 0) || (base == 1) || (base > 36))
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD005             BEQ.N    ??strtoul_0
   \   00000018   0x2E00             CMP      R6,#+0
   \   0000001A   0xD403             BMI.N    ??strtoul_0
   \   0000001C   0x2E01             CMP      R6,#+1
   \   0000001E   0xD001             BEQ.N    ??strtoul_0
   \   00000020   0x2E25             CMP      R6,#+37
   \   00000022   0xDB04             BLT.N    ??strtoul_1
    126              {
    127                  if (ptr != NULL)
   \                     ??strtoul_0: (+1)
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD000             BEQ.N    ??strtoul_2
    128                  {
    129                      *ptr = str;
   \   00000028   0x602C             STR      R4,[R5, #+0]
    130                  }
    131                  return 0;
   \                     ??strtoul_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE064             B.N      ??strtoul_3
    132              }
    133          
    134              /* Skip leading white spaces */
    135              for (startp = str; isspace(*startp); ++startp)
   \                     ??strtoul_1: (+1)
   \   0000002E   0x46A2             MOV      R10,R4
   \   00000030   0xE001             B.N      ??strtoul_4
   \                     ??strtoul_5: (+1)
   \   00000032   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??strtoul_4: (+1)
   \   00000036   0xF99A 0x0000      LDRSB    R0,[R10, #+0]
   \   0000003A   0x.... 0x....      BL       isspace
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1F7             BNE.N    ??strtoul_5
    136                  ;
    137          
    138              /* Check for notations */
    139              switch (startp[0])
   \   00000042   0xF99A 0x0000      LDRSB    R0,[R10, #+0]
   \   00000046   0x282D             CMP      R0,#+45
   \   00000048   0xD011             BEQ.N    ??strtoul_6
   \   0000004A   0x2830             CMP      R0,#+48
   \   0000004C   0xD114             BNE.N    ??strtoul_7
    140              {
    141                  case '0':
    142                      if ((startp[1] == 'x') || (startp[1] == 'X'))
   \                     ??strtoul_8: (+1)
   \   0000004E   0xF99A 0x0001      LDRSB    R0,[R10, #+1]
   \   00000052   0x2878             CMP      R0,#+120
   \   00000054   0xD003             BEQ.N    ??strtoul_9
   \   00000056   0xF99A 0x0001      LDRSB    R0,[R10, #+1]
   \   0000005A   0x2858             CMP      R0,#+88
   \   0000005C   0xD106             BNE.N    ??strtoul_10
    143                      {
    144                          if ((base == 0) || (base == 16))
   \                     ??strtoul_9: (+1)
   \   0000005E   0x2E00             CMP      R6,#+0
   \   00000060   0xD001             BEQ.N    ??strtoul_11
   \   00000062   0x2E10             CMP      R6,#+16
   \   00000064   0xD102             BNE.N    ??strtoul_10
    145                          {
    146                              base = 16;
   \                     ??strtoul_11: (+1)
   \   00000066   0x2610             MOVS     R6,#+16
    147                              startp = &startp[2];
   \   00000068   0xF11A 0x0A02      ADDS     R10,R10,#+2
    148                          }
    149                      }
    150                      break;
   \                     ??strtoul_10: (+1)
   \   0000006C   0xE004             B.N      ??strtoul_12
    151                  case '-':
    152                      neg = 1;
   \                     ??strtoul_6: (+1)
   \   0000006E   0xF05F 0x0901      MOVS     R9,#+1
    153                      startp = &startp[1];
   \   00000072   0xF11A 0x0A01      ADDS     R10,R10,#+1
    154                      break;
   \   00000076   0xE7FF             B.N      ??strtoul_12
    155                  default:
    156                      break;
    157              }
    158          
    159              if (base == 0)
   \                     ??strtoul_7: (+1)
   \                     ??strtoul_12: (+1)
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD100             BNE.N    ??strtoul_13
    160                  base = 10;
   \   0000007C   0x260A             MOVS     R6,#+10
    161          
    162              /* Check for invalid chars in str */
    163              for ( endp = startp; (c = *endp) != '\0'; ++endp)
   \                     ??strtoul_13: (+1)
   \   0000007E   0xE003             B.N      ??strtoul_14
    164              {
    165                  /* Check for 0..9,Aa-Zz */
    166                  if (!isalnum(c))
    167                  {
    168                      err = 1;
    169                      break;
    170                  }
    171          
    172                  /* Convert int8 to num in 0..36 */
    173                  if (isdigit(c))
    174                  {
    175                      c = c - '0';
    176                  }
    177                  else
    178                  {
    179                      if (isupper(c))
    180                      {
    181                          c = c - 'A' + 10;
    182                      }
    183                      else
    184                      {
    185                          c = c - 'a' + 10;
    186                      }
    187                  }
    188          
    189                  /* check c against base */
    190                  if (c >= base)
    191                  {
    192                      err = 1;
    193                      break;
    194                  }
    195          
    196                  if (neg)
    197                  {
    198                      rvalue = (rvalue * base) - c;
    199                  }
    200                  else
    201                  {
    202                      rvalue = (rvalue * base) + c;
   \                     ??strtoul_15: (+1)
   \   00000080   0xFB06 0xB707      MLA      R7,R6,R7,R11
    203                  }
   \                     ??strtoul_16: (+1)
   \   00000084   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \                     ??strtoul_14: (+1)
   \   00000088   0xF99A 0xB000      LDRSB    R11,[R10, #+0]
   \   0000008C   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000090   0xD006             BEQ.N    ??strtoul_17
   \   00000092   0x4658             MOV      R0,R11
   \   00000094   0x.... 0x....      BL       isalnum
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD10D             BNE.N    ??strtoul_18
   \   0000009C   0xF05F 0x0801      MOVS     R8,#+1
    204              }
    205          
    206              /* Upon exit, endp points to the character at which valid info */
    207              /* STOPS.  No chars including and beyond endp are used.        */
    208          
    209              if (ptr != NULL)
   \                     ??strtoul_17: (+1)
   \   000000A0   0x2D00             CMP      R5,#+0
   \   000000A2   0xD001             BEQ.N    ??strtoul_19
    210                  *ptr = endp;
   \   000000A4   0xF8C5 0xA000      STR      R10,[R5, #+0]
    211          
    212              if (err)
   \                     ??strtoul_19: (+1)
   \   000000A8   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000AC   0xD023             BEQ.N    ??strtoul_20
    213              {
    214                  if (ptr != NULL)
   \   000000AE   0x2D00             CMP      R5,#+0
   \   000000B0   0xD000             BEQ.N    ??strtoul_21
    215                      *ptr = str;
   \   000000B2   0x602C             STR      R4,[R5, #+0]
    216                  
    217                  return 0;
   \                     ??strtoul_21: (+1)
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0xE01F             B.N      ??strtoul_3
    218              }
   \                     ??strtoul_18: (+1)
   \   000000B8   0x4658             MOV      R0,R11
   \   000000BA   0x.... 0x....      BL       isdigit
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD002             BEQ.N    ??strtoul_22
   \   000000C2   0xF1BB 0x0B30      SUBS     R11,R11,#+48
   \   000000C6   0xE009             B.N      ??strtoul_23
   \                     ??strtoul_22: (+1)
   \   000000C8   0x4658             MOV      R0,R11
   \   000000CA   0x.... 0x....      BL       isupper
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD002             BEQ.N    ??strtoul_24
   \   000000D2   0xF1BB 0x0B37      SUBS     R11,R11,#+55
   \   000000D6   0xE001             B.N      ??strtoul_23
   \                     ??strtoul_24: (+1)
   \   000000D8   0xF1BB 0x0B57      SUBS     R11,R11,#+87
   \                     ??strtoul_23: (+1)
   \   000000DC   0x45B3             CMP      R11,R6
   \   000000DE   0xDB02             BLT.N    ??strtoul_25
   \   000000E0   0xF05F 0x0801      MOVS     R8,#+1
   \   000000E4   0xE7DC             B.N      ??strtoul_17
   \                     ??strtoul_25: (+1)
   \   000000E6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000EA   0xD0C9             BEQ.N    ??strtoul_15
   \   000000EC   0xFB06 0xF007      MUL      R0,R6,R7
   \   000000F0   0xEBB0 0x070B      SUBS     R7,R0,R11
   \   000000F4   0xE7C6             B.N      ??strtoul_16
    219              else
    220              {
    221                  return rvalue;
   \                     ??strtoul_20: (+1)
   \   000000F6   0x0038             MOVS     R0,R7
   \                     ??strtoul_3: (+1)
   \   000000F8   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    222              }
    223          }
    224          
    225          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    226          int strlen (const int8 *str)
    227          {
    228              int8 *s = (int8 *)str;
    229              int len = 0;
   \                     strlen: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    230          
    231              if (s == NULL)
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD102             BNE.N    ??strlen_0
    232                  return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE007             B.N      ??strlen_1
    233          
    234              while (*s++ != '\0')
    235                  ++len;
   \                     ??strlen_2: (+1)
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \                     ??strlen_0: (+1)
   \   0000000C   0x0002             MOVS     R2,R0
   \   0000000E   0x1C50             ADDS     R0,R2,#+1
   \   00000010   0xF992 0x2000      LDRSB    R2,[R2, #+0]
   \   00000014   0x2A00             CMP      R2,#+0
   \   00000016   0xD1F8             BNE.N    ??strlen_2
    236          
    237              return len;
   \   00000018   0x0008             MOVS     R0,R1
   \                     ??strlen_1: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
    238          }
    239          
    240          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    241          int8 * strcat (int8 *dest, const int8 *src)
    242          {
   \                     strcat: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    243              int8 *dp;
    244              int8 *sp = (int8 *)src;
   \   00000004   0x000D             MOVS     R5,R1
    245          
    246              if ((dest != NULL) && (src != NULL))
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD010             BEQ.N    ??strcat_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD00E             BEQ.N    ??strcat_0
    247              {
    248                  dp = &dest[strlen(dest)];
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x1900             ADDS     R0,R0,R4
   \   00000016   0xE003             B.N      ??strcat_1
    249          
    250                  while (*sp != '\0')
    251                  {
    252                      *dp++ = *sp++;
   \                     ??strcat_2: (+1)
   \   00000018   0x7829             LDRB     R1,[R5, #+0]
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
    253                  }
   \                     ??strcat_1: (+1)
   \   00000020   0xF995 0x1000      LDRSB    R1,[R5, #+0]
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD1F7             BNE.N    ??strcat_2
    254                  *dp = '\0';
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
    255              }
    256              return dest;
   \                     ??strcat_0: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    257          }
    258          
    259          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    260          int8 * strncat (int8 *dest, const int8 *src, int n)
    261          {
   \                     strncat: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    262              int8 *dp;
    263              int8 *sp = (int8 *)src;
   \   00000006   0x000E             MOVS     R6,R1
    264          
    265              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD016             BEQ.N    ??strncat_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD014             BEQ.N    ??strncat_0
   \   00000010   0x2D01             CMP      R5,#+1
   \   00000012   0xDB12             BLT.N    ??strncat_0
    266              {
    267                  dp = &dest[strlen(dest)];
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       strlen
   \   0000001A   0x1900             ADDS     R0,R0,R4
   \   0000001C   0xE003             B.N      ??strncat_1
    268          
    269                  while ((*sp != '\0') && (n-- > 0))
    270                  {
    271                      *dp++ = *sp++;
   \                     ??strncat_2: (+1)
   \   0000001E   0x7831             LDRB     R1,[R6, #+0]
   \   00000020   0x7001             STRB     R1,[R0, #+0]
   \   00000022   0x1C76             ADDS     R6,R6,#+1
   \   00000024   0x1C40             ADDS     R0,R0,#+1
    272                  }
   \                     ??strncat_1: (+1)
   \   00000026   0xF996 0x1000      LDRSB    R1,[R6, #+0]
   \   0000002A   0x2900             CMP      R1,#+0
   \   0000002C   0xD003             BEQ.N    ??strncat_3
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0x1E4D             SUBS     R5,R1,#+1
   \   00000032   0x2901             CMP      R1,#+1
   \   00000034   0xDAF3             BGE.N    ??strncat_2
    273                  *dp = '\0';
   \                     ??strncat_3: (+1)
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x7001             STRB     R1,[R0, #+0]
    274              }
    275              return dest;
   \                     ??strncat_0: (+1)
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    276          }
    277          
    278          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    279          int8 * strcpy (int8 *dest, const int8 *src)
    280          {
    281              int8 *dp = (int8 *)dest;
   \                     strcpy: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    282              int8 *sp = (int8 *)src;
   \   00000002   0x000B             MOVS     R3,R1
    283          
    284              if ((dest != NULL) && (src != NULL))
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD00C             BEQ.N    ??strcpy_0
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD00A             BEQ.N    ??strcpy_0
   \   0000000C   0xE003             B.N      ??strcpy_1
    285              {
    286                  while (*sp != '\0')
    287                  {
    288                      *dp++ = *sp++;
   \                     ??strcpy_2: (+1)
   \   0000000E   0x7819             LDRB     R1,[R3, #+0]
   \   00000010   0x7011             STRB     R1,[R2, #+0]
   \   00000012   0x1C5B             ADDS     R3,R3,#+1
   \   00000014   0x1C52             ADDS     R2,R2,#+1
    289                  }
   \                     ??strcpy_1: (+1)
   \   00000016   0xF993 0x1000      LDRSB    R1,[R3, #+0]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD1F7             BNE.N    ??strcpy_2
    290                  *dp = '\0';
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x7011             STRB     R1,[R2, #+0]
    291              }
    292              return dest;
   \                     ??strcpy_0: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    293          }
    294          
    295          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    296          int8 * strncpy (int8 *dest, const int8 *src, int n)
    297          {
   \                     strncpy: (+1)
   \   00000000   0xB410             PUSH     {R4}
    298              int8 *dp = (int8 *)dest;
   \   00000002   0x0003             MOVS     R3,R0
    299              int8 *sp = (int8 *)src;
   \   00000004   0x000C             MOVS     R4,R1
    300          
    301              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD012             BEQ.N    ??strncpy_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD010             BEQ.N    ??strncpy_0
   \   0000000E   0x2A01             CMP      R2,#+1
   \   00000010   0xDB0E             BLT.N    ??strncpy_0
   \   00000012   0xE003             B.N      ??strncpy_1
    302              {
    303                  while ((*sp != '\0') && (n-- > 0))
    304                  {
    305                      *dp++ = *sp++;
   \                     ??strncpy_2: (+1)
   \   00000014   0x7821             LDRB     R1,[R4, #+0]
   \   00000016   0x7019             STRB     R1,[R3, #+0]
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \   0000001A   0x1C5B             ADDS     R3,R3,#+1
    306                  }
   \                     ??strncpy_1: (+1)
   \   0000001C   0xF994 0x1000      LDRSB    R1,[R4, #+0]
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD003             BEQ.N    ??strncpy_3
   \   00000024   0x0011             MOVS     R1,R2
   \   00000026   0x1E4A             SUBS     R2,R1,#+1
   \   00000028   0x2901             CMP      R1,#+1
   \   0000002A   0xDAF3             BGE.N    ??strncpy_2
    307                  *dp = '\0';
   \                     ??strncpy_3: (+1)
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x7019             STRB     R1,[R3, #+0]
    308              }
    309              return dest;
   \                     ??strncpy_0: (+1)
   \   00000030   0xBC10             POP      {R4}
   \   00000032   0x4770             BX       LR               ;; return
    310          }
    311          
    312          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    313          int strcmp (const int8 *s1, const int8 *s2)
    314          {
    315              /* No checks for NULL */
    316              int8 *s1p = (int8 *)s1;
    317              int8 *s2p = (int8 *)s2;
   \                     strcmp: (+1)
   \   00000000   0xE001             B.N      ??strcmp_0
    318          
    319              while (*s2p != '\0')
    320              {
    321                  if (*s1p != *s2p)
    322                      break;
    323          
    324                  ++s1p;
   \                     ??strcmp_1: (+1)
   \   00000002   0x1C40             ADDS     R0,R0,#+1
    325                  ++s2p;
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \                     ??strcmp_0: (+1)
   \   00000006   0xF991 0x2000      LDRSB    R2,[R1, #+0]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD005             BEQ.N    ??strcmp_2
   \   0000000E   0xF990 0x2000      LDRSB    R2,[R0, #+0]
   \   00000012   0xF991 0x3000      LDRSB    R3,[R1, #+0]
   \   00000016   0x429A             CMP      R2,R3
   \   00000018   0xD0F3             BEQ.N    ??strcmp_1
    326              }
    327              return (*s1p - *s2p);
   \                     ??strcmp_2: (+1)
   \   0000001A   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000001E   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   00000022   0x1A40             SUBS     R0,R0,R1
   \   00000024   0x4770             BX       LR               ;; return
    328          }
    329          
    330          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    331          int strncmp (const int8 *s1, const int8 *s2, int n)
    332          {
   \                     strncmp: (+1)
   \   00000000   0xB410             PUSH     {R4}
    333              /* No checks for NULL */
    334              int8 *s1p = (int8 *)s1;
    335              int8 *s2p = (int8 *)s2;
    336          
    337              if (n <= 0)
   \   00000002   0x2A01             CMP      R2,#+1
   \   00000004   0xDA03             BGE.N    ??strncmp_0
    338                  return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE013             B.N      ??strncmp_1
    339          
    340              while (*s2p != '\0')
    341              {
    342                  if (*s1p != *s2p)
    343                      break;
    344          
    345                  if (--n == 0)
    346                      break;
    347          
    348                  ++s1p;
   \                     ??strncmp_2: (+1)
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
    349                  ++s2p;
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \                     ??strncmp_0: (+1)
   \   0000000E   0xF991 0x3000      LDRSB    R3,[R1, #+0]
   \   00000012   0x2B00             CMP      R3,#+0
   \   00000014   0xD008             BEQ.N    ??strncmp_3
   \   00000016   0xF990 0x3000      LDRSB    R3,[R0, #+0]
   \   0000001A   0xF991 0x4000      LDRSB    R4,[R1, #+0]
   \   0000001E   0x42A3             CMP      R3,R4
   \   00000020   0xD102             BNE.N    ??strncmp_3
   \                     ??strncmp_4: (+1)
   \   00000022   0x1E52             SUBS     R2,R2,#+1
   \   00000024   0x2A00             CMP      R2,#+0
   \   00000026   0xD1F0             BNE.N    ??strncmp_2
    350              }
    351              return (*s1p - *s2p);
   \                     ??strncmp_3: (+1)
   \   00000028   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000002C   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   00000030   0x1A40             SUBS     R0,R0,R1
   \                     ??strncmp_1: (+1)
   \   00000032   0xBC10             POP      {R4}
   \   00000034   0x4770             BX       LR               ;; return
    352          }
    353          
    354          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    355          void * memcpy (void *dest, const void *src, unsigned n)
    356          {
   \                     memcpy: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    357              int longs, bytes;
    358              uint32 *dpl = (uint32 *)dest;
   \   00000002   0x0004             MOVS     R4,R0
    359              uint32 *spl = (uint32 *)src;
   \   00000004   0x000D             MOVS     R5,R1
    360              uint8  *dpb, *spb;
    361          
    362              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD019             BEQ.N    ??memcpy_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD017             BEQ.N    ??memcpy_0
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD015             BEQ.N    ??memcpy_0
    363              {
    364                  bytes = (n & 0x3);
   \   00000012   0xF012 0x0303      ANDS     R3,R2,#0x3
    365                  longs = (n - bytes) >> 2;
   \   00000016   0x1AD1             SUBS     R1,R2,R3
   \   00000018   0x0889             LSRS     R1,R1,#+2
   \   0000001A   0xE003             B.N      ??memcpy_1
    366              
    367                  while (longs--)
    368                      *dpl++ = *spl++;
   \                     ??memcpy_2: (+1)
   \   0000001C   0x682A             LDR      R2,[R5, #+0]
   \   0000001E   0x6022             STR      R2,[R4, #+0]
   \   00000020   0x1D2D             ADDS     R5,R5,#+4
   \   00000022   0x1D24             ADDS     R4,R4,#+4
   \                     ??memcpy_1: (+1)
   \   00000024   0x000A             MOVS     R2,R1
   \   00000026   0x1E51             SUBS     R1,R2,#+1
   \   00000028   0x2A00             CMP      R2,#+0
   \   0000002A   0xD1F7             BNE.N    ??memcpy_2
    369                  
    370                  dpb = (uint8 *)dpl;
    371                  spb = (uint8 *)spl;
   \   0000002C   0xE003             B.N      ??memcpy_3
    372                  
    373                  while (bytes--)
    374                      *dpb++ = *spb++;
   \                     ??memcpy_4: (+1)
   \   0000002E   0x7829             LDRB     R1,[R5, #+0]
   \   00000030   0x7021             STRB     R1,[R4, #+0]
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \                     ??memcpy_3: (+1)
   \   00000036   0x0019             MOVS     R1,R3
   \   00000038   0x1E4B             SUBS     R3,R1,#+1
   \   0000003A   0x2900             CMP      R1,#+0
   \   0000003C   0xD1F7             BNE.N    ??memcpy_4
    375              }
    376              return dest;
   \                     ??memcpy_0: (+1)
   \   0000003E   0xBC30             POP      {R4,R5}
   \   00000040   0x4770             BX       LR               ;; return
    377          }
    378          
    379          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    380          void * memset (void *s, int c, unsigned n)
    381          {
   \                     memset: (+1)
   \   00000000   0xB410             PUSH     {R4}
    382              /* Not optimized, but very portable */
    383              uint8 *sp = (uint8 *)s;
   \   00000002   0x0003             MOVS     R3,R0
    384          
    385              if ((s != NULL) && (n > 0))
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD008             BEQ.N    ??memset_0
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD102             BNE.N    ??memset_1
   \   0000000C   0xE005             B.N      ??memset_0
    386              {
    387                  while (n--)
    388                  {
    389                      *sp++ = (uint8)c;
   \                     ??memset_2: (+1)
   \   0000000E   0x7019             STRB     R1,[R3, #+0]
   \   00000010   0x1C5B             ADDS     R3,R3,#+1
    390                  }
   \                     ??memset_1: (+1)
   \   00000012   0x0014             MOVS     R4,R2
   \   00000014   0x1E62             SUBS     R2,R4,#+1
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD1F9             BNE.N    ??memset_2
    391              }
    392              return s;
   \                     ??memset_0: (+1)
   \   0000001A   0xBC10             POP      {R4}
   \   0000001C   0x4770             BX       LR               ;; return
    393          }
    394          
    395          /****************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   isalnum
       0   isdigit
       0   isspace
       0   isupper
       8   memcpy
       4   memset
       4   strcasecmp
      16   strcat
        16   -> strlen
       0   strcmp
       0   strcpy
       0   strlen
      12   strncasecmp
      16   strncat
        16   -> strlen
       4   strncmp
       4   strncpy
      40   strtoul
        40   -> isalnum
        40   -> isdigit
        40   -> isspace
        40   -> isupper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      30  isalnum
      14  isdigit
      16  isspace
      14  isupper
      66  memcpy
      30  memset
      72  strcasecmp
      48  strcat
      38  strcmp
      36  strcpy
      28  strlen
      78  strncasecmp
      62  strncat
      54  strncmp
      52  strncpy
     252  strtoul

 
 890 bytes in section .text
 
 890 bytes of CODE memory

Errors: none
Warnings: none
