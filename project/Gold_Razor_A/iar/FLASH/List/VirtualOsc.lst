###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        24/Apr/2016  20:13:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\VirtualOsc.c
#    Command line =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\VirtualOsc.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR EWARM\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR EWARM\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\VirtualOsc.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\VirtualOsc.o
#
###############################################################################

C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\VirtualOsc.c
      1          #include "VirtualOsc.h"
      2          

   \                                 In section .bss, align 4
      3          float VirtualSignal[5];
   \                     VirtualSignal:
   \   00000000                      DS8 20
      4          
      5          

   \                                 In section .text, align 2, keep-with-next
      6          unsigned short CRC_CHECK(unsigned char *Buf, unsigned char CRC_CNT)
      7          {
   \                     CRC_CHECK: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
      8              unsigned short CRC_Temp;
      9              unsigned char i,j;
     10              CRC_Temp = 0xffff;
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
     11          
     12              for (i=0;i<CRC_CNT; i++){
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??CRC_CHECK_0
   \                     ??CRC_CHECK_1: (+1)
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??CRC_CHECK_0: (+1)
   \   0000000C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD213             BCS.N    ??CRC_CHECK_2
     13                  CRC_Temp ^= Buf[i];
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x5C1C             LDRB     R4,[R3, R0]
   \   00000018   0x4062             EORS     R2,R4,R2
     14                  for (j=0;j<8;j++) {
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE002             B.N      ??CRC_CHECK_3
     15                      if (CRC_Temp & 0x01)
     16                          CRC_Temp = (CRC_Temp >>1 ) ^ 0xa001;
     17                      else
     18                          CRC_Temp = CRC_Temp >> 1;
   \                     ??CRC_CHECK_4: (+1)
   \   0000001E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000020   0x0852             LSRS     R2,R2,#+1
   \                     ??CRC_CHECK_5: (+1)
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \                     ??CRC_CHECK_3: (+1)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x2C08             CMP      R4,#+8
   \   00000028   0xDAEF             BGE.N    ??CRC_CHECK_1
   \   0000002A   0x07D5             LSLS     R5,R2,#+31
   \   0000002C   0xD5F7             BPL.N    ??CRC_CHECK_4
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x0852             LSRS     R2,R2,#+1
   \   00000032   0xF482 0x4220      EOR      R2,R2,#0xA000
   \   00000036   0xF092 0x0201      EORS     R2,R2,#0x1
   \   0000003A   0xE7F2             B.N      ??CRC_CHECK_5
     19                  }
     20              }
     21              return(CRC_Temp);
   \                     ??CRC_CHECK_2: (+1)
   \   0000003C   0x0010             MOVS     R0,R2
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0xBC30             POP      {R4,R5}
   \   00000042   0x4770             BX       LR               ;; return
     22          }

   \                                 In section .text, align 2, keep-with-next
     23          void OutPut_Data(void)
     24          {
   \                     OutPut_Data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
     25            int temp[4] = {0};
   \   00000004   0xA807             ADD      R0,SP,#+28
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     26            unsigned int temp1[4] = {0};
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
     27            unsigned char databuf[10] = {0};
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
   \   0000001E   0x380C             SUBS     R0,R0,#+12
     28            unsigned char i;
     29            unsigned short CRC16 = 0;
   \   00000020   0x2000             MOVS     R0,#+0
     30            for(i=0;i<4;i++)
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0xE012             B.N      ??OutPut_Data_0
     31             {
     32              temp[i]  = (int)VirtualSignal[i];
   \                     ??OutPut_Data_1: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable0
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000032   0xA907             ADD      R1,SP,#+28
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     33              temp1[i] = (unsigned int)temp[i];
   \   0000003A   0xA807             ADD      R0,SP,#+28
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000042   0xA903             ADD      R1,SP,#+12
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
     34             }
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_0: (+1)
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2C04             CMP      R4,#+4
   \   00000050   0xDBE9             BLT.N    ??OutPut_Data_1
     35            for(i=0;i<4;i++)
   \   00000052   0x2400             MOVS     R4,#+0
   \   00000054   0xE018             B.N      ??OutPut_Data_2
     36            {
     37              databuf[i*2]   = (unsigned char)(temp1[i]%256);
   \                     ??OutPut_Data_3: (+1)
   \   00000056   0xA803             ADD      R0,SP,#+12
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005E   0xF44F 0x7180      MOV      R1,#+256
   \   00000062   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000066   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000006A   0xA800             ADD      R0,SP,#+0
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0xF800 0x2014      STRB     R2,[R0, R4, LSL #+1]
     38              databuf[i*2+1] = (unsigned char)(temp1[i]/256);
   \   00000072   0xA803             ADD      R0,SP,#+12
   \   00000074   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000076   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000007A   0x0A00             LSRS     R0,R0,#+8
   \   0000007C   0xA900             ADD      R1,SP,#+0
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   00000084   0x7048             STRB     R0,[R1, #+1]
     39            }
   \   00000086   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_2: (+1)
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x2C04             CMP      R4,#+4
   \   0000008C   0xDBE3             BLT.N    ??OutPut_Data_3
     40            CRC16 = CRC_CHECK(databuf,8);
   \   0000008E   0x2108             MOVS     R1,#+8
   \   00000090   0xA800             ADD      R0,SP,#+0
   \   00000092   0x.... 0x....      BL       CRC_CHECK
     41            databuf[8] = CRC16%256;
   \   00000096   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000098   0xF44F 0x7180      MOV      R1,#+256
   \   0000009C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000A0   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000A4   0xF88D 0x2008      STRB     R2,[SP, #+8]
     42            databuf[9] = CRC16/256;
   \   000000A8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AA   0xF44F 0x7180      MOV      R1,#+256
   \   000000AE   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000B2   0xF88D 0x0009      STRB     R0,[SP, #+9]
     43            for(i=0;i<10;i++)
   \   000000B6   0x2400             MOVS     R4,#+0
   \   000000B8   0xE007             B.N      ??OutPut_Data_4
     44              //Send(databuf[i]);
     45              LPLD_UART_PutChar(UART2, databuf[i]);
   \                     ??OutPut_Data_5: (+1)
   \   000000BA   0xA800             ADD      R0,SP,#+0
   \   000000BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BE   0x5621             LDRSB    R1,[R4, R0]
   \   000000C0   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   000000C2   0x....             LDR.N    R0,??DataTable0_1  ;; 0x4006c000
   \   000000C4   0x.... 0x....      BL       LPLD_UART_PutChar
   \   000000C8   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_4: (+1)
   \   000000CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CC   0x2C0A             CMP      R4,#+10
   \   000000CE   0xDBF4             BLT.N    ??OutPut_Data_5
     46            //OLED_ShowString(0, 5, "get!");
     47          }
   \   000000D0   0xB00C             ADD      SP,SP,#+48
   \   000000D2   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     VirtualSignal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     48          
     49          
     50          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CRC_CHECK
      56   OutPut_Data
        56   -> CRC_CHECK
        56   -> LPLD_UART_PutChar
        56   -> __aeabi_f2iz
        56   -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      16  ?_0
      16  ?_1
      12  ?_2
      68  CRC_CHECK
     212  OutPut_Data
      20  VirtualSignal

 
  20 bytes in section .bss
  44 bytes in section .rodata
 288 bytes in section .text
 
 288 bytes of CODE  memory
  44 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
