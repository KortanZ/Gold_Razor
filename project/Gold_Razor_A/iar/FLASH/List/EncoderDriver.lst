###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        24/Apr/2016  20:13:18
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\EncoderDriver.c
#    Command line =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\EncoderDriver.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR EWARM\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR EWARM\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\EncoderDriver.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\EncoderDriver.o
#
###############################################################################

C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\EncoderDriver.c
      1          //#include "common.h"
      2          #include "EncoderDriver.h"

   \                                 In section .bss, align 4
      3          LPTMR_InitTypeDef Right_Encoder_init_param;
   \                     Right_Encoder_init_param:
   \   00000000                      DS8 12
      4          /*编码器初始化*/

   \                                 In section .text, align 2, keep-with-next
      5          void Encoder_Init(void)
      6          {
   \                     Encoder_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
      7          	
      8          	FTM_InitTypeDef Left_Encoder_init_struct;
      9          
     10          	//配置正交解码功能参数
     11          	Left_Encoder_init_struct.FTM_Ftmx = FTM1;              //只有FTM1和FTM2有正交解码功能
   \   00000004   0x....             LDR.N    R0,??DataTable1  ;; 0x40039000
   \   00000006   0x9003             STR      R0,[SP, #+12]
     12          	Left_Encoder_init_struct.FTM_Mode = FTM_MODE_QD;       //正交解码功能
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     13          	Left_Encoder_init_struct.FTM_PwmFreq = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9005             STR      R0,[SP, #+20]
     14          
     15          	Left_Encoder_init_struct.FTM_QdMode = QD_MODE_PHAB;    //AB相输入模式
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x001E      STRB     R0,[SP, #+30]
     16          	//初始化FTM
     17          	LPLD_FTM_Init(Left_Encoder_init_struct);
   \   00000018   0xA903             ADD      R1,SP,#+12
   \   0000001A   0xB084             SUB      SP,SP,#+16
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x221C             MOVS     R2,#+28
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000024   0xBC0F             POP      {R0-R3}
   \   00000026   0x.... 0x....      BL       LPLD_FTM_Init
     18          	//使能AB相输入通道
     19          	//PTB0引脚接A相输入、PTB1引脚接B相输入
     20          	LPLD_FTM_QD_Enable(FTM1, PTA12, PTA13);
   \   0000002A   0x220D             MOVS     R2,#+13
   \   0000002C   0x210C             MOVS     R1,#+12
   \   0000002E   0x....             LDR.N    R0,??DataTable1  ;; 0x40039000
   \   00000030   0x.... 0x....      BL       LPLD_FTM_QD_Enable
     21          
     22          	//LPTMR_MODE_PLACC脉冲累加模式
     23          	//LPTMR_ALT2的输入口为PTC5
     24          	//禁用中断
     25          	//无中断函数
     26          	Right_Encoder_init_param.LPTMR_Mode = LPTMR_MODE_PLACC;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x....             LDR.N    R1,??DataTable1_1
   \   00000038   0x7008             STRB     R0,[R1, #+0]
     27          	Right_Encoder_init_param.LPTMR_PluseAccInput = LPTMR_ALT2;
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x....             LDR.N    R1,??DataTable1_1
   \   0000003E   0x7108             STRB     R0,[R1, #+4]
     28          	Right_Encoder_init_param.LPTMR_IntEnable = FALSE;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR.N    R1,??DataTable1_1
   \   00000044   0x7148             STRB     R0,[R1, #+5]
     29          	Right_Encoder_init_param.LPTMR_Isr = NULL;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             LDR.N    R1,??DataTable1_1
   \   0000004A   0x6088             STR      R0,[R1, #+8]
     30          
     31          	LPLD_LPTMR_Init(Right_Encoder_init_param);
   \   0000004C   0x....             LDR.N    R0,??DataTable1_1
   \   0000004E   0xC807             LDM      R0,{R0-R2}
   \   00000050   0x.... 0x....      BL       LPLD_LPTMR_Init
     32          
     33          }
   \   00000054   0xB00B             ADD      SP,SP,#+44
   \   00000056   0xBD00             POP      {PC}             ;; return
     34          
     35          /*获取编码器值*/
     36          
     37          //参数position：Left左编码器；Right右编码器
     38          

   \                                 In section .text, align 2, keep-with-next
     39          int16 Encoder_GetPulseNum(EncoderPosition position)
     40          {
   \                     Encoder_GetPulseNum: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     41          	int16 result;
     42          	
     43          	switch (position)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD002             BEQ.N    ??Encoder_GetPulseNum_0
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD008             BEQ.N    ??Encoder_GetPulseNum_1
   \   0000000C   0xE011             B.N      ??Encoder_GetPulseNum_2
     44          	{
     45          		case ENCODER_LEFT: 
     46          			result = -LPLD_FTM_GetCounter(FTM1); 
   \                     ??Encoder_GetPulseNum_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable1  ;; 0x40039000
   \   00000010   0x.... 0x....      BL       LPLD_FTM_GetCounter
   \   00000014   0x4244             RSBS     R4,R0,#+0
     47          			LPLD_FTM_ClearCounter(FTM1);
   \   00000016   0x....             LDR.N    R0,??DataTable1  ;; 0x40039000
   \   00000018   0x.... 0x....      BL       LPLD_FTM_ClearCounter
     48          			break;	//左编码器反转
   \   0000001C   0xE009             B.N      ??Encoder_GetPulseNum_2
     49          		case ENCODER_RIGHT: 
     50          			result = 4 * LPLD_LPTMR_GetPulseAcc();
   \                     ??Encoder_GetPulseNum_1: (+1)
   \   0000001E   0x.... 0x....      BL       LPLD_LPTMR_GetPulseAcc
   \   00000022   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000024   0x0084             LSLS     R4,R0,#+2
     51          			LPLD_LPTMR_ResetCounter();       //复位LPTMR0 counter 
   \   00000026   0x.... 0x....      BL       LPLD_LPTMR_ResetCounter
     52              		LPLD_LPTMR_Init(Right_Encoder_init_param);
   \   0000002A   0x....             LDR.N    R0,??DataTable1_1
   \   0000002C   0xC807             LDM      R0,{R0-R2}
   \   0000002E   0x.... 0x....      BL       LPLD_LPTMR_Init
     53              		break;
     54          	}
     55          
     56          	return result;
   \                     ??Encoder_GetPulseNum_2: (+1)
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
     57          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40039000         DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     Right_Encoder_init_param
     58          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Encoder_GetPulseNum
         8   -> LPLD_FTM_ClearCounter
         8   -> LPLD_FTM_GetCounter
         8   -> LPLD_LPTMR_GetPulseAcc
         8   -> LPLD_LPTMR_Init
         8   -> LPLD_LPTMR_ResetCounter
      64   Encoder_Init
        48   -> LPLD_FTM_Init
        48   -> LPLD_FTM_QD_Enable
        48   -> LPLD_LPTMR_Init
        64   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      56  Encoder_GetPulseNum
      88  Encoder_Init
      12  Right_Encoder_init_param

 
  12 bytes in section .bss
 152 bytes in section .text
 
 152 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
