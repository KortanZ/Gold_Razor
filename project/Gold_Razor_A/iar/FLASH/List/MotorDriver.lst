###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        09/May/2016  19:09:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\MotorDriver.c
#    Command line =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\MotorDriver.c
#        -D LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\IAR EWARM\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\app\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\..\..\..\lib\USB\class\
#        -Ol -I "D:\IAR EWARM\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\List\MotorDriver.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\iar\FLASH\Obj\MotorDriver.o
#
###############################################################################

C:\Users\Administrator\Desktop\Gold_Razor_A\project\Gold_Razor_A\app\Source\MotorDriver.c
      1          /*
      2          *This file for motor driver
      3          *include initial and control
      4          */
      5          
      6          //#include "common.h"
      7          #include "MotorDriver.h"

   \                                 In section .data, align 4
      8          int32 PWM_Expect = 1500;
   \                     PWM_Expect:
   \   00000000   0x000005DC         DC32 1500
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void Motor_Init(void)
     11          {
   \                     Motor_Init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     12          	/* Initial motor pwm */
     13          
     14          	FTM_InitTypeDef motorInitStruct;
     15          
     16              motorInitStruct.FTM_Ftmx = FTM0;
   \   00000004   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000006   0x9003             STR      R0,[SP, #+12]
     17              motorInitStruct.FTM_Mode = FTM_MODE_PWM;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     18              motorInitStruct.FTM_PwmFreq = MOTOR_FRE;
   \   0000000E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000012   0x9005             STR      R0,[SP, #+20]
     19              motorInitStruct.FTM_PwmDeadtimeCfg = DEADTIME_CH01;
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x9006             STR      R0,[SP, #+24]
     20              motorInitStruct.FTM_PwmDeadtimeDiv = DEADTIME_DIV1;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x001C      STRB     R0,[SP, #+28]
     21              motorInitStruct.FTM_PwmDeadtimeVal = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x001D      STRB     R0,[SP, #+29]
     22          
     23          
     24              LPLD_FTM_Init(motorInitStruct);
   \   00000024   0xA903             ADD      R1,SP,#+12
   \   00000026   0xB084             SUB      SP,SP,#+16
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x221C             MOVS     R2,#+28
   \   0000002C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000030   0xBC0F             POP      {R0-R3}
   \   00000032   0x.... 0x....      BL       LPLD_FTM_Init
     25          /*----------left motor backward initial--------*/
     26              LPLD_FTM_PWM_Enable(FTM0,
     27                                  FTM_Ch1,
     28                                  0,
     29                                  MOTOR_LEFT_BACKWARD,  //PTA4
     30                                  ALIGN_LEFT
     31                                  );
   \   00000036   0x2028             MOVS     R0,#+40
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x2304             MOVS     R3,#+4
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000042   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     32          /*----------left motor forward initial--------*/
     33              LPLD_FTM_PWM_Enable(FTM0,
     34                                  FTM_Ch2,
     35                                  0,
     36                                  MOTOR_LEFT_FORWARD,  //PTA5
     37                                  ALIGN_LEFT
     38                                  );
   \   00000046   0x2028             MOVS     R0,#+40
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x2305             MOVS     R3,#+5
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2102             MOVS     R1,#+2
   \   00000050   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000052   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     39          /*----------right motor backward initial--------*/
     40              LPLD_FTM_PWM_Enable(FTM0,
     41                                  FTM_Ch3,
     42                                  0,
     43                                  MOTOR_RIGHT_BACKWARD,  //PTA6
     44                                  ALIGN_LEFT
     45                                  );
   \   00000056   0x2028             MOVS     R0,#+40
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x2306             MOVS     R3,#+6
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0x2103             MOVS     R1,#+3
   \   00000060   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000062   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     46          /*----------righ motor forward initial--------*/
     47              LPLD_FTM_PWM_Enable(FTM0,
     48                                  FTM_Ch4,
     49                                  0,
     50                                  MOTOR_RIGHT_FORWARD,  //PTA7
     51                                  ALIGN_LEFT
     52                                  );
   \   00000066   0x2028             MOVS     R0,#+40
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0x2307             MOVS     R3,#+7
   \   0000006C   0x2200             MOVS     R2,#+0
   \   0000006E   0x2104             MOVS     R1,#+4
   \   00000070   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000072   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     53          }
   \   00000076   0xB00B             ADD      SP,SP,#+44
   \   00000078   0xBD00             POP      {PC}             ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void Motor_Duty_Change(MotorPosition motorPos, int32 tagetDuty)
     56          {
   \                     Motor_Duty_Change: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
     57          
     58              /* Set motor threshold */
     59              if (tagetDuty > 9000)
   \   00000004   0xF242 0x3129      MOVW     R1,#+9001
   \   00000008   0x428C             CMP      R4,R1
   \   0000000A   0xDB02             BLT.N    ??Motor_Duty_Change_0
     60              {
     61                  tagetDuty = 9000;
   \   0000000C   0xF242 0x3428      MOVW     R4,#+9000
   \   00000010   0xE003             B.N      ??Motor_Duty_Change_1
     62              }
     63              else if (tagetDuty < -9000)
   \                     ??Motor_Duty_Change_0: (+1)
   \   00000012   0x....             LDR.N    R1,??DataTable3_1  ;; 0xffffdcd8
   \   00000014   0x428C             CMP      R4,R1
   \   00000016   0xDA00             BGE.N    ??Motor_Duty_Change_1
     64              {
     65                  tagetDuty = -9000;
   \   00000018   0x....             LDR.N    R4,??DataTable3_1  ;; 0xffffdcd8
     66              }
     67          
     68          	switch (motorPos)
   \                     ??Motor_Duty_Change_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD002             BEQ.N    ??Motor_Duty_Change_2
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD012             BEQ.N    ??Motor_Duty_Change_3
   \   00000024   0xE022             B.N      ??Motor_Duty_Change_4
     69          	{
     70          		case MOTOR_LEFT :
     71          			LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch1, tagetDuty > 0 ? 0 : (uint32)(-tagetDuty));
   \                     ??Motor_Duty_Change_2: (+1)
   \   00000026   0x2C01             CMP      R4,#+1
   \   00000028   0xDB01             BLT.N    ??Motor_Duty_Change_5
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0xE000             B.N      ??Motor_Duty_Change_6
   \                     ??Motor_Duty_Change_5: (+1)
   \   0000002E   0x4262             RSBS     R2,R4,#+0
   \                     ??Motor_Duty_Change_6: (+1)
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000034   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     72          			LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch2, tagetDuty > 0 ? (uint32)tagetDuty : 0);
   \   00000038   0x2C01             CMP      R4,#+1
   \   0000003A   0xDA00             BGE.N    ??Motor_Duty_Change_7
   \                     ??Motor_Duty_Change_8: (+1)
   \   0000003C   0x2400             MOVS     R4,#+0
   \                     ??Motor_Duty_Change_7: (+1)
   \   0000003E   0x0022             MOVS     R2,R4
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000044   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     73          			break;
   \   00000048   0xE010             B.N      ??Motor_Duty_Change_4
     74          		case MOTOR_RIGHT :
     75          			LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch3, tagetDuty > 0 ? 0 : (uint32)(-tagetDuty));
   \                     ??Motor_Duty_Change_3: (+1)
   \   0000004A   0x2C01             CMP      R4,#+1
   \   0000004C   0xDB01             BLT.N    ??Motor_Duty_Change_9
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0xE000             B.N      ??Motor_Duty_Change_10
   \                     ??Motor_Duty_Change_9: (+1)
   \   00000052   0x4262             RSBS     R2,R4,#+0
   \                     ??Motor_Duty_Change_10: (+1)
   \   00000054   0x2103             MOVS     R1,#+3
   \   00000056   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000058   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     76          			LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch4, tagetDuty > 0 ? (uint32)tagetDuty : 0);
   \   0000005C   0x2C01             CMP      R4,#+1
   \   0000005E   0xDA00             BGE.N    ??Motor_Duty_Change_11
   \                     ??Motor_Duty_Change_12: (+1)
   \   00000060   0x2400             MOVS     R4,#+0
   \                     ??Motor_Duty_Change_11: (+1)
   \   00000062   0x0022             MOVS     R2,R4
   \   00000064   0x2104             MOVS     R1,#+4
   \   00000066   0x....             LDR.N    R0,??DataTable3  ;; 0x40038000
   \   00000068   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     77                      break;
     78          	}
     79          }
   \                     ??Motor_Duty_Change_4: (+1)
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     80          float32 PulseNum_To_PWM(float32 pulseNum)
     81          {
   \                     PulseNum_To_PWM: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     82          	/* This function convert pulse number to rotational speed */
     83          
     84          	float32 pwm;
     85          	pwm = (pulseNum + 319.8) / 0.5724;
   \   00000002   0x.... 0x....      BL       __aeabi_f2d
   \   00000006   0x....             LDR.N    R2,??DataTable3_2  ;; 0xcccccccd
   \   00000008   0x....             LDR.N    R3,??DataTable3_3  ;; 0x4073fccc
   \   0000000A   0x.... 0x....      BL       __aeabi_dadd
   \   0000000E   0x....             LDR.N    R2,??DataTable3_4  ;; 0xce075f70
   \   00000010   0x....             LDR.N    R3,??DataTable3_5  ;; 0x3fe25119
   \   00000012   0x.... 0x....      BL       __aeabi_ddiv
   \   00000016   0x.... 0x....      BL       __aeabi_d2f
     86          	return pwm;
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
     87          }
     88          

   \                                 In section .text, align 2, keep-with-next
     89          float32 PWM_To_Pulse(uint32 pwm)
     90          {
   \                     PWM_To_Pulse: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     91          	float32 pulse;
     92          	pulse = 0.5724 * pwm - 319.8;
   \   00000002   0x.... 0x....      BL       __aeabi_ui2d
   \   00000006   0x....             LDR.N    R2,??DataTable3_4  ;; 0xce075f70
   \   00000008   0x....             LDR.N    R3,??DataTable3_5  ;; 0x3fe25119
   \   0000000A   0x.... 0x....      BL       __aeabi_dmul
   \   0000000E   0x....             LDR.N    R2,??DataTable3_2  ;; 0xcccccccd
   \   00000010   0x....             LDR.N    R3,??DataTable3_6  ;; 0xc073fccc
   \   00000012   0x.... 0x....      BL       __aeabi_dadd
   \   00000016   0x.... 0x....      BL       __aeabi_d2f
     93          
     94          	if (pulse < 0)
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000020   0xD200             BCS.N    ??PWM_To_Pulse_0
     95          	{
     96          		pulse = 0;
   \   00000022   0x2000             MOVS     R0,#+0
     97          	}
     98          
     99          	return pulse;
   \                     ??PWM_To_Pulse_0: (+1)
   \   00000024   0xBD02             POP      {R1,PC}          ;; return
    100          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xFFFFDCD8         DC32     0xffffdcd8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x4073FCCC         DC32     0x4073fccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xCE075F70         DC32     0xce075f70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x3FE25119         DC32     0x3fe25119

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0xC073FCCC         DC32     0xc073fccc

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Motor_Duty_Change
         8   -> LPLD_FTM_PWM_ChangeDuty
      64   Motor_Init
        48   -> LPLD_FTM_Init
        48   -> LPLD_FTM_PWM_Enable
        64   -> __aeabi_memcpy4
       8   PWM_To_Pulse
         8   -> __aeabi_d2f
         8   -> __aeabi_dadd
         8   -> __aeabi_dmul
         8   -> __aeabi_ui2d
         8 __aeabi_cfcmple
       8   PulseNum_To_PWM
         8   -> __aeabi_d2f
         8   -> __aeabi_dadd
         8   -> __aeabi_ddiv
         8   -> __aeabi_f2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
     110  Motor_Duty_Change
     122  Motor_Init
       4  PWM_Expect
      38  PWM_To_Pulse
      28  PulseNum_To_PWM

 
   4 bytes in section .data
 326 bytes in section .text
 
 326 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
